//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


FetchResult = function(args) {
  this.communications = null;
  if (args) {
    if (args.communications !== undefined && args.communications !== null) {
      this.communications = Thrift.copyList(args.communications, [Communication]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communications is unset!');
    }
  }
};
FetchResult.prototype = {};
FetchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.communications = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Communication();
          elem6.read(input);
          this.communications.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchResult.prototype.write = function(output) {
  output.writeStructBegin('FetchResult');
  if (this.communications !== null && this.communications !== undefined) {
    output.writeFieldBegin('communications', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.communications.length);
    for (var iter7 in this.communications)
    {
      if (this.communications.hasOwnProperty(iter7))
      {
        iter7 = this.communications[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchRequest = function(args) {
  this.communicationIds = null;
  this.auths = null;
  if (args) {
    if (args.communicationIds !== undefined && args.communicationIds !== null) {
      this.communicationIds = Thrift.copyList(args.communicationIds, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationIds is unset!');
    }
    if (args.auths !== undefined && args.auths !== null) {
      this.auths = args.auths;
    }
  }
};
FetchRequest.prototype = {};
FetchRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.communicationIds = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.communicationIds.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.auths = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchRequest.prototype.write = function(output) {
  output.writeStructBegin('FetchRequest');
  if (this.communicationIds !== null && this.communicationIds !== undefined) {
    output.writeFieldBegin('communicationIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.communicationIds.length);
    for (var iter15 in this.communicationIds)
    {
      if (this.communicationIds.hasOwnProperty(iter15))
      {
        iter15 = this.communicationIds[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.auths !== null && this.auths !== undefined) {
    output.writeFieldBegin('auths', Thrift.Type.STRING, 2);
    output.writeString(this.auths);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ActiveLearnerClientService_submitSort_args = function(args) {
  this.sessionId = null;
  this.unitIds = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.unitIds !== undefined && args.unitIds !== null) {
      this.unitIds = Thrift.copyList(args.unitIds, [AnnotationUnitIdentifier]);
    }
  }
};
ActiveLearnerClientService_submitSort_args.prototype = {};
ActiveLearnerClientService_submitSort_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.unitIds = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new AnnotationUnitIdentifier();
          elem22.read(input);
          this.unitIds.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerClientService_submitSort_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerClientService_submitSort_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.unitIds !== null && this.unitIds !== undefined) {
    output.writeFieldBegin('unitIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.unitIds.length);
    for (var iter23 in this.unitIds)
    {
      if (this.unitIds.hasOwnProperty(iter23))
      {
        iter23 = this.unitIds[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerClientService_submitSort_result = function(args) {
};
ActiveLearnerClientService_submitSort_result.prototype = {};
ActiveLearnerClientService_submitSort_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerClientService_submitSort_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerClientService_submitSort_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerClientServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(ActiveLearnerClientServiceClient, ServiceClient);
ActiveLearnerClientServiceClient.prototype.submitSort = function(sessionId, unitIds, callback) {
  if (callback === undefined) {
    this.send_submitSort(sessionId, unitIds);
    this.recv_submitSort();
  } else {
    var postData = this.send_submitSort(sessionId, unitIds, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_submitSort);
  }
};

ActiveLearnerClientServiceClient.prototype.send_submitSort = function(sessionId, unitIds, callback) {
  this.output.writeMessageBegin('submitSort', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerClientService_submitSort_args();
  args.sessionId = sessionId;
  args.unitIds = unitIds;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerClientServiceClient.prototype.recv_submitSort = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerClientService_submitSort_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ActiveLearnerServerService_start_args = function(args) {
  this.sessionId = null;
  this.task = null;
  this.contact = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.task !== undefined && args.task !== null) {
      this.task = new AnnotationTask(args.task);
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = new AsyncContactInfo(args.contact);
    }
  }
};
ActiveLearnerServerService_start_args.prototype = {};
ActiveLearnerServerService_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.task = new AnnotationTask();
        this.task.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.contact = new AsyncContactInfo();
        this.contact.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServerService_start_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServerService_start_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.task !== null && this.task !== undefined) {
    output.writeFieldBegin('task', Thrift.Type.STRUCT, 2);
    this.task.write(output);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRUCT, 3);
    this.contact.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServerService_start_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ActiveLearnerServerService_start_result.prototype = {};
ActiveLearnerServerService_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServerService_start_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServerService_start_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServerService_stop_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
  }
};
ActiveLearnerServerService_stop_args.prototype = {};
ActiveLearnerServerService_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServerService_stop_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServerService_stop_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServerService_stop_result = function(args) {
};
ActiveLearnerServerService_stop_result.prototype = {};
ActiveLearnerServerService_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServerService_stop_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServerService_stop_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServerService_addAnnotations_args = function(args) {
  this.sessionId = null;
  this.annotations = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [Annotation]);
    }
  }
};
ActiveLearnerServerService_addAnnotations_args.prototype = {};
ActiveLearnerServerService_addAnnotations_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.annotations = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Annotation();
          elem14.read(input);
          this.annotations.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServerService_addAnnotations_args.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServerService_addAnnotations_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter15 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter15))
      {
        iter15 = this.annotations[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServerService_addAnnotations_result = function(args) {
};
ActiveLearnerServerService_addAnnotations_result.prototype = {};
ActiveLearnerServerService_addAnnotations_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActiveLearnerServerService_addAnnotations_result.prototype.write = function(output) {
  output.writeStructBegin('ActiveLearnerServerService_addAnnotations_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ActiveLearnerServerServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(ActiveLearnerServerServiceClient, ServiceClient);
ActiveLearnerServerServiceClient.prototype.start = function(sessionId, task, contact, callback) {
  if (callback === undefined) {
    this.send_start(sessionId, task, contact);
    return this.recv_start();
  } else {
    var postData = this.send_start(sessionId, task, contact, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_start);
  }
};

ActiveLearnerServerServiceClient.prototype.send_start = function(sessionId, task, contact, callback) {
  this.output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerServerService_start_args();
  args.sessionId = sessionId;
  args.task = task;
  args.contact = contact;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerServerServiceClient.prototype.recv_start = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerServerService_start_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'start failed: unknown result';
};
ActiveLearnerServerServiceClient.prototype.stop = function(sessionId, callback) {
  if (callback === undefined) {
    this.send_stop(sessionId);
    this.recv_stop();
  } else {
    var postData = this.send_stop(sessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_stop);
  }
};

ActiveLearnerServerServiceClient.prototype.send_stop = function(sessionId, callback) {
  this.output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerServerService_stop_args();
  args.sessionId = sessionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerServerServiceClient.prototype.recv_stop = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerServerService_stop_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
ActiveLearnerServerServiceClient.prototype.addAnnotations = function(sessionId, annotations, callback) {
  if (callback === undefined) {
    this.send_addAnnotations(sessionId, annotations);
    this.recv_addAnnotations();
  } else {
    var postData = this.send_addAnnotations(sessionId, annotations, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addAnnotations);
  }
};

ActiveLearnerServerServiceClient.prototype.send_addAnnotations = function(sessionId, annotations, callback) {
  this.output.writeMessageBegin('addAnnotations', Thrift.MessageType.CALL, this.seqid);
  var args = new ActiveLearnerServerService_addAnnotations_args();
  args.sessionId = sessionId;
  args.annotations = annotations;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ActiveLearnerServerServiceClient.prototype.recv_addAnnotations = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ActiveLearnerServerService_addAnnotations_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

AnnotateCommunicationService_annotate_args = function(args) {
  this.original = null;
  if (args) {
    if (args.original !== undefined && args.original !== null) {
      this.original = new Communication(args.original);
    }
  }
};
AnnotateCommunicationService_annotate_args.prototype = {};
AnnotateCommunicationService_annotate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.original = new Communication();
        this.original.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_annotate_args.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_annotate_args');
  if (this.original !== null && this.original !== undefined) {
    output.writeFieldBegin('original', Thrift.Type.STRUCT, 1);
    this.original.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationService_annotate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ConcreteThriftException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Communication(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
AnnotateCommunicationService_annotate_result.prototype = {};
AnnotateCommunicationService_annotate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Communication();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ConcreteThriftException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_annotate_result.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_annotate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationService_getMetadata_args = function(args) {
};
AnnotateCommunicationService_getMetadata_args.prototype = {};
AnnotateCommunicationService_getMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_getMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_getMetadata_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationService_getMetadata_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AnnotationMetadata(args.success);
    }
  }
};
AnnotateCommunicationService_getMetadata_result.prototype = {};
AnnotateCommunicationService_getMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AnnotationMetadata();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_getMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_getMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationService_getDocumentation_args = function(args) {
};
AnnotateCommunicationService_getDocumentation_args.prototype = {};
AnnotateCommunicationService_getDocumentation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_getDocumentation_args.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_getDocumentation_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationService_getDocumentation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
AnnotateCommunicationService_getDocumentation_result.prototype = {};
AnnotateCommunicationService_getDocumentation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_getDocumentation_result.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_getDocumentation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationService_shutdown_args = function(args) {
};
AnnotateCommunicationService_shutdown_args.prototype = {};
AnnotateCommunicationService_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationService_shutdown_result = function(args) {
};
AnnotateCommunicationService_shutdown_result.prototype = {};
AnnotateCommunicationService_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotateCommunicationService_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('AnnotateCommunicationService_shutdown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotateCommunicationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AnnotateCommunicationServiceClient.prototype = {};
AnnotateCommunicationServiceClient.prototype.annotate = function(original, callback) {
  if (callback === undefined) {
    this.send_annotate(original);
    return this.recv_annotate();
  } else {
    var postData = this.send_annotate(original, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_annotate);
  }
};

AnnotateCommunicationServiceClient.prototype.send_annotate = function(original, callback) {
  this.output.writeMessageBegin('annotate', Thrift.MessageType.CALL, this.seqid);
  var args = new AnnotateCommunicationService_annotate_args();
  args.original = original;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotateCommunicationServiceClient.prototype.recv_annotate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnnotateCommunicationService_annotate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'annotate failed: unknown result';
};
AnnotateCommunicationServiceClient.prototype.getMetadata = function(callback) {
  if (callback === undefined) {
    this.send_getMetadata();
    return this.recv_getMetadata();
  } else {
    var postData = this.send_getMetadata(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMetadata);
  }
};

AnnotateCommunicationServiceClient.prototype.send_getMetadata = function(callback) {
  this.output.writeMessageBegin('getMetadata', Thrift.MessageType.CALL, this.seqid);
  var args = new AnnotateCommunicationService_getMetadata_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotateCommunicationServiceClient.prototype.recv_getMetadata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnnotateCommunicationService_getMetadata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMetadata failed: unknown result';
};
AnnotateCommunicationServiceClient.prototype.getDocumentation = function(callback) {
  if (callback === undefined) {
    this.send_getDocumentation();
    return this.recv_getDocumentation();
  } else {
    var postData = this.send_getDocumentation(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentation);
  }
};

AnnotateCommunicationServiceClient.prototype.send_getDocumentation = function(callback) {
  this.output.writeMessageBegin('getDocumentation', Thrift.MessageType.CALL, this.seqid);
  var args = new AnnotateCommunicationService_getDocumentation_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotateCommunicationServiceClient.prototype.recv_getDocumentation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new AnnotateCommunicationService_getDocumentation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentation failed: unknown result';
};
AnnotateCommunicationServiceClient.prototype.shutdown = function(callback) {
  if (callback === undefined) {
    this.send_shutdown();
  } else {
    var postData = this.send_shutdown(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_shutdown);
  }
};

AnnotateCommunicationServiceClient.prototype.send_shutdown = function(callback) {
  this.output.writeMessageBegin('shutdown', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new AnnotateCommunicationService_shutdown_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Annotator_annotate_args = function(args) {
  this.original = null;
  if (args) {
    if (args.original !== undefined && args.original !== null) {
      this.original = new Communication(args.original);
    }
  }
};
Annotator_annotate_args.prototype = {};
Annotator_annotate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.original = new Communication();
        this.original.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_annotate_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_annotate_args');
  if (this.original !== null && this.original !== undefined) {
    output.writeFieldBegin('original', Thrift.Type.STRUCT, 1);
    this.original.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_annotate_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ConcreteThriftException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Communication(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
Annotator_annotate_result.prototype = {};
Annotator_annotate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Communication();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ConcreteThriftException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_annotate_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_annotate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getMetadata_args = function(args) {
};
Annotator_getMetadata_args.prototype = {};
Annotator_getMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getMetadata_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getMetadata_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new AnnotationMetadata(args.success);
    }
  }
};
Annotator_getMetadata_result.prototype = {};
Annotator_getMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new AnnotationMetadata();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getDocumentation_args = function(args) {
};
Annotator_getDocumentation_args.prototype = {};
Annotator_getDocumentation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getDocumentation_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getDocumentation_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_getDocumentation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Annotator_getDocumentation_result.prototype = {};
Annotator_getDocumentation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_getDocumentation_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_getDocumentation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_shutdown_args = function(args) {
};
Annotator_shutdown_args.prototype = {};
Annotator_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('Annotator_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotator_shutdown_result = function(args) {
};
Annotator_shutdown_result.prototype = {};
Annotator_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotator_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('Annotator_shutdown_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotatorClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
AnnotatorClient.prototype = {};
AnnotatorClient.prototype.annotate = function(original, callback) {
  if (callback === undefined) {
    this.send_annotate(original);
    return this.recv_annotate();
  } else {
    var postData = this.send_annotate(original, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_annotate);
  }
};

AnnotatorClient.prototype.send_annotate = function(original, callback) {
  this.output.writeMessageBegin('annotate', Thrift.MessageType.CALL, this.seqid);
  var args = new Annotator_annotate_args();
  args.original = original;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotatorClient.prototype.recv_annotate = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Annotator_annotate_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'annotate failed: unknown result';
};
AnnotatorClient.prototype.getMetadata = function(callback) {
  if (callback === undefined) {
    this.send_getMetadata();
    return this.recv_getMetadata();
  } else {
    var postData = this.send_getMetadata(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMetadata);
  }
};

AnnotatorClient.prototype.send_getMetadata = function(callback) {
  this.output.writeMessageBegin('getMetadata', Thrift.MessageType.CALL, this.seqid);
  var args = new Annotator_getMetadata_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotatorClient.prototype.recv_getMetadata = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Annotator_getMetadata_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMetadata failed: unknown result';
};
AnnotatorClient.prototype.getDocumentation = function(callback) {
  if (callback === undefined) {
    this.send_getDocumentation();
    return this.recv_getDocumentation();
  } else {
    var postData = this.send_getDocumentation(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getDocumentation);
  }
};

AnnotatorClient.prototype.send_getDocumentation = function(callback) {
  this.output.writeMessageBegin('getDocumentation', Thrift.MessageType.CALL, this.seqid);
  var args = new Annotator_getDocumentation_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

AnnotatorClient.prototype.recv_getDocumentation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Annotator_getDocumentation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getDocumentation failed: unknown result';
};
AnnotatorClient.prototype.shutdown = function(callback) {
  if (callback === undefined) {
    this.send_shutdown();
  } else {
    var postData = this.send_shutdown(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_shutdown);
  }
};

AnnotatorClient.prototype.send_shutdown = function(callback) {
  this.output.writeMessageBegin('shutdown', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new Annotator_shutdown_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Sound = function(args) {
  this.wav = null;
  this.mp3 = null;
  this.sph = null;
  this.path = null;
  if (args) {
    if (args.wav !== undefined && args.wav !== null) {
      this.wav = args.wav;
    }
    if (args.mp3 !== undefined && args.mp3 !== null) {
      this.mp3 = args.mp3;
    }
    if (args.sph !== undefined && args.sph !== null) {
      this.sph = args.sph;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
  }
};
Sound.prototype = {};
Sound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.wav = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mp3 = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sph = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sound.prototype.write = function(output) {
  output.writeStructBegin('Sound');
  if (this.wav !== null && this.wav !== undefined) {
    output.writeFieldBegin('wav', Thrift.Type.STRING, 1);
    output.writeBinary(this.wav);
    output.writeFieldEnd();
  }
  if (this.mp3 !== null && this.mp3 !== undefined) {
    output.writeFieldBegin('mp3', Thrift.Type.STRING, 2);
    output.writeBinary(this.mp3);
    output.writeFieldEnd();
  }
  if (this.sph !== null && this.sph !== undefined) {
    output.writeFieldBegin('sph', Thrift.Type.STRING, 3);
    output.writeBinary(this.sph);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 4);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ClusterMember = function(args) {
  this.communicationId = null;
  this.setId = null;
  this.elementId = null;
  if (args) {
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = new UUID(args.communicationId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationId is unset!');
    }
    if (args.setId !== undefined && args.setId !== null) {
      this.setId = new UUID(args.setId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field setId is unset!');
    }
    if (args.elementId !== undefined && args.elementId !== null) {
      this.elementId = new UUID(args.elementId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field elementId is unset!');
    }
  }
};
ClusterMember.prototype = {};
ClusterMember.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.communicationId = new UUID();
        this.communicationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.setId = new UUID();
        this.setId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.elementId = new UUID();
        this.elementId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClusterMember.prototype.write = function(output) {
  output.writeStructBegin('ClusterMember');
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRUCT, 1);
    this.communicationId.write(output);
    output.writeFieldEnd();
  }
  if (this.setId !== null && this.setId !== undefined) {
    output.writeFieldBegin('setId', Thrift.Type.STRUCT, 2);
    this.setId.write(output);
    output.writeFieldEnd();
  }
  if (this.elementId !== null && this.elementId !== undefined) {
    output.writeFieldBegin('elementId', Thrift.Type.STRUCT, 3);
    this.elementId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cluster = function(args) {
  this.clusterMemberIndexList = null;
  this.confidenceList = null;
  this.childIndexList = null;
  if (args) {
    if (args.clusterMemberIndexList !== undefined && args.clusterMemberIndexList !== null) {
      this.clusterMemberIndexList = Thrift.copyList(args.clusterMemberIndexList, [null]);
    }
    if (args.confidenceList !== undefined && args.confidenceList !== null) {
      this.confidenceList = Thrift.copyList(args.confidenceList, [null]);
    }
    if (args.childIndexList !== undefined && args.childIndexList !== null) {
      this.childIndexList = Thrift.copyList(args.childIndexList, [null]);
    }
  }
};
Cluster.prototype = {};
Cluster.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.clusterMemberIndexList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.clusterMemberIndexList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.confidenceList = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readDouble().value;
          this.confidenceList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.childIndexList = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI32().value;
          this.childIndexList.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cluster.prototype.write = function(output) {
  output.writeStructBegin('Cluster');
  if (this.clusterMemberIndexList !== null && this.clusterMemberIndexList !== undefined) {
    output.writeFieldBegin('clusterMemberIndexList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.clusterMemberIndexList.length);
    for (var iter21 in this.clusterMemberIndexList)
    {
      if (this.clusterMemberIndexList.hasOwnProperty(iter21))
      {
        iter21 = this.clusterMemberIndexList[iter21];
        output.writeI32(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.confidenceList !== null && this.confidenceList !== undefined) {
    output.writeFieldBegin('confidenceList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.confidenceList.length);
    for (var iter22 in this.confidenceList)
    {
      if (this.confidenceList.hasOwnProperty(iter22))
      {
        iter22 = this.confidenceList[iter22];
        output.writeDouble(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.childIndexList !== null && this.childIndexList !== undefined) {
    output.writeFieldBegin('childIndexList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.childIndexList.length);
    for (var iter23 in this.childIndexList)
    {
      if (this.childIndexList.hasOwnProperty(iter23))
      {
        iter23 = this.childIndexList[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Clustering = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.clusterMemberList = null;
  this.clusterList = null;
  this.rootClusterIndexList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.clusterMemberList !== undefined && args.clusterMemberList !== null) {
      this.clusterMemberList = Thrift.copyList(args.clusterMemberList, [ClusterMember]);
    }
    if (args.clusterList !== undefined && args.clusterList !== null) {
      this.clusterList = Thrift.copyList(args.clusterList, [Cluster]);
    }
    if (args.rootClusterIndexList !== undefined && args.rootClusterIndexList !== null) {
      this.rootClusterIndexList = Thrift.copyList(args.rootClusterIndexList, [null]);
    }
  }
};
Clustering.prototype = {};
Clustering.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.clusterMemberList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ClusterMember();
          elem30.read(input);
          this.clusterMemberList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.clusterList = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new Cluster();
          elem37.read(input);
          this.clusterList.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.rootClusterIndexList = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = input.readI32().value;
          this.rootClusterIndexList.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Clustering.prototype.write = function(output) {
  output.writeStructBegin('Clustering');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.clusterMemberList !== null && this.clusterMemberList !== undefined) {
    output.writeFieldBegin('clusterMemberList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.clusterMemberList.length);
    for (var iter45 in this.clusterMemberList)
    {
      if (this.clusterMemberList.hasOwnProperty(iter45))
      {
        iter45 = this.clusterMemberList[iter45];
        iter45.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.clusterList !== null && this.clusterList !== undefined) {
    output.writeFieldBegin('clusterList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.clusterList.length);
    for (var iter46 in this.clusterList)
    {
      if (this.clusterList.hasOwnProperty(iter46))
      {
        iter46 = this.clusterList[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rootClusterIndexList !== null && this.rootClusterIndexList !== undefined) {
    output.writeFieldBegin('rootClusterIndexList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.rootClusterIndexList.length);
    for (var iter47 in this.rootClusterIndexList)
    {
      if (this.rootClusterIndexList.hasOwnProperty(iter47))
      {
        iter47 = this.rootClusterIndexList[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


CommunicationTagging = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.taggingType = null;
  this.tagList = null;
  this.confidenceList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.taggingType !== undefined && args.taggingType !== null) {
      this.taggingType = args.taggingType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taggingType is unset!');
    }
    if (args.tagList !== undefined && args.tagList !== null) {
      this.tagList = Thrift.copyList(args.tagList, [null]);
    }
    if (args.confidenceList !== undefined && args.confidenceList !== null) {
      this.confidenceList = Thrift.copyList(args.confidenceList, [null]);
    }
  }
};
CommunicationTagging.prototype = {};
CommunicationTagging.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.taggingType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tagList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.tagList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.confidenceList = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readDouble().value;
          this.confidenceList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationTagging.prototype.write = function(output) {
  output.writeStructBegin('CommunicationTagging');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.taggingType !== null && this.taggingType !== undefined) {
    output.writeFieldBegin('taggingType', Thrift.Type.STRING, 3);
    output.writeString(this.taggingType);
    output.writeFieldEnd();
  }
  if (this.tagList !== null && this.tagList !== undefined) {
    output.writeFieldBegin('tagList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.tagList.length);
    for (var iter14 in this.tagList)
    {
      if (this.tagList.hasOwnProperty(iter14))
      {
        iter14 = this.tagList[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.confidenceList !== null && this.confidenceList !== undefined) {
    output.writeFieldBegin('confidenceList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.DOUBLE, this.confidenceList.length);
    for (var iter15 in this.confidenceList)
    {
      if (this.confidenceList.hasOwnProperty(iter15))
      {
        iter15 = this.confidenceList[iter15];
        output.writeDouble(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Communication = function(args) {
  this.id = null;
  this.uuid = null;
  this.type = null;
  this.text = null;
  this.startTime = null;
  this.endTime = null;
  this.communicationTaggingList = null;
  this.metadata = null;
  this.keyValueMap = null;
  this.lidList = null;
  this.sectionList = null;
  this.entityMentionSetList = null;
  this.entitySetList = null;
  this.situationMentionSetList = null;
  this.situationSetList = null;
  this.originalText = null;
  this.sound = null;
  this.communicationMetadata = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.communicationTaggingList !== undefined && args.communicationTaggingList !== null) {
      this.communicationTaggingList = Thrift.copyList(args.communicationTaggingList, [CommunicationTagging]);
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.keyValueMap !== undefined && args.keyValueMap !== null) {
      this.keyValueMap = Thrift.copyMap(args.keyValueMap, [null]);
    }
    if (args.lidList !== undefined && args.lidList !== null) {
      this.lidList = Thrift.copyList(args.lidList, [LanguageIdentification]);
    }
    if (args.sectionList !== undefined && args.sectionList !== null) {
      this.sectionList = Thrift.copyList(args.sectionList, [Section]);
    }
    if (args.entityMentionSetList !== undefined && args.entityMentionSetList !== null) {
      this.entityMentionSetList = Thrift.copyList(args.entityMentionSetList, [EntityMentionSet]);
    }
    if (args.entitySetList !== undefined && args.entitySetList !== null) {
      this.entitySetList = Thrift.copyList(args.entitySetList, [EntitySet]);
    }
    if (args.situationMentionSetList !== undefined && args.situationMentionSetList !== null) {
      this.situationMentionSetList = Thrift.copyList(args.situationMentionSetList, [SituationMentionSet]);
    }
    if (args.situationSetList !== undefined && args.situationSetList !== null) {
      this.situationSetList = Thrift.copyList(args.situationSetList, [SituationSet]);
    }
    if (args.originalText !== undefined && args.originalText !== null) {
      this.originalText = args.originalText;
    }
    if (args.sound !== undefined && args.sound !== null) {
      this.sound = new Sound(args.sound);
    }
    if (args.communicationMetadata !== undefined && args.communicationMetadata !== null) {
      this.communicationMetadata = new CommunicationMetadata(args.communicationMetadata);
    }
  }
};
Communication.prototype = {};
Communication.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.communicationTaggingList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new CommunicationTagging();
          elem22.read(input);
          this.communicationTaggingList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.MAP) {
        var _size23 = 0;
        var _rtmp327;
        this.keyValueMap = {};
        var _ktype24 = 0;
        var _vtype25 = 0;
        _rtmp327 = input.readMapBegin();
        _ktype24 = _rtmp327.ktype;
        _vtype25 = _rtmp327.vtype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          if (_i28 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key29 = null;
          var val30 = null;
          key29 = input.readString().value;
          val30 = input.readString().value;
          this.keyValueMap[key29] = val30;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size31 = 0;
        var _rtmp335;
        this.lidList = [];
        var _etype34 = 0;
        _rtmp335 = input.readListBegin();
        _etype34 = _rtmp335.etype;
        _size31 = _rtmp335.size;
        for (var _i36 = 0; _i36 < _size31; ++_i36)
        {
          var elem37 = null;
          elem37 = new LanguageIdentification();
          elem37.read(input);
          this.lidList.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size38 = 0;
        var _rtmp342;
        this.sectionList = [];
        var _etype41 = 0;
        _rtmp342 = input.readListBegin();
        _etype41 = _rtmp342.etype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          var elem44 = null;
          elem44 = new Section();
          elem44.read(input);
          this.sectionList.push(elem44);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size45 = 0;
        var _rtmp349;
        this.entityMentionSetList = [];
        var _etype48 = 0;
        _rtmp349 = input.readListBegin();
        _etype48 = _rtmp349.etype;
        _size45 = _rtmp349.size;
        for (var _i50 = 0; _i50 < _size45; ++_i50)
        {
          var elem51 = null;
          elem51 = new EntityMentionSet();
          elem51.read(input);
          this.entityMentionSetList.push(elem51);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.entitySetList = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new EntitySet();
          elem58.read(input);
          this.entitySetList.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size59 = 0;
        var _rtmp363;
        this.situationMentionSetList = [];
        var _etype62 = 0;
        _rtmp363 = input.readListBegin();
        _etype62 = _rtmp363.etype;
        _size59 = _rtmp363.size;
        for (var _i64 = 0; _i64 < _size59; ++_i64)
        {
          var elem65 = null;
          elem65 = new SituationMentionSet();
          elem65.read(input);
          this.situationMentionSetList.push(elem65);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.situationSetList = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = new SituationSet();
          elem72.read(input);
          this.situationSetList.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.originalText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.sound = new Sound();
        this.sound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.communicationMetadata = new CommunicationMetadata();
        this.communicationMetadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Communication.prototype.write = function(output) {
  output.writeStructBegin('Communication');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 2);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 4);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 5);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 6);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.communicationTaggingList !== null && this.communicationTaggingList !== undefined) {
    output.writeFieldBegin('communicationTaggingList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.communicationTaggingList.length);
    for (var iter73 in this.communicationTaggingList)
    {
      if (this.communicationTaggingList.hasOwnProperty(iter73))
      {
        iter73 = this.communicationTaggingList[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 8);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.keyValueMap !== null && this.keyValueMap !== undefined) {
    output.writeFieldBegin('keyValueMap', Thrift.Type.MAP, 9);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.keyValueMap));
    for (var kiter74 in this.keyValueMap)
    {
      if (this.keyValueMap.hasOwnProperty(kiter74))
      {
        var viter75 = this.keyValueMap[kiter74];
        output.writeString(kiter74);
        output.writeString(viter75);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.lidList !== null && this.lidList !== undefined) {
    output.writeFieldBegin('lidList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.lidList.length);
    for (var iter76 in this.lidList)
    {
      if (this.lidList.hasOwnProperty(iter76))
      {
        iter76 = this.lidList[iter76];
        iter76.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sectionList !== null && this.sectionList !== undefined) {
    output.writeFieldBegin('sectionList', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.sectionList.length);
    for (var iter77 in this.sectionList)
    {
      if (this.sectionList.hasOwnProperty(iter77))
      {
        iter77 = this.sectionList[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entityMentionSetList !== null && this.entityMentionSetList !== undefined) {
    output.writeFieldBegin('entityMentionSetList', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityMentionSetList.length);
    for (var iter78 in this.entityMentionSetList)
    {
      if (this.entityMentionSetList.hasOwnProperty(iter78))
      {
        iter78 = this.entityMentionSetList[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entitySetList !== null && this.entitySetList !== undefined) {
    output.writeFieldBegin('entitySetList', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.entitySetList.length);
    for (var iter79 in this.entitySetList)
    {
      if (this.entitySetList.hasOwnProperty(iter79))
      {
        iter79 = this.entitySetList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationMentionSetList !== null && this.situationMentionSetList !== undefined) {
    output.writeFieldBegin('situationMentionSetList', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationMentionSetList.length);
    for (var iter80 in this.situationMentionSetList)
    {
      if (this.situationMentionSetList.hasOwnProperty(iter80))
      {
        iter80 = this.situationMentionSetList[iter80];
        iter80.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationSetList !== null && this.situationSetList !== undefined) {
    output.writeFieldBegin('situationSetList', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationSetList.length);
    for (var iter81 in this.situationSetList)
    {
      if (this.situationSetList.hasOwnProperty(iter81))
      {
        iter81 = this.situationSetList[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.originalText !== null && this.originalText !== undefined) {
    output.writeFieldBegin('originalText', Thrift.Type.STRING, 16);
    output.writeString(this.originalText);
    output.writeFieldEnd();
  }
  if (this.sound !== null && this.sound !== undefined) {
    output.writeFieldBegin('sound', Thrift.Type.STRUCT, 20);
    this.sound.write(output);
    output.writeFieldEnd();
  }
  if (this.communicationMetadata !== null && this.communicationMetadata !== undefined) {
    output.writeFieldBegin('communicationMetadata', Thrift.Type.STRUCT, 21);
    this.communicationMetadata.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommunicationSet = function(args) {
  this.communicationIdList = null;
  this.corpus = null;
  this.entityMentionClusterList = null;
  this.entityClusterList = null;
  this.situationMentionClusterList = null;
  this.situationClusterList = null;
  if (args) {
    if (args.communicationIdList !== undefined && args.communicationIdList !== null) {
      this.communicationIdList = Thrift.copyList(args.communicationIdList, [UUID]);
    }
    if (args.corpus !== undefined && args.corpus !== null) {
      this.corpus = args.corpus;
    }
    if (args.entityMentionClusterList !== undefined && args.entityMentionClusterList !== null) {
      this.entityMentionClusterList = Thrift.copyList(args.entityMentionClusterList, [Clustering]);
    }
    if (args.entityClusterList !== undefined && args.entityClusterList !== null) {
      this.entityClusterList = Thrift.copyList(args.entityClusterList, [Clustering]);
    }
    if (args.situationMentionClusterList !== undefined && args.situationMentionClusterList !== null) {
      this.situationMentionClusterList = Thrift.copyList(args.situationMentionClusterList, [Clustering]);
    }
    if (args.situationClusterList !== undefined && args.situationClusterList !== null) {
      this.situationClusterList = Thrift.copyList(args.situationClusterList, [Clustering]);
    }
  }
};
CommunicationSet.prototype = {};
CommunicationSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.communicationIdList = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = new UUID();
          elem88.read(input);
          this.communicationIdList.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.corpus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size89 = 0;
        var _rtmp393;
        this.entityMentionClusterList = [];
        var _etype92 = 0;
        _rtmp393 = input.readListBegin();
        _etype92 = _rtmp393.etype;
        _size89 = _rtmp393.size;
        for (var _i94 = 0; _i94 < _size89; ++_i94)
        {
          var elem95 = null;
          elem95 = new Clustering();
          elem95.read(input);
          this.entityMentionClusterList.push(elem95);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.entityClusterList = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new Clustering();
          elem102.read(input);
          this.entityClusterList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size103 = 0;
        var _rtmp3107;
        this.situationMentionClusterList = [];
        var _etype106 = 0;
        _rtmp3107 = input.readListBegin();
        _etype106 = _rtmp3107.etype;
        _size103 = _rtmp3107.size;
        for (var _i108 = 0; _i108 < _size103; ++_i108)
        {
          var elem109 = null;
          elem109 = new Clustering();
          elem109.read(input);
          this.situationMentionClusterList.push(elem109);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size110 = 0;
        var _rtmp3114;
        this.situationClusterList = [];
        var _etype113 = 0;
        _rtmp3114 = input.readListBegin();
        _etype113 = _rtmp3114.etype;
        _size110 = _rtmp3114.size;
        for (var _i115 = 0; _i115 < _size110; ++_i115)
        {
          var elem116 = null;
          elem116 = new Clustering();
          elem116.read(input);
          this.situationClusterList.push(elem116);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationSet.prototype.write = function(output) {
  output.writeStructBegin('CommunicationSet');
  if (this.communicationIdList !== null && this.communicationIdList !== undefined) {
    output.writeFieldBegin('communicationIdList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.communicationIdList.length);
    for (var iter117 in this.communicationIdList)
    {
      if (this.communicationIdList.hasOwnProperty(iter117))
      {
        iter117 = this.communicationIdList[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.corpus !== null && this.corpus !== undefined) {
    output.writeFieldBegin('corpus', Thrift.Type.STRING, 2);
    output.writeString(this.corpus);
    output.writeFieldEnd();
  }
  if (this.entityMentionClusterList !== null && this.entityMentionClusterList !== undefined) {
    output.writeFieldBegin('entityMentionClusterList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityMentionClusterList.length);
    for (var iter118 in this.entityMentionClusterList)
    {
      if (this.entityMentionClusterList.hasOwnProperty(iter118))
      {
        iter118 = this.entityMentionClusterList[iter118];
        iter118.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entityClusterList !== null && this.entityClusterList !== undefined) {
    output.writeFieldBegin('entityClusterList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityClusterList.length);
    for (var iter119 in this.entityClusterList)
    {
      if (this.entityClusterList.hasOwnProperty(iter119))
      {
        iter119 = this.entityClusterList[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationMentionClusterList !== null && this.situationMentionClusterList !== undefined) {
    output.writeFieldBegin('situationMentionClusterList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationMentionClusterList.length);
    for (var iter120 in this.situationMentionClusterList)
    {
      if (this.situationMentionClusterList.hasOwnProperty(iter120))
      {
        iter120 = this.situationMentionClusterList[iter120];
        iter120.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationClusterList !== null && this.situationClusterList !== undefined) {
    output.writeFieldBegin('situationClusterList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationClusterList.length);
    for (var iter121 in this.situationClusterList)
    {
      if (this.situationClusterList.hasOwnProperty(iter121))
      {
        iter121 = this.situationClusterList[iter121];
        iter121.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


EmailAddress = function(args) {
  this.address = null;
  this.displayName = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.displayName !== undefined && args.displayName !== null) {
      this.displayName = args.displayName;
    }
  }
};
EmailAddress.prototype = {};
EmailAddress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailAddress.prototype.write = function(output) {
  output.writeStructBegin('EmailAddress');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmailCommunicationInfo = function(args) {
  this.messageId = null;
  this.contentType = null;
  this.userAgent = null;
  this.inReplyToList = null;
  this.referenceList = null;
  this.senderAddress = null;
  this.returnPathAddress = null;
  this.toAddressList = null;
  this.ccAddressList = null;
  this.bccAddressList = null;
  this.emailFolder = null;
  this.subject = null;
  this.quotedAddresses = null;
  this.attachmentPaths = null;
  this.salutation = null;
  this.signature = null;
  if (args) {
    if (args.messageId !== undefined && args.messageId !== null) {
      this.messageId = args.messageId;
    }
    if (args.contentType !== undefined && args.contentType !== null) {
      this.contentType = args.contentType;
    }
    if (args.userAgent !== undefined && args.userAgent !== null) {
      this.userAgent = args.userAgent;
    }
    if (args.inReplyToList !== undefined && args.inReplyToList !== null) {
      this.inReplyToList = Thrift.copyList(args.inReplyToList, [null]);
    }
    if (args.referenceList !== undefined && args.referenceList !== null) {
      this.referenceList = Thrift.copyList(args.referenceList, [null]);
    }
    if (args.senderAddress !== undefined && args.senderAddress !== null) {
      this.senderAddress = new EmailAddress(args.senderAddress);
    }
    if (args.returnPathAddress !== undefined && args.returnPathAddress !== null) {
      this.returnPathAddress = new EmailAddress(args.returnPathAddress);
    }
    if (args.toAddressList !== undefined && args.toAddressList !== null) {
      this.toAddressList = Thrift.copyList(args.toAddressList, [EmailAddress]);
    }
    if (args.ccAddressList !== undefined && args.ccAddressList !== null) {
      this.ccAddressList = Thrift.copyList(args.ccAddressList, [EmailAddress]);
    }
    if (args.bccAddressList !== undefined && args.bccAddressList !== null) {
      this.bccAddressList = Thrift.copyList(args.bccAddressList, [EmailAddress]);
    }
    if (args.emailFolder !== undefined && args.emailFolder !== null) {
      this.emailFolder = args.emailFolder;
    }
    if (args.subject !== undefined && args.subject !== null) {
      this.subject = args.subject;
    }
    if (args.quotedAddresses !== undefined && args.quotedAddresses !== null) {
      this.quotedAddresses = Thrift.copyList(args.quotedAddresses, [null]);
    }
    if (args.attachmentPaths !== undefined && args.attachmentPaths !== null) {
      this.attachmentPaths = Thrift.copyList(args.attachmentPaths, [null]);
    }
    if (args.salutation !== undefined && args.salutation !== null) {
      this.salutation = args.salutation;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
  }
};
EmailCommunicationInfo.prototype = {};
EmailCommunicationInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contentType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userAgent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.inReplyToList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.inReplyToList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.referenceList = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.referenceList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.senderAddress = new EmailAddress();
        this.senderAddress.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.returnPathAddress = new EmailAddress();
        this.returnPathAddress.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.toAddressList = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new EmailAddress();
          elem20.read(input);
          this.toAddressList.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.ccAddressList = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new EmailAddress();
          elem27.read(input);
          this.ccAddressList.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.bccAddressList = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new EmailAddress();
          elem34.read(input);
          this.bccAddressList.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.emailFolder = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.quotedAddresses = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readString().value;
          this.quotedAddresses.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.attachmentPaths = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString().value;
          this.attachmentPaths.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.salutation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailCommunicationInfo.prototype.write = function(output) {
  output.writeStructBegin('EmailCommunicationInfo');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.STRING, 2);
    output.writeString(this.contentType);
    output.writeFieldEnd();
  }
  if (this.userAgent !== null && this.userAgent !== undefined) {
    output.writeFieldBegin('userAgent', Thrift.Type.STRING, 3);
    output.writeString(this.userAgent);
    output.writeFieldEnd();
  }
  if (this.inReplyToList !== null && this.inReplyToList !== undefined) {
    output.writeFieldBegin('inReplyToList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.inReplyToList.length);
    for (var iter49 in this.inReplyToList)
    {
      if (this.inReplyToList.hasOwnProperty(iter49))
      {
        iter49 = this.inReplyToList[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.referenceList !== null && this.referenceList !== undefined) {
    output.writeFieldBegin('referenceList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.referenceList.length);
    for (var iter50 in this.referenceList)
    {
      if (this.referenceList.hasOwnProperty(iter50))
      {
        iter50 = this.referenceList[iter50];
        output.writeString(iter50);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.senderAddress !== null && this.senderAddress !== undefined) {
    output.writeFieldBegin('senderAddress', Thrift.Type.STRUCT, 6);
    this.senderAddress.write(output);
    output.writeFieldEnd();
  }
  if (this.returnPathAddress !== null && this.returnPathAddress !== undefined) {
    output.writeFieldBegin('returnPathAddress', Thrift.Type.STRUCT, 7);
    this.returnPathAddress.write(output);
    output.writeFieldEnd();
  }
  if (this.toAddressList !== null && this.toAddressList !== undefined) {
    output.writeFieldBegin('toAddressList', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.toAddressList.length);
    for (var iter51 in this.toAddressList)
    {
      if (this.toAddressList.hasOwnProperty(iter51))
      {
        iter51 = this.toAddressList[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddressList !== null && this.ccAddressList !== undefined) {
    output.writeFieldBegin('ccAddressList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.ccAddressList.length);
    for (var iter52 in this.ccAddressList)
    {
      if (this.ccAddressList.hasOwnProperty(iter52))
      {
        iter52 = this.ccAddressList[iter52];
        iter52.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bccAddressList !== null && this.bccAddressList !== undefined) {
    output.writeFieldBegin('bccAddressList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.bccAddressList.length);
    for (var iter53 in this.bccAddressList)
    {
      if (this.bccAddressList.hasOwnProperty(iter53))
      {
        iter53 = this.bccAddressList[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.emailFolder !== null && this.emailFolder !== undefined) {
    output.writeFieldBegin('emailFolder', Thrift.Type.STRING, 11);
    output.writeString(this.emailFolder);
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 12);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.quotedAddresses !== null && this.quotedAddresses !== undefined) {
    output.writeFieldBegin('quotedAddresses', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.quotedAddresses.length);
    for (var iter54 in this.quotedAddresses)
    {
      if (this.quotedAddresses.hasOwnProperty(iter54))
      {
        iter54 = this.quotedAddresses[iter54];
        output.writeString(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attachmentPaths !== null && this.attachmentPaths !== undefined) {
    output.writeFieldBegin('attachmentPaths', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.attachmentPaths.length);
    for (var iter55 in this.attachmentPaths)
    {
      if (this.attachmentPaths.hasOwnProperty(iter55))
      {
        iter55 = this.attachmentPaths[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.salutation !== null && this.salutation !== undefined) {
    output.writeFieldBegin('salutation', Thrift.Type.STRING, 15);
    output.writeString(this.salutation);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 16);
    output.writeString(this.signature);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Entity = function(args) {
  this.uuid = null;
  this.mentionIdList = null;
  this.type = null;
  this.confidence = null;
  this.canonicalName = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.mentionIdList !== undefined && args.mentionIdList !== null) {
      this.mentionIdList = Thrift.copyList(args.mentionIdList, [UUID]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionIdList is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
    if (args.canonicalName !== undefined && args.canonicalName !== null) {
      this.canonicalName = args.canonicalName;
    }
  }
};
Entity.prototype = {};
Entity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.mentionIdList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new UUID();
          elem6.read(input);
          this.mentionIdList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.canonicalName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Entity.prototype.write = function(output) {
  output.writeStructBegin('Entity');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.mentionIdList !== null && this.mentionIdList !== undefined) {
    output.writeFieldBegin('mentionIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.mentionIdList.length);
    for (var iter7 in this.mentionIdList)
    {
      if (this.mentionIdList.hasOwnProperty(iter7))
      {
        iter7 = this.mentionIdList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.canonicalName !== null && this.canonicalName !== undefined) {
    output.writeFieldBegin('canonicalName', Thrift.Type.STRING, 5);
    output.writeString(this.canonicalName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntitySet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.entityList = null;
  this.linkingList = null;
  this.mentionSetId = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.entityList !== undefined && args.entityList !== null) {
      this.entityList = Thrift.copyList(args.entityList, [Entity]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field entityList is unset!');
    }
    if (args.linkingList !== undefined && args.linkingList !== null) {
      this.linkingList = Thrift.copyList(args.linkingList, [Linking]);
    }
    if (args.mentionSetId !== undefined && args.mentionSetId !== null) {
      this.mentionSetId = new UUID(args.mentionSetId);
    }
  }
};
EntitySet.prototype = {};
EntitySet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.entityList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Entity();
          elem14.read(input);
          this.entityList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.linkingList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new Linking();
          elem21.read(input);
          this.linkingList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.mentionSetId = new UUID();
        this.mentionSetId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntitySet.prototype.write = function(output) {
  output.writeStructBegin('EntitySet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.entityList !== null && this.entityList !== undefined) {
    output.writeFieldBegin('entityList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityList.length);
    for (var iter22 in this.entityList)
    {
      if (this.entityList.hasOwnProperty(iter22))
      {
        iter22 = this.entityList[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkingList !== null && this.linkingList !== undefined) {
    output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
    for (var iter23 in this.linkingList)
    {
      if (this.linkingList.hasOwnProperty(iter23))
      {
        iter23 = this.linkingList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mentionSetId !== null && this.mentionSetId !== undefined) {
    output.writeFieldBegin('mentionSetId', Thrift.Type.STRUCT, 5);
    this.mentionSetId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntityMention = function(args) {
  this.uuid = null;
  this.tokens = null;
  this.entityType = null;
  this.phraseType = null;
  this.confidence = null;
  this.text = null;
  this.childMentionIdList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokens is unset!');
    }
    if (args.entityType !== undefined && args.entityType !== null) {
      this.entityType = args.entityType;
    }
    if (args.phraseType !== undefined && args.phraseType !== null) {
      this.phraseType = args.phraseType;
    }
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.childMentionIdList !== undefined && args.childMentionIdList !== null) {
      this.childMentionIdList = Thrift.copyList(args.childMentionIdList, [UUID]);
    }
  }
};
EntityMention.prototype = {};
EntityMention.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.entityType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phraseType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.childMentionIdList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new UUID();
          elem30.read(input);
          this.childMentionIdList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityMention.prototype.write = function(output) {
  output.writeStructBegin('EntityMention');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 2);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.entityType !== null && this.entityType !== undefined) {
    output.writeFieldBegin('entityType', Thrift.Type.STRING, 3);
    output.writeString(this.entityType);
    output.writeFieldEnd();
  }
  if (this.phraseType !== null && this.phraseType !== undefined) {
    output.writeFieldBegin('phraseType', Thrift.Type.STRING, 4);
    output.writeString(this.phraseType);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 6);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.childMentionIdList !== null && this.childMentionIdList !== undefined) {
    output.writeFieldBegin('childMentionIdList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.childMentionIdList.length);
    for (var iter31 in this.childMentionIdList)
    {
      if (this.childMentionIdList.hasOwnProperty(iter31))
      {
        iter31 = this.childMentionIdList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntityMentionSet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.mentionList = null;
  this.linkingList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.mentionList !== undefined && args.mentionList !== null) {
      this.mentionList = Thrift.copyList(args.mentionList, [EntityMention]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionList is unset!');
    }
    if (args.linkingList !== undefined && args.linkingList !== null) {
      this.linkingList = Thrift.copyList(args.linkingList, [Linking]);
    }
  }
};
EntityMentionSet.prototype = {};
EntityMentionSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.mentionList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new EntityMention();
          elem38.read(input);
          this.mentionList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.linkingList = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new Linking();
          elem45.read(input);
          this.linkingList.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityMentionSet.prototype.write = function(output) {
  output.writeStructBegin('EntityMentionSet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.mentionList !== null && this.mentionList !== undefined) {
    output.writeFieldBegin('mentionList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mentionList.length);
    for (var iter46 in this.mentionList)
    {
      if (this.mentionList.hasOwnProperty(iter46))
      {
        iter46 = this.mentionList[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkingList !== null && this.linkingList !== undefined) {
    output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
    for (var iter47 in this.linkingList)
    {
      if (this.linkingList.hasOwnProperty(iter47))
      {
        iter47 = this.linkingList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


ConcreteThriftException = function(args) {
  this.message = null;
  this.serEx = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.serEx !== undefined && args.serEx !== null) {
      this.serEx = args.serEx;
    }
  }
};
Thrift.inherits(ConcreteThriftException, Thrift.TException);
ConcreteThriftException.prototype.name = 'ConcreteThriftException';
ConcreteThriftException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serEx = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConcreteThriftException.prototype.write = function(output) {
  output.writeStructBegin('ConcreteThriftException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serEx !== null && this.serEx !== undefined) {
    output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
    output.writeBinary(this.serEx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

FeedbackService_startFeedback_args = function(args) {
  this.results = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = new SearchResult(args.results);
    }
  }
};
FeedbackService_startFeedback_args.prototype = {};
FeedbackService_startFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.results = new SearchResult();
        this.results.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackService_startFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('FeedbackService_startFeedback_args');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.STRUCT, 1);
    this.results.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackService_startFeedback_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FeedbackService_startFeedback_result.prototype = {};
FeedbackService_startFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackService_startFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('FeedbackService_startFeedback_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackService_addCommunicationFeedback_args = function(args) {
  this.searchResultsId = null;
  this.communicationId = null;
  this.feedback = null;
  if (args) {
    if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
      this.searchResultsId = new UUID(args.searchResultsId);
    }
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.feedback !== undefined && args.feedback !== null) {
      this.feedback = args.feedback;
    }
  }
};
FeedbackService_addCommunicationFeedback_args.prototype = {};
FeedbackService_addCommunicationFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultsId = new UUID();
        this.searchResultsId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.feedback = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackService_addCommunicationFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('FeedbackService_addCommunicationFeedback_args');
  if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
    output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
    this.searchResultsId.write(output);
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.feedback !== null && this.feedback !== undefined) {
    output.writeFieldBegin('feedback', Thrift.Type.I32, 3);
    output.writeI32(this.feedback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackService_addCommunicationFeedback_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FeedbackService_addCommunicationFeedback_result.prototype = {};
FeedbackService_addCommunicationFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackService_addCommunicationFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('FeedbackService_addCommunicationFeedback_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackService_addSentenceFeedback_args = function(args) {
  this.searchResultsId = null;
  this.communicationId = null;
  this.sentenceId = null;
  this.feedback = null;
  if (args) {
    if (args.searchResultsId !== undefined && args.searchResultsId !== null) {
      this.searchResultsId = new UUID(args.searchResultsId);
    }
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.sentenceId !== undefined && args.sentenceId !== null) {
      this.sentenceId = new UUID(args.sentenceId);
    }
    if (args.feedback !== undefined && args.feedback !== null) {
      this.feedback = args.feedback;
    }
  }
};
FeedbackService_addSentenceFeedback_args.prototype = {};
FeedbackService_addSentenceFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultsId = new UUID();
        this.searchResultsId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sentenceId = new UUID();
        this.sentenceId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.feedback = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackService_addSentenceFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('FeedbackService_addSentenceFeedback_args');
  if (this.searchResultsId !== null && this.searchResultsId !== undefined) {
    output.writeFieldBegin('searchResultsId', Thrift.Type.STRUCT, 1);
    this.searchResultsId.write(output);
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.sentenceId !== null && this.sentenceId !== undefined) {
    output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 3);
    this.sentenceId.write(output);
    output.writeFieldEnd();
  }
  if (this.feedback !== null && this.feedback !== undefined) {
    output.writeFieldBegin('feedback', Thrift.Type.I32, 4);
    output.writeI32(this.feedback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackService_addSentenceFeedback_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FeedbackService_addSentenceFeedback_result.prototype = {};
FeedbackService_addSentenceFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeedbackService_addSentenceFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('FeedbackService_addSentenceFeedback_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeedbackServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(FeedbackServiceClient, ServiceClient);
FeedbackServiceClient.prototype.startFeedback = function(results, callback) {
  if (callback === undefined) {
    this.send_startFeedback(results);
    this.recv_startFeedback();
  } else {
    var postData = this.send_startFeedback(results, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_startFeedback);
  }
};

FeedbackServiceClient.prototype.send_startFeedback = function(results, callback) {
  this.output.writeMessageBegin('startFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new FeedbackService_startFeedback_args();
  args.results = results;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FeedbackServiceClient.prototype.recv_startFeedback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FeedbackService_startFeedback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
FeedbackServiceClient.prototype.addCommunicationFeedback = function(searchResultsId, communicationId, feedback, callback) {
  if (callback === undefined) {
    this.send_addCommunicationFeedback(searchResultsId, communicationId, feedback);
    this.recv_addCommunicationFeedback();
  } else {
    var postData = this.send_addCommunicationFeedback(searchResultsId, communicationId, feedback, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addCommunicationFeedback);
  }
};

FeedbackServiceClient.prototype.send_addCommunicationFeedback = function(searchResultsId, communicationId, feedback, callback) {
  this.output.writeMessageBegin('addCommunicationFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new FeedbackService_addCommunicationFeedback_args();
  args.searchResultsId = searchResultsId;
  args.communicationId = communicationId;
  args.feedback = feedback;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FeedbackServiceClient.prototype.recv_addCommunicationFeedback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FeedbackService_addCommunicationFeedback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
FeedbackServiceClient.prototype.addSentenceFeedback = function(searchResultsId, communicationId, sentenceId, feedback, callback) {
  if (callback === undefined) {
    this.send_addSentenceFeedback(searchResultsId, communicationId, sentenceId, feedback);
    this.recv_addSentenceFeedback();
  } else {
    var postData = this.send_addSentenceFeedback(searchResultsId, communicationId, sentenceId, feedback, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_addSentenceFeedback);
  }
};

FeedbackServiceClient.prototype.send_addSentenceFeedback = function(searchResultsId, communicationId, sentenceId, feedback, callback) {
  this.output.writeMessageBegin('addSentenceFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new FeedbackService_addSentenceFeedback_args();
  args.searchResultsId = searchResultsId;
  args.communicationId = communicationId;
  args.sentenceId = sentenceId;
  args.feedback = feedback;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FeedbackServiceClient.prototype.recv_addSentenceFeedback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FeedbackService_addSentenceFeedback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

FetchCommunicationService_fetch_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined && args.request !== null) {
      this.request = new FetchRequest(args.request);
    }
  }
};
FetchCommunicationService_fetch_args.prototype = {};
FetchCommunicationService_fetch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new FetchRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchCommunicationService_fetch_args.prototype.write = function(output) {
  output.writeStructBegin('FetchCommunicationService_fetch_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchCommunicationService_fetch_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new FetchResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FetchCommunicationService_fetch_result.prototype = {};
FetchCommunicationService_fetch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new FetchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchCommunicationService_fetch_result.prototype.write = function(output) {
  output.writeStructBegin('FetchCommunicationService_fetch_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchCommunicationService_getCommunicationIDs_args = function(args) {
  this.offset = null;
  this.count = null;
  if (args) {
    if (args.offset !== undefined && args.offset !== null) {
      this.offset = args.offset;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
FetchCommunicationService_getCommunicationIDs_args.prototype = {};
FetchCommunicationService_getCommunicationIDs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.offset = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.count = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchCommunicationService_getCommunicationIDs_args.prototype.write = function(output) {
  output.writeStructBegin('FetchCommunicationService_getCommunicationIDs_args');
  if (this.offset !== null && this.offset !== undefined) {
    output.writeFieldBegin('offset', Thrift.Type.I64, 1);
    output.writeI64(this.offset);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.I64, 2);
    output.writeI64(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchCommunicationService_getCommunicationIDs_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NotImplementedException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FetchCommunicationService_getCommunicationIDs_result.prototype = {};
FetchCommunicationService_getCommunicationIDs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NotImplementedException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchCommunicationService_getCommunicationIDs_result.prototype.write = function(output) {
  output.writeStructBegin('FetchCommunicationService_getCommunicationIDs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchCommunicationService_getCommunicationCount_args = function(args) {
};
FetchCommunicationService_getCommunicationCount_args.prototype = {};
FetchCommunicationService_getCommunicationCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchCommunicationService_getCommunicationCount_args.prototype.write = function(output) {
  output.writeStructBegin('FetchCommunicationService_getCommunicationCount_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchCommunicationService_getCommunicationCount_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof NotImplementedException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
FetchCommunicationService_getCommunicationCount_result.prototype = {};
FetchCommunicationService_getCommunicationCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new NotImplementedException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchCommunicationService_getCommunicationCount_result.prototype.write = function(output) {
  output.writeStructBegin('FetchCommunicationService_getCommunicationCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FetchCommunicationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(FetchCommunicationServiceClient, ServiceClient);
FetchCommunicationServiceClient.prototype.fetch = function(request, callback) {
  if (callback === undefined) {
    this.send_fetch(request);
    return this.recv_fetch();
  } else {
    var postData = this.send_fetch(request, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_fetch);
  }
};

FetchCommunicationServiceClient.prototype.send_fetch = function(request, callback) {
  this.output.writeMessageBegin('fetch', Thrift.MessageType.CALL, this.seqid);
  var args = new FetchCommunicationService_fetch_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FetchCommunicationServiceClient.prototype.recv_fetch = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FetchCommunicationService_fetch_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'fetch failed: unknown result';
};
FetchCommunicationServiceClient.prototype.getCommunicationIDs = function(offset, count, callback) {
  if (callback === undefined) {
    this.send_getCommunicationIDs(offset, count);
    return this.recv_getCommunicationIDs();
  } else {
    var postData = this.send_getCommunicationIDs(offset, count, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCommunicationIDs);
  }
};

FetchCommunicationServiceClient.prototype.send_getCommunicationIDs = function(offset, count, callback) {
  this.output.writeMessageBegin('getCommunicationIDs', Thrift.MessageType.CALL, this.seqid);
  var args = new FetchCommunicationService_getCommunicationIDs_args();
  args.offset = offset;
  args.count = count;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FetchCommunicationServiceClient.prototype.recv_getCommunicationIDs = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FetchCommunicationService_getCommunicationIDs_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCommunicationIDs failed: unknown result';
};
FetchCommunicationServiceClient.prototype.getCommunicationCount = function(callback) {
  if (callback === undefined) {
    this.send_getCommunicationCount();
    return this.recv_getCommunicationCount();
  } else {
    var postData = this.send_getCommunicationCount(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCommunicationCount);
  }
};

FetchCommunicationServiceClient.prototype.send_getCommunicationCount = function(callback) {
  this.output.writeMessageBegin('getCommunicationCount', Thrift.MessageType.CALL, this.seqid);
  var args = new FetchCommunicationService_getCommunicationCount_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

FetchCommunicationServiceClient.prototype.recv_getCommunicationCount = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new FetchCommunicationService_getCommunicationCount_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCommunicationCount failed: unknown result';
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


LanguageIdentification = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.languageToProbabilityMap = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.languageToProbabilityMap !== undefined && args.languageToProbabilityMap !== null) {
      this.languageToProbabilityMap = Thrift.copyMap(args.languageToProbabilityMap, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field languageToProbabilityMap is unset!');
    }
  }
};
LanguageIdentification.prototype = {};
LanguageIdentification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.languageToProbabilityMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readDouble().value;
          this.languageToProbabilityMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LanguageIdentification.prototype.write = function(output) {
  output.writeStructBegin('LanguageIdentification');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.languageToProbabilityMap !== null && this.languageToProbabilityMap !== undefined) {
    output.writeFieldBegin('languageToProbabilityMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.languageToProbabilityMap));
    for (var kiter8 in this.languageToProbabilityMap)
    {
      if (this.languageToProbabilityMap.hasOwnProperty(kiter8))
      {
        var viter9 = this.languageToProbabilityMap[kiter8];
        output.writeString(kiter8);
        output.writeDouble(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


AnnotationTask = function(args) {
  this.type = null;
  this.language = null;
  this.unitType = null;
  this.units = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.language !== undefined && args.language !== null) {
      this.language = args.language;
    }
    if (args.unitType !== undefined && args.unitType !== null) {
      this.unitType = args.unitType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field unitType is unset!');
    }
    if (args.units !== undefined && args.units !== null) {
      this.units = Thrift.copyList(args.units, [AnnotationUnitIdentifier]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field units is unset!');
    }
  }
};
AnnotationTask.prototype = {};
AnnotationTask.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.unitType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.units = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new AnnotationUnitIdentifier();
          elem6.read(input);
          this.units.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationTask.prototype.write = function(output) {
  output.writeStructBegin('AnnotationTask');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 2);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.unitType !== null && this.unitType !== undefined) {
    output.writeFieldBegin('unitType', Thrift.Type.I32, 3);
    output.writeI32(this.unitType);
    output.writeFieldEnd();
  }
  if (this.units !== null && this.units !== undefined) {
    output.writeFieldBegin('units', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.units.length);
    for (var iter7 in this.units)
    {
      if (this.units.hasOwnProperty(iter7))
      {
        iter7 = this.units[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotation = function(args) {
  this.id = null;
  this.communication = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new AnnotationUnitIdentifier(args.id);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.communication !== undefined && args.communication !== null) {
      this.communication = new Communication(args.communication);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communication is unset!');
    }
  }
};
Annotation.prototype = {};
Annotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new AnnotationUnitIdentifier();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotation.prototype.write = function(output) {
  output.writeStructBegin('Annotation');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 2);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


LinkTarget = function(args) {
  this.confidence = null;
  this.targetId = null;
  this.dbId = null;
  this.dbName = null;
  if (args) {
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
    if (args.targetId !== undefined && args.targetId !== null) {
      this.targetId = new UUID(args.targetId);
    }
    if (args.dbId !== undefined && args.dbId !== null) {
      this.dbId = args.dbId;
    }
    if (args.dbName !== undefined && args.dbName !== null) {
      this.dbName = args.dbName;
    }
  }
};
LinkTarget.prototype = {};
LinkTarget.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.targetId = new UUID();
        this.targetId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dbId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dbName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinkTarget.prototype.write = function(output) {
  output.writeStructBegin('LinkTarget');
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.targetId !== null && this.targetId !== undefined) {
    output.writeFieldBegin('targetId', Thrift.Type.STRUCT, 2);
    this.targetId.write(output);
    output.writeFieldEnd();
  }
  if (this.dbId !== null && this.dbId !== undefined) {
    output.writeFieldBegin('dbId', Thrift.Type.STRING, 3);
    output.writeString(this.dbId);
    output.writeFieldEnd();
  }
  if (this.dbName !== null && this.dbName !== undefined) {
    output.writeFieldBegin('dbName', Thrift.Type.STRING, 4);
    output.writeString(this.dbName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Link = function(args) {
  this.sourceId = null;
  this.linkTargetList = null;
  if (args) {
    if (args.sourceId !== undefined && args.sourceId !== null) {
      this.sourceId = new UUID(args.sourceId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sourceId is unset!');
    }
    if (args.linkTargetList !== undefined && args.linkTargetList !== null) {
      this.linkTargetList = Thrift.copyList(args.linkTargetList, [LinkTarget]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field linkTargetList is unset!');
    }
  }
};
Link.prototype = {};
Link.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sourceId = new UUID();
        this.sourceId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.linkTargetList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new LinkTarget();
          elem6.read(input);
          this.linkTargetList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Link.prototype.write = function(output) {
  output.writeStructBegin('Link');
  if (this.sourceId !== null && this.sourceId !== undefined) {
    output.writeFieldBegin('sourceId', Thrift.Type.STRUCT, 1);
    this.sourceId.write(output);
    output.writeFieldEnd();
  }
  if (this.linkTargetList !== null && this.linkTargetList !== undefined) {
    output.writeFieldBegin('linkTargetList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkTargetList.length);
    for (var iter7 in this.linkTargetList)
    {
      if (this.linkTargetList.hasOwnProperty(iter7))
      {
        iter7 = this.linkTargetList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Linking = function(args) {
  this.metadata = null;
  this.linkList = null;
  if (args) {
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.linkList !== undefined && args.linkList !== null) {
      this.linkList = Thrift.copyList(args.linkList, [Link]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field linkList is unset!');
    }
  }
};
Linking.prototype = {};
Linking.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.linkList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Link();
          elem14.read(input);
          this.linkList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Linking.prototype.write = function(output) {
  output.writeStructBegin('Linking');
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 1);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.linkList !== null && this.linkList !== undefined) {
    output.writeFieldBegin('linkList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkList.length);
    for (var iter15 in this.linkList)
    {
      if (this.linkList.hasOwnProperty(iter15))
      {
        iter15 = this.linkList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TheoryDependencies = function(args) {
  this.sectionTheoryList = null;
  this.sentenceTheoryList = null;
  this.tokenizationTheoryList = null;
  this.posTagTheoryList = null;
  this.nerTagTheoryList = null;
  this.lemmaTheoryList = null;
  this.langIdTheoryList = null;
  this.parseTheoryList = null;
  this.dependencyParseTheoryList = null;
  this.tokenAnnotationTheoryList = null;
  this.entityMentionSetTheoryList = null;
  this.entitySetTheoryList = null;
  this.situationMentionSetTheoryList = null;
  this.situationSetTheoryList = null;
  this.communicationsList = null;
  if (args) {
    if (args.sectionTheoryList !== undefined && args.sectionTheoryList !== null) {
      this.sectionTheoryList = Thrift.copyList(args.sectionTheoryList, [UUID]);
    }
    if (args.sentenceTheoryList !== undefined && args.sentenceTheoryList !== null) {
      this.sentenceTheoryList = Thrift.copyList(args.sentenceTheoryList, [UUID]);
    }
    if (args.tokenizationTheoryList !== undefined && args.tokenizationTheoryList !== null) {
      this.tokenizationTheoryList = Thrift.copyList(args.tokenizationTheoryList, [UUID]);
    }
    if (args.posTagTheoryList !== undefined && args.posTagTheoryList !== null) {
      this.posTagTheoryList = Thrift.copyList(args.posTagTheoryList, [UUID]);
    }
    if (args.nerTagTheoryList !== undefined && args.nerTagTheoryList !== null) {
      this.nerTagTheoryList = Thrift.copyList(args.nerTagTheoryList, [UUID]);
    }
    if (args.lemmaTheoryList !== undefined && args.lemmaTheoryList !== null) {
      this.lemmaTheoryList = Thrift.copyList(args.lemmaTheoryList, [UUID]);
    }
    if (args.langIdTheoryList !== undefined && args.langIdTheoryList !== null) {
      this.langIdTheoryList = Thrift.copyList(args.langIdTheoryList, [UUID]);
    }
    if (args.parseTheoryList !== undefined && args.parseTheoryList !== null) {
      this.parseTheoryList = Thrift.copyList(args.parseTheoryList, [UUID]);
    }
    if (args.dependencyParseTheoryList !== undefined && args.dependencyParseTheoryList !== null) {
      this.dependencyParseTheoryList = Thrift.copyList(args.dependencyParseTheoryList, [UUID]);
    }
    if (args.tokenAnnotationTheoryList !== undefined && args.tokenAnnotationTheoryList !== null) {
      this.tokenAnnotationTheoryList = Thrift.copyList(args.tokenAnnotationTheoryList, [UUID]);
    }
    if (args.entityMentionSetTheoryList !== undefined && args.entityMentionSetTheoryList !== null) {
      this.entityMentionSetTheoryList = Thrift.copyList(args.entityMentionSetTheoryList, [UUID]);
    }
    if (args.entitySetTheoryList !== undefined && args.entitySetTheoryList !== null) {
      this.entitySetTheoryList = Thrift.copyList(args.entitySetTheoryList, [UUID]);
    }
    if (args.situationMentionSetTheoryList !== undefined && args.situationMentionSetTheoryList !== null) {
      this.situationMentionSetTheoryList = Thrift.copyList(args.situationMentionSetTheoryList, [UUID]);
    }
    if (args.situationSetTheoryList !== undefined && args.situationSetTheoryList !== null) {
      this.situationSetTheoryList = Thrift.copyList(args.situationSetTheoryList, [UUID]);
    }
    if (args.communicationsList !== undefined && args.communicationsList !== null) {
      this.communicationsList = Thrift.copyList(args.communicationsList, [UUID]);
    }
  }
};
TheoryDependencies.prototype = {};
TheoryDependencies.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.sectionTheoryList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new UUID();
          elem6.read(input);
          this.sectionTheoryList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.sentenceTheoryList = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new UUID();
          elem13.read(input);
          this.sentenceTheoryList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.tokenizationTheoryList = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new UUID();
          elem20.read(input);
          this.tokenizationTheoryList.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.posTagTheoryList = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new UUID();
          elem27.read(input);
          this.posTagTheoryList.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.nerTagTheoryList = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new UUID();
          elem34.read(input);
          this.nerTagTheoryList.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.lemmaTheoryList = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = new UUID();
          elem41.read(input);
          this.lemmaTheoryList.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.langIdTheoryList = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new UUID();
          elem48.read(input);
          this.langIdTheoryList.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.parseTheoryList = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = new UUID();
          elem55.read(input);
          this.parseTheoryList.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.dependencyParseTheoryList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new UUID();
          elem62.read(input);
          this.dependencyParseTheoryList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.tokenAnnotationTheoryList = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new UUID();
          elem69.read(input);
          this.tokenAnnotationTheoryList.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.entityMentionSetTheoryList = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new UUID();
          elem76.read(input);
          this.entityMentionSetTheoryList.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size77 = 0;
        var _rtmp381;
        this.entitySetTheoryList = [];
        var _etype80 = 0;
        _rtmp381 = input.readListBegin();
        _etype80 = _rtmp381.etype;
        _size77 = _rtmp381.size;
        for (var _i82 = 0; _i82 < _size77; ++_i82)
        {
          var elem83 = null;
          elem83 = new UUID();
          elem83.read(input);
          this.entitySetTheoryList.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.situationMentionSetTheoryList = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new UUID();
          elem90.read(input);
          this.situationMentionSetTheoryList.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size91 = 0;
        var _rtmp395;
        this.situationSetTheoryList = [];
        var _etype94 = 0;
        _rtmp395 = input.readListBegin();
        _etype94 = _rtmp395.etype;
        _size91 = _rtmp395.size;
        for (var _i96 = 0; _i96 < _size91; ++_i96)
        {
          var elem97 = null;
          elem97 = new UUID();
          elem97.read(input);
          this.situationSetTheoryList.push(elem97);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.communicationsList = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = new UUID();
          elem104.read(input);
          this.communicationsList.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TheoryDependencies.prototype.write = function(output) {
  output.writeStructBegin('TheoryDependencies');
  if (this.sectionTheoryList !== null && this.sectionTheoryList !== undefined) {
    output.writeFieldBegin('sectionTheoryList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.sectionTheoryList.length);
    for (var iter105 in this.sectionTheoryList)
    {
      if (this.sectionTheoryList.hasOwnProperty(iter105))
      {
        iter105 = this.sectionTheoryList[iter105];
        iter105.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sentenceTheoryList !== null && this.sentenceTheoryList !== undefined) {
    output.writeFieldBegin('sentenceTheoryList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sentenceTheoryList.length);
    for (var iter106 in this.sentenceTheoryList)
    {
      if (this.sentenceTheoryList.hasOwnProperty(iter106))
      {
        iter106 = this.sentenceTheoryList[iter106];
        iter106.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tokenizationTheoryList !== null && this.tokenizationTheoryList !== undefined) {
    output.writeFieldBegin('tokenizationTheoryList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenizationTheoryList.length);
    for (var iter107 in this.tokenizationTheoryList)
    {
      if (this.tokenizationTheoryList.hasOwnProperty(iter107))
      {
        iter107 = this.tokenizationTheoryList[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.posTagTheoryList !== null && this.posTagTheoryList !== undefined) {
    output.writeFieldBegin('posTagTheoryList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.posTagTheoryList.length);
    for (var iter108 in this.posTagTheoryList)
    {
      if (this.posTagTheoryList.hasOwnProperty(iter108))
      {
        iter108 = this.posTagTheoryList[iter108];
        iter108.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nerTagTheoryList !== null && this.nerTagTheoryList !== undefined) {
    output.writeFieldBegin('nerTagTheoryList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.nerTagTheoryList.length);
    for (var iter109 in this.nerTagTheoryList)
    {
      if (this.nerTagTheoryList.hasOwnProperty(iter109))
      {
        iter109 = this.nerTagTheoryList[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lemmaTheoryList !== null && this.lemmaTheoryList !== undefined) {
    output.writeFieldBegin('lemmaTheoryList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.lemmaTheoryList.length);
    for (var iter110 in this.lemmaTheoryList)
    {
      if (this.lemmaTheoryList.hasOwnProperty(iter110))
      {
        iter110 = this.lemmaTheoryList[iter110];
        iter110.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.langIdTheoryList !== null && this.langIdTheoryList !== undefined) {
    output.writeFieldBegin('langIdTheoryList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.langIdTheoryList.length);
    for (var iter111 in this.langIdTheoryList)
    {
      if (this.langIdTheoryList.hasOwnProperty(iter111))
      {
        iter111 = this.langIdTheoryList[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parseTheoryList !== null && this.parseTheoryList !== undefined) {
    output.writeFieldBegin('parseTheoryList', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.parseTheoryList.length);
    for (var iter112 in this.parseTheoryList)
    {
      if (this.parseTheoryList.hasOwnProperty(iter112))
      {
        iter112 = this.parseTheoryList[iter112];
        iter112.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dependencyParseTheoryList !== null && this.dependencyParseTheoryList !== undefined) {
    output.writeFieldBegin('dependencyParseTheoryList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.dependencyParseTheoryList.length);
    for (var iter113 in this.dependencyParseTheoryList)
    {
      if (this.dependencyParseTheoryList.hasOwnProperty(iter113))
      {
        iter113 = this.dependencyParseTheoryList[iter113];
        iter113.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tokenAnnotationTheoryList !== null && this.tokenAnnotationTheoryList !== undefined) {
    output.writeFieldBegin('tokenAnnotationTheoryList', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenAnnotationTheoryList.length);
    for (var iter114 in this.tokenAnnotationTheoryList)
    {
      if (this.tokenAnnotationTheoryList.hasOwnProperty(iter114))
      {
        iter114 = this.tokenAnnotationTheoryList[iter114];
        iter114.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entityMentionSetTheoryList !== null && this.entityMentionSetTheoryList !== undefined) {
    output.writeFieldBegin('entityMentionSetTheoryList', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityMentionSetTheoryList.length);
    for (var iter115 in this.entityMentionSetTheoryList)
    {
      if (this.entityMentionSetTheoryList.hasOwnProperty(iter115))
      {
        iter115 = this.entityMentionSetTheoryList[iter115];
        iter115.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entitySetTheoryList !== null && this.entitySetTheoryList !== undefined) {
    output.writeFieldBegin('entitySetTheoryList', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.entitySetTheoryList.length);
    for (var iter116 in this.entitySetTheoryList)
    {
      if (this.entitySetTheoryList.hasOwnProperty(iter116))
      {
        iter116 = this.entitySetTheoryList[iter116];
        iter116.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationMentionSetTheoryList !== null && this.situationMentionSetTheoryList !== undefined) {
    output.writeFieldBegin('situationMentionSetTheoryList', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationMentionSetTheoryList.length);
    for (var iter117 in this.situationMentionSetTheoryList)
    {
      if (this.situationMentionSetTheoryList.hasOwnProperty(iter117))
      {
        iter117 = this.situationMentionSetTheoryList[iter117];
        iter117.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationSetTheoryList !== null && this.situationSetTheoryList !== undefined) {
    output.writeFieldBegin('situationSetTheoryList', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationSetTheoryList.length);
    for (var iter118 in this.situationSetTheoryList)
    {
      if (this.situationSetTheoryList.hasOwnProperty(iter118))
      {
        iter118 = this.situationSetTheoryList[iter118];
        iter118.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.communicationsList !== null && this.communicationsList !== undefined) {
    output.writeFieldBegin('communicationsList', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.communicationsList.length);
    for (var iter119 in this.communicationsList)
    {
      if (this.communicationsList.hasOwnProperty(iter119))
      {
        iter119 = this.communicationsList[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Digest = function(args) {
  this.bytesValue = null;
  this.int64Value = null;
  this.doubleValue = null;
  this.stringValue = null;
  this.int64List = null;
  this.doubleList = null;
  this.stringList = null;
  if (args) {
    if (args.bytesValue !== undefined && args.bytesValue !== null) {
      this.bytesValue = args.bytesValue;
    }
    if (args.int64Value !== undefined && args.int64Value !== null) {
      this.int64Value = args.int64Value;
    }
    if (args.doubleValue !== undefined && args.doubleValue !== null) {
      this.doubleValue = args.doubleValue;
    }
    if (args.stringValue !== undefined && args.stringValue !== null) {
      this.stringValue = args.stringValue;
    }
    if (args.int64List !== undefined && args.int64List !== null) {
      this.int64List = Thrift.copyList(args.int64List, [null]);
    }
    if (args.doubleList !== undefined && args.doubleList !== null) {
      this.doubleList = Thrift.copyList(args.doubleList, [null]);
    }
    if (args.stringList !== undefined && args.stringList !== null) {
      this.stringList = Thrift.copyList(args.stringList, [null]);
    }
  }
};
Digest.prototype = {};
Digest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bytesValue = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.int64Value = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.int64List = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = input.readI64().value;
          this.int64List.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size127 = 0;
        var _rtmp3131;
        this.doubleList = [];
        var _etype130 = 0;
        _rtmp3131 = input.readListBegin();
        _etype130 = _rtmp3131.etype;
        _size127 = _rtmp3131.size;
        for (var _i132 = 0; _i132 < _size127; ++_i132)
        {
          var elem133 = null;
          elem133 = input.readDouble().value;
          this.doubleList.push(elem133);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size134 = 0;
        var _rtmp3138;
        this.stringList = [];
        var _etype137 = 0;
        _rtmp3138 = input.readListBegin();
        _etype137 = _rtmp3138.etype;
        _size134 = _rtmp3138.size;
        for (var _i139 = 0; _i139 < _size134; ++_i139)
        {
          var elem140 = null;
          elem140 = input.readString().value;
          this.stringList.push(elem140);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Digest.prototype.write = function(output) {
  output.writeStructBegin('Digest');
  if (this.bytesValue !== null && this.bytesValue !== undefined) {
    output.writeFieldBegin('bytesValue', Thrift.Type.STRING, 1);
    output.writeBinary(this.bytesValue);
    output.writeFieldEnd();
  }
  if (this.int64Value !== null && this.int64Value !== undefined) {
    output.writeFieldBegin('int64Value', Thrift.Type.I64, 2);
    output.writeI64(this.int64Value);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 4);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.int64List !== null && this.int64List !== undefined) {
    output.writeFieldBegin('int64List', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.int64List.length);
    for (var iter141 in this.int64List)
    {
      if (this.int64List.hasOwnProperty(iter141))
      {
        iter141 = this.int64List[iter141];
        output.writeI64(iter141);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doubleList !== null && this.doubleList !== undefined) {
    output.writeFieldBegin('doubleList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.DOUBLE, this.doubleList.length);
    for (var iter142 in this.doubleList)
    {
      if (this.doubleList.hasOwnProperty(iter142))
      {
        iter142 = this.doubleList[iter142];
        output.writeDouble(iter142);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringList !== null && this.stringList !== undefined) {
    output.writeFieldBegin('stringList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.stringList.length);
    for (var iter143 in this.stringList)
    {
      if (this.stringList.hasOwnProperty(iter143))
      {
        iter143 = this.stringList[iter143];
        output.writeString(iter143);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationMetadata = function(args) {
  this.tool = null;
  this.timestamp = null;
  this.digest = null;
  this.dependencies = null;
  this.kBest = 1;
  if (args) {
    if (args.tool !== undefined && args.tool !== null) {
      this.tool = args.tool;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tool is unset!');
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field timestamp is unset!');
    }
    if (args.digest !== undefined && args.digest !== null) {
      this.digest = new Digest(args.digest);
    }
    if (args.dependencies !== undefined && args.dependencies !== null) {
      this.dependencies = new TheoryDependencies(args.dependencies);
    }
    if (args.kBest !== undefined && args.kBest !== null) {
      this.kBest = args.kBest;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field kBest is unset!');
    }
  }
};
AnnotationMetadata.prototype = {};
AnnotationMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tool = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.digest = new Digest();
        this.digest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.dependencies = new TheoryDependencies();
        this.dependencies.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.kBest = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationMetadata.prototype.write = function(output) {
  output.writeStructBegin('AnnotationMetadata');
  if (this.tool !== null && this.tool !== undefined) {
    output.writeFieldBegin('tool', Thrift.Type.STRING, 1);
    output.writeString(this.tool);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.digest !== null && this.digest !== undefined) {
    output.writeFieldBegin('digest', Thrift.Type.STRUCT, 4);
    this.digest.write(output);
    output.writeFieldEnd();
  }
  if (this.dependencies !== null && this.dependencies !== undefined) {
    output.writeFieldBegin('dependencies', Thrift.Type.STRUCT, 5);
    this.dependencies.write(output);
    output.writeFieldEnd();
  }
  if (this.kBest !== null && this.kBest !== undefined) {
    output.writeFieldBegin('kBest', Thrift.Type.I32, 6);
    output.writeI32(this.kBest);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommunicationMetadata = function(args) {
  this.tweetInfo = null;
  this.emailInfo = null;
  this.nitfInfo = null;
  if (args) {
    if (args.tweetInfo !== undefined && args.tweetInfo !== null) {
      this.tweetInfo = new TweetInfo(args.tweetInfo);
    }
    if (args.emailInfo !== undefined && args.emailInfo !== null) {
      this.emailInfo = new EmailCommunicationInfo(args.emailInfo);
    }
    if (args.nitfInfo !== undefined && args.nitfInfo !== null) {
      this.nitfInfo = new NITFInfo(args.nitfInfo);
    }
  }
};
CommunicationMetadata.prototype = {};
CommunicationMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tweetInfo = new TweetInfo();
        this.tweetInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.emailInfo = new EmailCommunicationInfo();
        this.emailInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.nitfInfo = new NITFInfo();
        this.nitfInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationMetadata.prototype.write = function(output) {
  output.writeStructBegin('CommunicationMetadata');
  if (this.tweetInfo !== null && this.tweetInfo !== undefined) {
    output.writeFieldBegin('tweetInfo', Thrift.Type.STRUCT, 1);
    this.tweetInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.emailInfo !== null && this.emailInfo !== undefined) {
    output.writeFieldBegin('emailInfo', Thrift.Type.STRUCT, 2);
    this.emailInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.nitfInfo !== null && this.nitfInfo !== undefined) {
    output.writeFieldBegin('nitfInfo', Thrift.Type.STRUCT, 3);
    this.nitfInfo.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


NITFInfo = function(args) {
  this.alternateURL = null;
  this.articleAbstract = null;
  this.authorBiography = null;
  this.banner = null;
  this.biographicalCategoryList = null;
  this.columnName = null;
  this.columnNumber = null;
  this.correctionDate = null;
  this.correctionText = null;
  this.credit = null;
  this.dayOfWeek = null;
  this.descriptorList = null;
  this.featurePage = null;
  this.generalOnlineDescriptorList = null;
  this.guid = null;
  this.kicker = null;
  this.leadParagraphList = null;
  this.locationList = null;
  this.nameList = null;
  this.newsDesk = null;
  this.normalizedByline = null;
  this.onlineDescriptorList = null;
  this.onlineHeadline = null;
  this.onlineLeadParagraph = null;
  this.onlineLocationList = null;
  this.onlineOrganizationList = null;
  this.onlinePeople = null;
  this.onlineSectionList = null;
  this.onlineTitleList = null;
  this.organizationList = null;
  this.page = null;
  this.peopleList = null;
  this.publicationDate = null;
  this.publicationDayOfMonth = null;
  this.publicationMonth = null;
  this.publicationYear = null;
  this.section = null;
  this.seriesName = null;
  this.slug = null;
  this.taxonomicClassifierList = null;
  this.titleList = null;
  this.typesOfMaterialList = null;
  this.url = null;
  this.wordCount = null;
  if (args) {
    if (args.alternateURL !== undefined && args.alternateURL !== null) {
      this.alternateURL = args.alternateURL;
    }
    if (args.articleAbstract !== undefined && args.articleAbstract !== null) {
      this.articleAbstract = args.articleAbstract;
    }
    if (args.authorBiography !== undefined && args.authorBiography !== null) {
      this.authorBiography = args.authorBiography;
    }
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = args.banner;
    }
    if (args.biographicalCategoryList !== undefined && args.biographicalCategoryList !== null) {
      this.biographicalCategoryList = Thrift.copyList(args.biographicalCategoryList, [null]);
    }
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
    if (args.columnNumber !== undefined && args.columnNumber !== null) {
      this.columnNumber = args.columnNumber;
    }
    if (args.correctionDate !== undefined && args.correctionDate !== null) {
      this.correctionDate = args.correctionDate;
    }
    if (args.correctionText !== undefined && args.correctionText !== null) {
      this.correctionText = args.correctionText;
    }
    if (args.credit !== undefined && args.credit !== null) {
      this.credit = args.credit;
    }
    if (args.dayOfWeek !== undefined && args.dayOfWeek !== null) {
      this.dayOfWeek = args.dayOfWeek;
    }
    if (args.descriptorList !== undefined && args.descriptorList !== null) {
      this.descriptorList = Thrift.copyList(args.descriptorList, [null]);
    }
    if (args.featurePage !== undefined && args.featurePage !== null) {
      this.featurePage = args.featurePage;
    }
    if (args.generalOnlineDescriptorList !== undefined && args.generalOnlineDescriptorList !== null) {
      this.generalOnlineDescriptorList = Thrift.copyList(args.generalOnlineDescriptorList, [null]);
    }
    if (args.guid !== undefined && args.guid !== null) {
      this.guid = args.guid;
    }
    if (args.kicker !== undefined && args.kicker !== null) {
      this.kicker = args.kicker;
    }
    if (args.leadParagraphList !== undefined && args.leadParagraphList !== null) {
      this.leadParagraphList = Thrift.copyList(args.leadParagraphList, [null]);
    }
    if (args.locationList !== undefined && args.locationList !== null) {
      this.locationList = Thrift.copyList(args.locationList, [null]);
    }
    if (args.nameList !== undefined && args.nameList !== null) {
      this.nameList = Thrift.copyList(args.nameList, [null]);
    }
    if (args.newsDesk !== undefined && args.newsDesk !== null) {
      this.newsDesk = args.newsDesk;
    }
    if (args.normalizedByline !== undefined && args.normalizedByline !== null) {
      this.normalizedByline = args.normalizedByline;
    }
    if (args.onlineDescriptorList !== undefined && args.onlineDescriptorList !== null) {
      this.onlineDescriptorList = Thrift.copyList(args.onlineDescriptorList, [null]);
    }
    if (args.onlineHeadline !== undefined && args.onlineHeadline !== null) {
      this.onlineHeadline = args.onlineHeadline;
    }
    if (args.onlineLeadParagraph !== undefined && args.onlineLeadParagraph !== null) {
      this.onlineLeadParagraph = args.onlineLeadParagraph;
    }
    if (args.onlineLocationList !== undefined && args.onlineLocationList !== null) {
      this.onlineLocationList = Thrift.copyList(args.onlineLocationList, [null]);
    }
    if (args.onlineOrganizationList !== undefined && args.onlineOrganizationList !== null) {
      this.onlineOrganizationList = Thrift.copyList(args.onlineOrganizationList, [null]);
    }
    if (args.onlinePeople !== undefined && args.onlinePeople !== null) {
      this.onlinePeople = Thrift.copyList(args.onlinePeople, [null]);
    }
    if (args.onlineSectionList !== undefined && args.onlineSectionList !== null) {
      this.onlineSectionList = Thrift.copyList(args.onlineSectionList, [null]);
    }
    if (args.onlineTitleList !== undefined && args.onlineTitleList !== null) {
      this.onlineTitleList = Thrift.copyList(args.onlineTitleList, [null]);
    }
    if (args.organizationList !== undefined && args.organizationList !== null) {
      this.organizationList = Thrift.copyList(args.organizationList, [null]);
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
    if (args.peopleList !== undefined && args.peopleList !== null) {
      this.peopleList = Thrift.copyList(args.peopleList, [null]);
    }
    if (args.publicationDate !== undefined && args.publicationDate !== null) {
      this.publicationDate = args.publicationDate;
    }
    if (args.publicationDayOfMonth !== undefined && args.publicationDayOfMonth !== null) {
      this.publicationDayOfMonth = args.publicationDayOfMonth;
    }
    if (args.publicationMonth !== undefined && args.publicationMonth !== null) {
      this.publicationMonth = args.publicationMonth;
    }
    if (args.publicationYear !== undefined && args.publicationYear !== null) {
      this.publicationYear = args.publicationYear;
    }
    if (args.section !== undefined && args.section !== null) {
      this.section = args.section;
    }
    if (args.seriesName !== undefined && args.seriesName !== null) {
      this.seriesName = args.seriesName;
    }
    if (args.slug !== undefined && args.slug !== null) {
      this.slug = args.slug;
    }
    if (args.taxonomicClassifierList !== undefined && args.taxonomicClassifierList !== null) {
      this.taxonomicClassifierList = Thrift.copyList(args.taxonomicClassifierList, [null]);
    }
    if (args.titleList !== undefined && args.titleList !== null) {
      this.titleList = Thrift.copyList(args.titleList, [null]);
    }
    if (args.typesOfMaterialList !== undefined && args.typesOfMaterialList !== null) {
      this.typesOfMaterialList = Thrift.copyList(args.typesOfMaterialList, [null]);
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.wordCount !== undefined && args.wordCount !== null) {
      this.wordCount = args.wordCount;
    }
  }
};
NITFInfo.prototype = {};
NITFInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.alternateURL = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.articleAbstract = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.authorBiography = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.banner = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.biographicalCategoryList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.biographicalCategoryList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.columnNumber = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.correctionDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.correctionText = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.credit = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.dayOfWeek = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.descriptorList = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.descriptorList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.featurePage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.generalOnlineDescriptorList = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readString().value;
          this.generalOnlineDescriptorList.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.guid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.kicker = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.leadParagraphList = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readString().value;
          this.leadParagraphList.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.locationList = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readString().value;
          this.locationList.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.nameList = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readString().value;
          this.nameList.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.newsDesk = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.normalizedByline = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.onlineDescriptorList = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString().value;
          this.onlineDescriptorList.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.onlineHeadline = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRING) {
        this.onlineLeadParagraph = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.LIST) {
        var _size49 = 0;
        var _rtmp353;
        this.onlineLocationList = [];
        var _etype52 = 0;
        _rtmp353 = input.readListBegin();
        _etype52 = _rtmp353.etype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var elem55 = null;
          elem55 = input.readString().value;
          this.onlineLocationList.push(elem55);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.onlineOrganizationList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString().value;
          this.onlineOrganizationList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.onlinePeople = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = input.readString().value;
          this.onlinePeople.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.onlineSectionList = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = input.readString().value;
          this.onlineSectionList.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.LIST) {
        var _size77 = 0;
        var _rtmp381;
        this.onlineTitleList = [];
        var _etype80 = 0;
        _rtmp381 = input.readListBegin();
        _etype80 = _rtmp381.etype;
        _size77 = _rtmp381.size;
        for (var _i82 = 0; _i82 < _size77; ++_i82)
        {
          var elem83 = null;
          elem83 = input.readString().value;
          this.onlineTitleList.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.organizationList = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readString().value;
          this.organizationList.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.I32) {
        this.page = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.LIST) {
        var _size91 = 0;
        var _rtmp395;
        this.peopleList = [];
        var _etype94 = 0;
        _rtmp395 = input.readListBegin();
        _etype94 = _rtmp395.etype;
        _size91 = _rtmp395.size;
        for (var _i96 = 0; _i96 < _size91; ++_i96)
        {
          var elem97 = null;
          elem97 = input.readString().value;
          this.peopleList.push(elem97);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.I64) {
        this.publicationDate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.I32) {
        this.publicationDayOfMonth = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.I32) {
        this.publicationMonth = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.I32) {
        this.publicationYear = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRING) {
        this.section = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRING) {
        this.seriesName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRING) {
        this.slug = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.taxonomicClassifierList = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readString().value;
          this.taxonomicClassifierList.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.LIST) {
        var _size105 = 0;
        var _rtmp3109;
        this.titleList = [];
        var _etype108 = 0;
        _rtmp3109 = input.readListBegin();
        _etype108 = _rtmp3109.etype;
        _size105 = _rtmp3109.size;
        for (var _i110 = 0; _i110 < _size105; ++_i110)
        {
          var elem111 = null;
          elem111 = input.readString().value;
          this.titleList.push(elem111);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.typesOfMaterialList = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readString().value;
          this.typesOfMaterialList.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.I32) {
        this.wordCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NITFInfo.prototype.write = function(output) {
  output.writeStructBegin('NITFInfo');
  if (this.alternateURL !== null && this.alternateURL !== undefined) {
    output.writeFieldBegin('alternateURL', Thrift.Type.STRING, 1);
    output.writeString(this.alternateURL);
    output.writeFieldEnd();
  }
  if (this.articleAbstract !== null && this.articleAbstract !== undefined) {
    output.writeFieldBegin('articleAbstract', Thrift.Type.STRING, 2);
    output.writeString(this.articleAbstract);
    output.writeFieldEnd();
  }
  if (this.authorBiography !== null && this.authorBiography !== undefined) {
    output.writeFieldBegin('authorBiography', Thrift.Type.STRING, 3);
    output.writeString(this.authorBiography);
    output.writeFieldEnd();
  }
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRING, 4);
    output.writeString(this.banner);
    output.writeFieldEnd();
  }
  if (this.biographicalCategoryList !== null && this.biographicalCategoryList !== undefined) {
    output.writeFieldBegin('biographicalCategoryList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.biographicalCategoryList.length);
    for (var iter119 in this.biographicalCategoryList)
    {
      if (this.biographicalCategoryList.hasOwnProperty(iter119))
      {
        iter119 = this.biographicalCategoryList[iter119];
        output.writeString(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 6);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.columnNumber !== null && this.columnNumber !== undefined) {
    output.writeFieldBegin('columnNumber', Thrift.Type.I32, 7);
    output.writeI32(this.columnNumber);
    output.writeFieldEnd();
  }
  if (this.correctionDate !== null && this.correctionDate !== undefined) {
    output.writeFieldBegin('correctionDate', Thrift.Type.I64, 8);
    output.writeI64(this.correctionDate);
    output.writeFieldEnd();
  }
  if (this.correctionText !== null && this.correctionText !== undefined) {
    output.writeFieldBegin('correctionText', Thrift.Type.STRING, 9);
    output.writeString(this.correctionText);
    output.writeFieldEnd();
  }
  if (this.credit !== null && this.credit !== undefined) {
    output.writeFieldBegin('credit', Thrift.Type.STRING, 10);
    output.writeString(this.credit);
    output.writeFieldEnd();
  }
  if (this.dayOfWeek !== null && this.dayOfWeek !== undefined) {
    output.writeFieldBegin('dayOfWeek', Thrift.Type.STRING, 11);
    output.writeString(this.dayOfWeek);
    output.writeFieldEnd();
  }
  if (this.descriptorList !== null && this.descriptorList !== undefined) {
    output.writeFieldBegin('descriptorList', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.descriptorList.length);
    for (var iter120 in this.descriptorList)
    {
      if (this.descriptorList.hasOwnProperty(iter120))
      {
        iter120 = this.descriptorList[iter120];
        output.writeString(iter120);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.featurePage !== null && this.featurePage !== undefined) {
    output.writeFieldBegin('featurePage', Thrift.Type.STRING, 13);
    output.writeString(this.featurePage);
    output.writeFieldEnd();
  }
  if (this.generalOnlineDescriptorList !== null && this.generalOnlineDescriptorList !== undefined) {
    output.writeFieldBegin('generalOnlineDescriptorList', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.generalOnlineDescriptorList.length);
    for (var iter121 in this.generalOnlineDescriptorList)
    {
      if (this.generalOnlineDescriptorList.hasOwnProperty(iter121))
      {
        iter121 = this.generalOnlineDescriptorList[iter121];
        output.writeString(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.guid !== null && this.guid !== undefined) {
    output.writeFieldBegin('guid', Thrift.Type.I32, 15);
    output.writeI32(this.guid);
    output.writeFieldEnd();
  }
  if (this.kicker !== null && this.kicker !== undefined) {
    output.writeFieldBegin('kicker', Thrift.Type.STRING, 16);
    output.writeString(this.kicker);
    output.writeFieldEnd();
  }
  if (this.leadParagraphList !== null && this.leadParagraphList !== undefined) {
    output.writeFieldBegin('leadParagraphList', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRING, this.leadParagraphList.length);
    for (var iter122 in this.leadParagraphList)
    {
      if (this.leadParagraphList.hasOwnProperty(iter122))
      {
        iter122 = this.leadParagraphList[iter122];
        output.writeString(iter122);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.locationList !== null && this.locationList !== undefined) {
    output.writeFieldBegin('locationList', Thrift.Type.LIST, 18);
    output.writeListBegin(Thrift.Type.STRING, this.locationList.length);
    for (var iter123 in this.locationList)
    {
      if (this.locationList.hasOwnProperty(iter123))
      {
        iter123 = this.locationList[iter123];
        output.writeString(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.nameList !== null && this.nameList !== undefined) {
    output.writeFieldBegin('nameList', Thrift.Type.LIST, 19);
    output.writeListBegin(Thrift.Type.STRING, this.nameList.length);
    for (var iter124 in this.nameList)
    {
      if (this.nameList.hasOwnProperty(iter124))
      {
        iter124 = this.nameList[iter124];
        output.writeString(iter124);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.newsDesk !== null && this.newsDesk !== undefined) {
    output.writeFieldBegin('newsDesk', Thrift.Type.STRING, 20);
    output.writeString(this.newsDesk);
    output.writeFieldEnd();
  }
  if (this.normalizedByline !== null && this.normalizedByline !== undefined) {
    output.writeFieldBegin('normalizedByline', Thrift.Type.STRING, 21);
    output.writeString(this.normalizedByline);
    output.writeFieldEnd();
  }
  if (this.onlineDescriptorList !== null && this.onlineDescriptorList !== undefined) {
    output.writeFieldBegin('onlineDescriptorList', Thrift.Type.LIST, 22);
    output.writeListBegin(Thrift.Type.STRING, this.onlineDescriptorList.length);
    for (var iter125 in this.onlineDescriptorList)
    {
      if (this.onlineDescriptorList.hasOwnProperty(iter125))
      {
        iter125 = this.onlineDescriptorList[iter125];
        output.writeString(iter125);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.onlineHeadline !== null && this.onlineHeadline !== undefined) {
    output.writeFieldBegin('onlineHeadline', Thrift.Type.STRING, 23);
    output.writeString(this.onlineHeadline);
    output.writeFieldEnd();
  }
  if (this.onlineLeadParagraph !== null && this.onlineLeadParagraph !== undefined) {
    output.writeFieldBegin('onlineLeadParagraph', Thrift.Type.STRING, 24);
    output.writeString(this.onlineLeadParagraph);
    output.writeFieldEnd();
  }
  if (this.onlineLocationList !== null && this.onlineLocationList !== undefined) {
    output.writeFieldBegin('onlineLocationList', Thrift.Type.LIST, 25);
    output.writeListBegin(Thrift.Type.STRING, this.onlineLocationList.length);
    for (var iter126 in this.onlineLocationList)
    {
      if (this.onlineLocationList.hasOwnProperty(iter126))
      {
        iter126 = this.onlineLocationList[iter126];
        output.writeString(iter126);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.onlineOrganizationList !== null && this.onlineOrganizationList !== undefined) {
    output.writeFieldBegin('onlineOrganizationList', Thrift.Type.LIST, 26);
    output.writeListBegin(Thrift.Type.STRING, this.onlineOrganizationList.length);
    for (var iter127 in this.onlineOrganizationList)
    {
      if (this.onlineOrganizationList.hasOwnProperty(iter127))
      {
        iter127 = this.onlineOrganizationList[iter127];
        output.writeString(iter127);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.onlinePeople !== null && this.onlinePeople !== undefined) {
    output.writeFieldBegin('onlinePeople', Thrift.Type.LIST, 27);
    output.writeListBegin(Thrift.Type.STRING, this.onlinePeople.length);
    for (var iter128 in this.onlinePeople)
    {
      if (this.onlinePeople.hasOwnProperty(iter128))
      {
        iter128 = this.onlinePeople[iter128];
        output.writeString(iter128);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.onlineSectionList !== null && this.onlineSectionList !== undefined) {
    output.writeFieldBegin('onlineSectionList', Thrift.Type.LIST, 28);
    output.writeListBegin(Thrift.Type.STRING, this.onlineSectionList.length);
    for (var iter129 in this.onlineSectionList)
    {
      if (this.onlineSectionList.hasOwnProperty(iter129))
      {
        iter129 = this.onlineSectionList[iter129];
        output.writeString(iter129);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.onlineTitleList !== null && this.onlineTitleList !== undefined) {
    output.writeFieldBegin('onlineTitleList', Thrift.Type.LIST, 29);
    output.writeListBegin(Thrift.Type.STRING, this.onlineTitleList.length);
    for (var iter130 in this.onlineTitleList)
    {
      if (this.onlineTitleList.hasOwnProperty(iter130))
      {
        iter130 = this.onlineTitleList[iter130];
        output.writeString(iter130);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.organizationList !== null && this.organizationList !== undefined) {
    output.writeFieldBegin('organizationList', Thrift.Type.LIST, 30);
    output.writeListBegin(Thrift.Type.STRING, this.organizationList.length);
    for (var iter131 in this.organizationList)
    {
      if (this.organizationList.hasOwnProperty(iter131))
      {
        iter131 = this.organizationList[iter131];
        output.writeString(iter131);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I32, 31);
    output.writeI32(this.page);
    output.writeFieldEnd();
  }
  if (this.peopleList !== null && this.peopleList !== undefined) {
    output.writeFieldBegin('peopleList', Thrift.Type.LIST, 32);
    output.writeListBegin(Thrift.Type.STRING, this.peopleList.length);
    for (var iter132 in this.peopleList)
    {
      if (this.peopleList.hasOwnProperty(iter132))
      {
        iter132 = this.peopleList[iter132];
        output.writeString(iter132);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.publicationDate !== null && this.publicationDate !== undefined) {
    output.writeFieldBegin('publicationDate', Thrift.Type.I64, 33);
    output.writeI64(this.publicationDate);
    output.writeFieldEnd();
  }
  if (this.publicationDayOfMonth !== null && this.publicationDayOfMonth !== undefined) {
    output.writeFieldBegin('publicationDayOfMonth', Thrift.Type.I32, 34);
    output.writeI32(this.publicationDayOfMonth);
    output.writeFieldEnd();
  }
  if (this.publicationMonth !== null && this.publicationMonth !== undefined) {
    output.writeFieldBegin('publicationMonth', Thrift.Type.I32, 35);
    output.writeI32(this.publicationMonth);
    output.writeFieldEnd();
  }
  if (this.publicationYear !== null && this.publicationYear !== undefined) {
    output.writeFieldBegin('publicationYear', Thrift.Type.I32, 36);
    output.writeI32(this.publicationYear);
    output.writeFieldEnd();
  }
  if (this.section !== null && this.section !== undefined) {
    output.writeFieldBegin('section', Thrift.Type.STRING, 37);
    output.writeString(this.section);
    output.writeFieldEnd();
  }
  if (this.seriesName !== null && this.seriesName !== undefined) {
    output.writeFieldBegin('seriesName', Thrift.Type.STRING, 38);
    output.writeString(this.seriesName);
    output.writeFieldEnd();
  }
  if (this.slug !== null && this.slug !== undefined) {
    output.writeFieldBegin('slug', Thrift.Type.STRING, 39);
    output.writeString(this.slug);
    output.writeFieldEnd();
  }
  if (this.taxonomicClassifierList !== null && this.taxonomicClassifierList !== undefined) {
    output.writeFieldBegin('taxonomicClassifierList', Thrift.Type.LIST, 40);
    output.writeListBegin(Thrift.Type.STRING, this.taxonomicClassifierList.length);
    for (var iter133 in this.taxonomicClassifierList)
    {
      if (this.taxonomicClassifierList.hasOwnProperty(iter133))
      {
        iter133 = this.taxonomicClassifierList[iter133];
        output.writeString(iter133);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.titleList !== null && this.titleList !== undefined) {
    output.writeFieldBegin('titleList', Thrift.Type.LIST, 41);
    output.writeListBegin(Thrift.Type.STRING, this.titleList.length);
    for (var iter134 in this.titleList)
    {
      if (this.titleList.hasOwnProperty(iter134))
      {
        iter134 = this.titleList[iter134];
        output.writeString(iter134);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.typesOfMaterialList !== null && this.typesOfMaterialList !== undefined) {
    output.writeFieldBegin('typesOfMaterialList', Thrift.Type.LIST, 42);
    output.writeListBegin(Thrift.Type.STRING, this.typesOfMaterialList.length);
    for (var iter135 in this.typesOfMaterialList)
    {
      if (this.typesOfMaterialList.hasOwnProperty(iter135))
      {
        iter135 = this.typesOfMaterialList[iter135];
        output.writeString(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 43);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.wordCount !== null && this.wordCount !== undefined) {
    output.writeFieldBegin('wordCount', Thrift.Type.I32, 44);
    output.writeI32(this.wordCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ResultsServerService_registerSearchResult_args = function(args) {
  this.result = null;
  this.taskType = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = new SearchResult(args.result);
    }
    if (args.taskType !== undefined && args.taskType !== null) {
      this.taskType = args.taskType;
    }
  }
};
ResultsServerService_registerSearchResult_args.prototype = {};
ResultsServerService_registerSearchResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.result = new SearchResult();
        this.result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_registerSearchResult_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_registerSearchResult_args');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRUCT, 1);
    this.result.write(output);
    output.writeFieldEnd();
  }
  if (this.taskType !== null && this.taskType !== undefined) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 2);
    output.writeI32(this.taskType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_registerSearchResult_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_registerSearchResult_result.prototype = {};
ResultsServerService_registerSearchResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_registerSearchResult_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_registerSearchResult_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getSearchResults_args = function(args) {
  this.taskType = null;
  this.limit = null;
  if (args) {
    if (args.taskType !== undefined && args.taskType !== null) {
      this.taskType = args.taskType;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
ResultsServerService_getSearchResults_args.prototype = {};
ResultsServerService_getSearchResults_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getSearchResults_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getSearchResults_args');
  if (this.taskType !== null && this.taskType !== undefined) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 1);
    output.writeI32(this.taskType);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 2);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getSearchResults_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SearchResult]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_getSearchResults_result.prototype = {};
ResultsServerService_getSearchResults_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new SearchResult();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getSearchResults_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getSearchResults_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getSearchResultsByUser_args = function(args) {
  this.taskType = null;
  this.userId = null;
  this.limit = null;
  if (args) {
    if (args.taskType !== undefined && args.taskType !== null) {
      this.taskType = args.taskType;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
  }
};
ResultsServerService_getSearchResultsByUser_args.prototype = {};
ResultsServerService_getSearchResultsByUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getSearchResultsByUser_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getSearchResultsByUser_args');
  if (this.taskType !== null && this.taskType !== undefined) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 1);
    output.writeI32(this.taskType);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 3);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getSearchResultsByUser_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SearchResult]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_getSearchResultsByUser_result.prototype = {};
ResultsServerService_getSearchResultsByUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new SearchResult();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getSearchResultsByUser_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getSearchResultsByUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getLatestSearchResult_args = function(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
ResultsServerService_getLatestSearchResult_args.prototype = {};
ResultsServerService_getLatestSearchResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getLatestSearchResult_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getLatestSearchResult_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getLatestSearchResult_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_getLatestSearchResult_result.prototype = {};
ResultsServerService_getLatestSearchResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getLatestSearchResult_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getLatestSearchResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getSearchResult_args = function(args) {
  this.searchResultId = null;
  if (args) {
    if (args.searchResultId !== undefined && args.searchResultId !== null) {
      this.searchResultId = new UUID(args.searchResultId);
    }
  }
};
ResultsServerService_getSearchResult_args.prototype = {};
ResultsServerService_getSearchResult_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultId = new UUID();
        this.searchResultId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getSearchResult_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getSearchResult_args');
  if (this.searchResultId !== null && this.searchResultId !== undefined) {
    output.writeFieldBegin('searchResultId', Thrift.Type.STRUCT, 1);
    this.searchResultId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getSearchResult_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_getSearchResult_result.prototype = {};
ResultsServerService_getSearchResult_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getSearchResult_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getSearchResult_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_startSession_args = function(args) {
  this.searchResultId = null;
  this.taskType = null;
  if (args) {
    if (args.searchResultId !== undefined && args.searchResultId !== null) {
      this.searchResultId = new UUID(args.searchResultId);
    }
    if (args.taskType !== undefined && args.taskType !== null) {
      this.taskType = args.taskType;
    }
  }
};
ResultsServerService_startSession_args.prototype = {};
ResultsServerService_startSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchResultId = new UUID();
        this.searchResultId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.taskType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_startSession_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_startSession_args');
  if (this.searchResultId !== null && this.searchResultId !== undefined) {
    output.writeFieldBegin('searchResultId', Thrift.Type.STRUCT, 1);
    this.searchResultId.write(output);
    output.writeFieldEnd();
  }
  if (this.taskType !== null && this.taskType !== undefined) {
    output.writeFieldBegin('taskType', Thrift.Type.I32, 2);
    output.writeI32(this.taskType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_startSession_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new UUID(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_startSession_result.prototype = {};
ResultsServerService_startSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UUID();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_startSession_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_startSession_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_stopSession_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
  }
};
ResultsServerService_stopSession_args.prototype = {};
ResultsServerService_stopSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_stopSession_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_stopSession_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_stopSession_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_stopSession_result.prototype = {};
ResultsServerService_stopSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_stopSession_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_stopSession_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getNextChunk_args = function(args) {
  this.sessionId = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
  }
};
ResultsServerService_getNextChunk_args.prototype = {};
ResultsServerService_getNextChunk_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getNextChunk_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getNextChunk_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_getNextChunk_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [AnnotationUnitIdentifier]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_getNextChunk_result.prototype = {};
ResultsServerService_getNextChunk_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new AnnotationUnitIdentifier();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_getNextChunk_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_getNextChunk_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_submitAnnotation_args = function(args) {
  this.sessionId = null;
  this.unitId = null;
  this.communication = null;
  if (args) {
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = new UUID(args.sessionId);
    }
    if (args.unitId !== undefined && args.unitId !== null) {
      this.unitId = new AnnotationUnitIdentifier(args.unitId);
    }
    if (args.communication !== undefined && args.communication !== null) {
      this.communication = new Communication(args.communication);
    }
  }
};
ResultsServerService_submitAnnotation_args.prototype = {};
ResultsServerService_submitAnnotation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionId = new UUID();
        this.sessionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unitId = new AnnotationUnitIdentifier();
        this.unitId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_submitAnnotation_args.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_submitAnnotation_args');
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRUCT, 1);
    this.sessionId.write(output);
    output.writeFieldEnd();
  }
  if (this.unitId !== null && this.unitId !== undefined) {
    output.writeFieldBegin('unitId', Thrift.Type.STRUCT, 2);
    this.unitId.write(output);
    output.writeFieldEnd();
  }
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 3);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerService_submitAnnotation_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
ResultsServerService_submitAnnotation_result.prototype = {};
ResultsServerService_submitAnnotation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultsServerService_submitAnnotation_result.prototype.write = function(output) {
  output.writeStructBegin('ResultsServerService_submitAnnotation_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultsServerServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(ResultsServerServiceClient, ServiceClient);
ResultsServerServiceClient.prototype.registerSearchResult = function(result, taskType, callback) {
  if (callback === undefined) {
    this.send_registerSearchResult(result, taskType);
    this.recv_registerSearchResult();
  } else {
    var postData = this.send_registerSearchResult(result, taskType, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_registerSearchResult);
  }
};

ResultsServerServiceClient.prototype.send_registerSearchResult = function(result, taskType, callback) {
  this.output.writeMessageBegin('registerSearchResult', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_registerSearchResult_args();
  args.result = result;
  args.taskType = taskType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_registerSearchResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_registerSearchResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
ResultsServerServiceClient.prototype.getSearchResults = function(taskType, limit, callback) {
  if (callback === undefined) {
    this.send_getSearchResults(taskType, limit);
    return this.recv_getSearchResults();
  } else {
    var postData = this.send_getSearchResults(taskType, limit, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSearchResults);
  }
};

ResultsServerServiceClient.prototype.send_getSearchResults = function(taskType, limit, callback) {
  this.output.writeMessageBegin('getSearchResults', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_getSearchResults_args();
  args.taskType = taskType;
  args.limit = limit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_getSearchResults = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_getSearchResults_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchResults failed: unknown result';
};
ResultsServerServiceClient.prototype.getSearchResultsByUser = function(taskType, userId, limit, callback) {
  if (callback === undefined) {
    this.send_getSearchResultsByUser(taskType, userId, limit);
    return this.recv_getSearchResultsByUser();
  } else {
    var postData = this.send_getSearchResultsByUser(taskType, userId, limit, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSearchResultsByUser);
  }
};

ResultsServerServiceClient.prototype.send_getSearchResultsByUser = function(taskType, userId, limit, callback) {
  this.output.writeMessageBegin('getSearchResultsByUser', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_getSearchResultsByUser_args();
  args.taskType = taskType;
  args.userId = userId;
  args.limit = limit;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_getSearchResultsByUser = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_getSearchResultsByUser_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchResultsByUser failed: unknown result';
};
ResultsServerServiceClient.prototype.getLatestSearchResult = function(userId, callback) {
  if (callback === undefined) {
    this.send_getLatestSearchResult(userId);
    return this.recv_getLatestSearchResult();
  } else {
    var postData = this.send_getLatestSearchResult(userId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getLatestSearchResult);
  }
};

ResultsServerServiceClient.prototype.send_getLatestSearchResult = function(userId, callback) {
  this.output.writeMessageBegin('getLatestSearchResult', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_getLatestSearchResult_args();
  args.userId = userId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_getLatestSearchResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_getLatestSearchResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getLatestSearchResult failed: unknown result';
};
ResultsServerServiceClient.prototype.getSearchResult = function(searchResultId, callback) {
  if (callback === undefined) {
    this.send_getSearchResult(searchResultId);
    return this.recv_getSearchResult();
  } else {
    var postData = this.send_getSearchResult(searchResultId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getSearchResult);
  }
};

ResultsServerServiceClient.prototype.send_getSearchResult = function(searchResultId, callback) {
  this.output.writeMessageBegin('getSearchResult', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_getSearchResult_args();
  args.searchResultId = searchResultId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_getSearchResult = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_getSearchResult_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getSearchResult failed: unknown result';
};
ResultsServerServiceClient.prototype.startSession = function(searchResultId, taskType, callback) {
  if (callback === undefined) {
    this.send_startSession(searchResultId, taskType);
    return this.recv_startSession();
  } else {
    var postData = this.send_startSession(searchResultId, taskType, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_startSession);
  }
};

ResultsServerServiceClient.prototype.send_startSession = function(searchResultId, taskType, callback) {
  this.output.writeMessageBegin('startSession', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_startSession_args();
  args.searchResultId = searchResultId;
  args.taskType = taskType;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_startSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_startSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'startSession failed: unknown result';
};
ResultsServerServiceClient.prototype.stopSession = function(sessionId, callback) {
  if (callback === undefined) {
    this.send_stopSession(sessionId);
    this.recv_stopSession();
  } else {
    var postData = this.send_stopSession(sessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_stopSession);
  }
};

ResultsServerServiceClient.prototype.send_stopSession = function(sessionId, callback) {
  this.output.writeMessageBegin('stopSession', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_stopSession_args();
  args.sessionId = sessionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_stopSession = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_stopSession_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
ResultsServerServiceClient.prototype.getNextChunk = function(sessionId, callback) {
  if (callback === undefined) {
    this.send_getNextChunk(sessionId);
    return this.recv_getNextChunk();
  } else {
    var postData = this.send_getNextChunk(sessionId, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getNextChunk);
  }
};

ResultsServerServiceClient.prototype.send_getNextChunk = function(sessionId, callback) {
  this.output.writeMessageBegin('getNextChunk', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_getNextChunk_args();
  args.sessionId = sessionId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_getNextChunk = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_getNextChunk_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getNextChunk failed: unknown result';
};
ResultsServerServiceClient.prototype.submitAnnotation = function(sessionId, unitId, communication, callback) {
  if (callback === undefined) {
    this.send_submitAnnotation(sessionId, unitId, communication);
    this.recv_submitAnnotation();
  } else {
    var postData = this.send_submitAnnotation(sessionId, unitId, communication, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_submitAnnotation);
  }
};

ResultsServerServiceClient.prototype.send_submitAnnotation = function(sessionId, unitId, communication, callback) {
  this.output.writeMessageBegin('submitAnnotation', Thrift.MessageType.CALL, this.seqid);
  var args = new ResultsServerService_submitAnnotation_args();
  args.sessionId = sessionId;
  args.unitId = unitId;
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ResultsServerServiceClient.prototype.recv_submitAnnotation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ResultsServerService_submitAnnotation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


SearchType = {
  'COMMUNICATIONS' : 0,
  'SECTIONS' : 1,
  'SENTENCES' : 2,
  'ENTITIES' : 3,
  'ENTITY_MENTIONS' : 4,
  'SITUATIONS' : 5,
  'SITUATION_MENTIONS' : 6
};
SearchFeedback = {
  'NEGATIVE' : -1,
  'NONE' : 0,
  'POSITIVE' : 1
};
SearchCapability = function(args) {
  this.type = null;
  this.lang = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field lang is unset!');
    }
  }
};
SearchCapability.prototype = {};
SearchCapability.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchCapability.prototype.write = function(output) {
  output.writeStructBegin('SearchCapability');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 2);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchQuery = function(args) {
  this.terms = null;
  this.questions = null;
  this.communicationId = null;
  this.tokens = null;
  this.rawQuery = null;
  this.auths = null;
  this.userId = null;
  this.name = null;
  this.labels = null;
  this.type = null;
  this.lang = null;
  this.corpus = null;
  if (args) {
    if (args.terms !== undefined && args.terms !== null) {
      this.terms = Thrift.copyList(args.terms, [null]);
    }
    if (args.questions !== undefined && args.questions !== null) {
      this.questions = Thrift.copyList(args.questions, [null]);
    }
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    }
    if (args.rawQuery !== undefined && args.rawQuery !== null) {
      this.rawQuery = args.rawQuery;
    }
    if (args.auths !== undefined && args.auths !== null) {
      this.auths = args.auths;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.labels !== undefined && args.labels !== null) {
      this.labels = Thrift.copyList(args.labels, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    }
    if (args.corpus !== undefined && args.corpus !== null) {
      this.corpus = args.corpus;
    }
  }
};
SearchQuery.prototype = {};
SearchQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.terms = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.terms.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.questions = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.questions.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.rawQuery = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.auths = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.labels = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readString().value;
          this.labels.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.corpus = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchQuery.prototype.write = function(output) {
  output.writeStructBegin('SearchQuery');
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.terms.length);
    for (var iter21 in this.terms)
    {
      if (this.terms.hasOwnProperty(iter21))
      {
        iter21 = this.terms[iter21];
        output.writeString(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.questions !== null && this.questions !== undefined) {
    output.writeFieldBegin('questions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.questions.length);
    for (var iter22 in this.questions)
    {
      if (this.questions.hasOwnProperty(iter22))
      {
        iter22 = this.questions[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 3);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.rawQuery !== null && this.rawQuery !== undefined) {
    output.writeFieldBegin('rawQuery', Thrift.Type.STRING, 5);
    output.writeString(this.rawQuery);
    output.writeFieldEnd();
  }
  if (this.auths !== null && this.auths !== undefined) {
    output.writeFieldBegin('auths', Thrift.Type.STRING, 6);
    output.writeString(this.auths);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 7);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 8);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.labels !== null && this.labels !== undefined) {
    output.writeFieldBegin('labels', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.labels.length);
    for (var iter23 in this.labels)
    {
      if (this.labels.hasOwnProperty(iter23))
      {
        iter23 = this.labels[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 10);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 11);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  if (this.corpus !== null && this.corpus !== undefined) {
    output.writeFieldBegin('corpus', Thrift.Type.STRING, 12);
    output.writeString(this.corpus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchResultItem = function(args) {
  this.communicationId = null;
  this.sentenceId = null;
  this.score = null;
  this.tokens = null;
  if (args) {
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    }
    if (args.sentenceId !== undefined && args.sentenceId !== null) {
      this.sentenceId = new UUID(args.sentenceId);
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    }
  }
};
SearchResultItem.prototype = {};
SearchResultItem.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sentenceId = new UUID();
        this.sentenceId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchResultItem.prototype.write = function(output) {
  output.writeStructBegin('SearchResultItem');
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 1);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.sentenceId !== null && this.sentenceId !== undefined) {
    output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 2);
    this.sentenceId.write(output);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchResult = function(args) {
  this.uuid = null;
  this.searchQuery = null;
  this.searchResultItems = null;
  this.metadata = null;
  this.lang = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.searchQuery !== undefined && args.searchQuery !== null) {
      this.searchQuery = new SearchQuery(args.searchQuery);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field searchQuery is unset!');
    }
    if (args.searchResultItems !== undefined && args.searchResultItems !== null) {
      this.searchResultItems = Thrift.copyList(args.searchResultItems, [SearchResultItem]);
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    }
  }
};
SearchResult.prototype = {};
SearchResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.searchQuery = new SearchQuery();
        this.searchQuery.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.searchResultItems = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new SearchResultItem();
          elem30.read(input);
          this.searchResultItems.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchResult.prototype.write = function(output) {
  output.writeStructBegin('SearchResult');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.searchQuery !== null && this.searchQuery !== undefined) {
    output.writeFieldBegin('searchQuery', Thrift.Type.STRUCT, 2);
    this.searchQuery.write(output);
    output.writeFieldEnd();
  }
  if (this.searchResultItems !== null && this.searchResultItems !== undefined) {
    output.writeFieldBegin('searchResultItems', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.searchResultItems.length);
    for (var iter31 in this.searchResultItems)
    {
      if (this.searchResultItems.hasOwnProperty(iter31))
      {
        iter31 = this.searchResultItems[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 4);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 5);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

SearchProxyService_search_args = function(args) {
  this.query = null;
  this.provider = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = new SearchQuery(args.query);
    }
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
  }
};
SearchProxyService_search_args.prototype = {};
SearchProxyService_search_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new SearchQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.provider = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_search_args.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_search_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRING, 2);
    output.writeString(this.provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyService_search_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SearchProxyService_search_result.prototype = {};
SearchProxyService_search_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_search_result.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_search_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyService_getProviders_args = function(args) {
};
SearchProxyService_getProviders_args.prototype = {};
SearchProxyService_getProviders_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_getProviders_args.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_getProviders_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyService_getProviders_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SearchProxyService_getProviders_result.prototype = {};
SearchProxyService_getProviders_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString().value;
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_getProviders_result.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_getProviders_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyService_getCapabilities_args = function(args) {
  this.provider = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
  }
};
SearchProxyService_getCapabilities_args.prototype = {};
SearchProxyService_getCapabilities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.provider = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_getCapabilities_args.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_getCapabilities_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRING, 1);
    output.writeString(this.provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyService_getCapabilities_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SearchCapability]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SearchProxyService_getCapabilities_result.prototype = {};
SearchProxyService_getCapabilities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new SearchCapability();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_getCapabilities_result.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_getCapabilities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyService_getCorpora_args = function(args) {
  this.provider = null;
  if (args) {
    if (args.provider !== undefined && args.provider !== null) {
      this.provider = args.provider;
    }
  }
};
SearchProxyService_getCorpora_args.prototype = {};
SearchProxyService_getCorpora_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.provider = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_getCorpora_args.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_getCorpora_args');
  if (this.provider !== null && this.provider !== undefined) {
    output.writeFieldBegin('provider', Thrift.Type.STRING, 1);
    output.writeString(this.provider);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyService_getCorpora_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SearchProxyService_getCorpora_result.prototype = {};
SearchProxyService_getCorpora_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString().value;
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchProxyService_getCorpora_result.prototype.write = function(output) {
  output.writeStructBegin('SearchProxyService_getCorpora_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchProxyServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(SearchProxyServiceClient, ServiceClient);
SearchProxyServiceClient.prototype.search = function(query, provider, callback) {
  if (callback === undefined) {
    this.send_search(query, provider);
    return this.recv_search();
  } else {
    var postData = this.send_search(query, provider, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_search);
  }
};

SearchProxyServiceClient.prototype.send_search = function(query, provider, callback) {
  this.output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid);
  var args = new SearchProxyService_search_args();
  args.query = query;
  args.provider = provider;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchProxyServiceClient.prototype.recv_search = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SearchProxyService_search_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'search failed: unknown result';
};
SearchProxyServiceClient.prototype.getProviders = function(callback) {
  if (callback === undefined) {
    this.send_getProviders();
    return this.recv_getProviders();
  } else {
    var postData = this.send_getProviders(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getProviders);
  }
};

SearchProxyServiceClient.prototype.send_getProviders = function(callback) {
  this.output.writeMessageBegin('getProviders', Thrift.MessageType.CALL, this.seqid);
  var args = new SearchProxyService_getProviders_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchProxyServiceClient.prototype.recv_getProviders = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SearchProxyService_getProviders_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getProviders failed: unknown result';
};
SearchProxyServiceClient.prototype.getCapabilities = function(provider, callback) {
  if (callback === undefined) {
    this.send_getCapabilities(provider);
    return this.recv_getCapabilities();
  } else {
    var postData = this.send_getCapabilities(provider, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCapabilities);
  }
};

SearchProxyServiceClient.prototype.send_getCapabilities = function(provider, callback) {
  this.output.writeMessageBegin('getCapabilities', Thrift.MessageType.CALL, this.seqid);
  var args = new SearchProxyService_getCapabilities_args();
  args.provider = provider;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchProxyServiceClient.prototype.recv_getCapabilities = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SearchProxyService_getCapabilities_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCapabilities failed: unknown result';
};
SearchProxyServiceClient.prototype.getCorpora = function(provider, callback) {
  if (callback === undefined) {
    this.send_getCorpora(provider);
    return this.recv_getCorpora();
  } else {
    var postData = this.send_getCorpora(provider, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCorpora);
  }
};

SearchProxyServiceClient.prototype.send_getCorpora = function(provider, callback) {
  this.output.writeMessageBegin('getCorpora', Thrift.MessageType.CALL, this.seqid);
  var args = new SearchProxyService_getCorpora_args();
  args.provider = provider;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchProxyServiceClient.prototype.recv_getCorpora = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SearchProxyService_getCorpora_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCorpora failed: unknown result';
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

SearchService_search_args = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = new SearchQuery(args.query);
    }
  }
};
SearchService_search_args.prototype = {};
SearchService_search_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new SearchQuery();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchService_search_args.prototype.write = function(output) {
  output.writeStructBegin('SearchService_search_args');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 1);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchService_search_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SearchResult(args.success);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SearchService_search_result.prototype = {};
SearchService_search_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SearchResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchService_search_result.prototype.write = function(output) {
  output.writeStructBegin('SearchService_search_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchService_getCapabilities_args = function(args) {
};
SearchService_getCapabilities_args.prototype = {};
SearchService_getCapabilities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchService_getCapabilities_args.prototype.write = function(output) {
  output.writeStructBegin('SearchService_getCapabilities_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchService_getCapabilities_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [SearchCapability]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SearchService_getCapabilities_result.prototype = {};
SearchService_getCapabilities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new SearchCapability();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchService_getCapabilities_result.prototype.write = function(output) {
  output.writeStructBegin('SearchService_getCapabilities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchService_getCorpora_args = function(args) {
};
SearchService_getCorpora_args.prototype = {};
SearchService_getCorpora_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchService_getCorpora_args.prototype.write = function(output) {
  output.writeStructBegin('SearchService_getCorpora_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchService_getCorpora_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
SearchService_getCorpora_result.prototype = {};
SearchService_getCorpora_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString().value;
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SearchService_getCorpora_result.prototype.write = function(output) {
  output.writeStructBegin('SearchService_getCorpora_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SearchServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(SearchServiceClient, ServiceClient);
SearchServiceClient.prototype.search = function(query, callback) {
  if (callback === undefined) {
    this.send_search(query);
    return this.recv_search();
  } else {
    var postData = this.send_search(query, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_search);
  }
};

SearchServiceClient.prototype.send_search = function(query, callback) {
  this.output.writeMessageBegin('search', Thrift.MessageType.CALL, this.seqid);
  var args = new SearchService_search_args();
  args.query = query;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchServiceClient.prototype.recv_search = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SearchService_search_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'search failed: unknown result';
};
SearchServiceClient.prototype.getCapabilities = function(callback) {
  if (callback === undefined) {
    this.send_getCapabilities();
    return this.recv_getCapabilities();
  } else {
    var postData = this.send_getCapabilities(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCapabilities);
  }
};

SearchServiceClient.prototype.send_getCapabilities = function(callback) {
  this.output.writeMessageBegin('getCapabilities', Thrift.MessageType.CALL, this.seqid);
  var args = new SearchService_getCapabilities_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchServiceClient.prototype.recv_getCapabilities = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SearchService_getCapabilities_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCapabilities failed: unknown result';
};
SearchServiceClient.prototype.getCorpora = function(callback) {
  if (callback === undefined) {
    this.send_getCorpora();
    return this.recv_getCorpora();
  } else {
    var postData = this.send_getCorpora(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCorpora);
  }
};

SearchServiceClient.prototype.send_getCorpora = function(callback) {
  this.output.writeMessageBegin('getCorpora', Thrift.MessageType.CALL, this.seqid);
  var args = new SearchService_getCorpora_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

SearchServiceClient.prototype.recv_getCorpora = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new SearchService_getCorpora_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCorpora failed: unknown result';
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Sender_send_args = function(args) {
  this.communication = null;
  if (args) {
    if (args.communication !== undefined && args.communication !== null) {
      this.communication = new Communication(args.communication);
    }
  }
};
Sender_send_args.prototype = {};
Sender_send_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sender_send_args.prototype.write = function(output) {
  output.writeStructBegin('Sender_send_args');
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 1);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sender_send_result = function(args) {
};
Sender_send_result.prototype = {};
Sender_send_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sender_send_result.prototype.write = function(output) {
  output.writeStructBegin('Sender_send_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SenderClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
SenderClient.prototype = {};
SenderClient.prototype.send = function(communication, callback) {
  if (callback === undefined) {
    this.send_send(communication);
  } else {
    var postData = this.send_send(communication, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_send);
  }
};

SenderClient.prototype.send_send = function(communication, callback) {
  this.output.writeMessageBegin('send', Thrift.MessageType.ONEWAY, this.seqid);
  var args = new Sender_send_args();
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Service_about_args = function(args) {
};
Service_about_args.prototype = {};
Service_about_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_about_args.prototype.write = function(output) {
  output.writeStructBegin('Service_about_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Service_about_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ServiceInfo(args.success);
    }
  }
};
Service_about_result.prototype = {};
Service_about_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ServiceInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_about_result.prototype.write = function(output) {
  output.writeStructBegin('Service_about_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Service_alive_args = function(args) {
};
Service_alive_args.prototype = {};
Service_alive_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_alive_args.prototype.write = function(output) {
  output.writeStructBegin('Service_alive_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Service_alive_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Service_alive_result.prototype = {};
Service_alive_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Service_alive_result.prototype.write = function(output) {
  output.writeStructBegin('Service_alive_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ServiceClient.prototype = {};
ServiceClient.prototype.about = function(callback) {
  if (callback === undefined) {
    this.send_about();
    return this.recv_about();
  } else {
    var postData = this.send_about(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_about);
  }
};

ServiceClient.prototype.send_about = function(callback) {
  this.output.writeMessageBegin('about', Thrift.MessageType.CALL, this.seqid);
  var args = new Service_about_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ServiceClient.prototype.recv_about = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Service_about_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'about failed: unknown result';
};
ServiceClient.prototype.alive = function(callback) {
  if (callback === undefined) {
    this.send_alive();
    return this.recv_alive();
  } else {
    var postData = this.send_alive(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_alive);
  }
};

ServiceClient.prototype.send_alive = function(callback) {
  this.output.writeMessageBegin('alive', Thrift.MessageType.CALL, this.seqid);
  var args = new Service_alive_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ServiceClient.prototype.recv_alive = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Service_alive_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'alive failed: unknown result';
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


AnnotationTaskType = {
  'TRANSLATION' : 1,
  'NER' : 2
};
AnnotationUnitType = {
  'COMMUNICATION' : 1,
  'SENTENCE' : 2
};
ServicesException = function(args) {
  this.message = null;
  this.serEx = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.serEx !== undefined && args.serEx !== null) {
      this.serEx = args.serEx;
    }
  }
};
Thrift.inherits(ServicesException, Thrift.TException);
ServicesException.prototype.name = 'ServicesException';
ServicesException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serEx = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServicesException.prototype.write = function(output) {
  output.writeStructBegin('ServicesException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serEx !== null && this.serEx !== undefined) {
    output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
    output.writeBinary(this.serEx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NotImplementedException = function(args) {
  this.message = null;
  this.serEx = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.serEx !== undefined && args.serEx !== null) {
      this.serEx = args.serEx;
    }
  }
};
Thrift.inherits(NotImplementedException, Thrift.TException);
NotImplementedException.prototype.name = 'NotImplementedException';
NotImplementedException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serEx = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NotImplementedException.prototype.write = function(output) {
  output.writeStructBegin('NotImplementedException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serEx !== null && this.serEx !== undefined) {
    output.writeFieldBegin('serEx', Thrift.Type.STRING, 2);
    output.writeBinary(this.serEx);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AsyncContactInfo = function(args) {
  this.host = null;
  this.port = null;
  if (args) {
    if (args.host !== undefined && args.host !== null) {
      this.host = args.host;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field host is unset!');
    }
    if (args.port !== undefined && args.port !== null) {
      this.port = args.port;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field port is unset!');
    }
  }
};
AsyncContactInfo.prototype = {};
AsyncContactInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AsyncContactInfo.prototype.write = function(output) {
  output.writeStructBegin('AsyncContactInfo');
  if (this.host !== null && this.host !== undefined) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 1);
    output.writeString(this.host);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationUnitIdentifier = function(args) {
  this.communicationId = null;
  this.sentenceId = null;
  if (args) {
    if (args.communicationId !== undefined && args.communicationId !== null) {
      this.communicationId = args.communicationId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field communicationId is unset!');
    }
    if (args.sentenceId !== undefined && args.sentenceId !== null) {
      this.sentenceId = new UUID(args.sentenceId);
    }
  }
};
AnnotationUnitIdentifier.prototype = {};
AnnotationUnitIdentifier.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sentenceId = new UUID();
        this.sentenceId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationUnitIdentifier.prototype.write = function(output) {
  output.writeStructBegin('AnnotationUnitIdentifier');
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 1);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  if (this.sentenceId !== null && this.sentenceId !== undefined) {
    output.writeFieldBegin('sentenceId', Thrift.Type.STRUCT, 2);
    this.sentenceId.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServiceInfo = function(args) {
  this.name = null;
  this.version = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field version is unset!');
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
ServiceInfo.prototype = {};
ServiceInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServiceInfo.prototype.write = function(output) {
  output.writeStructBegin('ServiceInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 2);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Property = function(args) {
  this.value = null;
  this.metadata = null;
  this.polarity = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.polarity !== undefined && args.polarity !== null) {
      this.polarity = args.polarity;
    }
  }
};
Property.prototype = {};
Property.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.polarity = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Property.prototype.write = function(output) {
  output.writeStructBegin('Property');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.polarity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Argument = function(args) {
  this.role = null;
  this.entityId = null;
  this.situationId = null;
  this.propertyList = null;
  if (args) {
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.entityId !== undefined && args.entityId !== null) {
      this.entityId = new UUID(args.entityId);
    }
    if (args.situationId !== undefined && args.situationId !== null) {
      this.situationId = new UUID(args.situationId);
    }
    if (args.propertyList !== undefined && args.propertyList !== null) {
      this.propertyList = Thrift.copyList(args.propertyList, [Property]);
    }
  }
};
Argument.prototype = {};
Argument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityId = new UUID();
        this.entityId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.situationId = new UUID();
        this.situationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.propertyList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new Property();
          elem6.read(input);
          this.propertyList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Argument.prototype.write = function(output) {
  output.writeStructBegin('Argument');
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 1);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.STRUCT, 2);
    this.entityId.write(output);
    output.writeFieldEnd();
  }
  if (this.situationId !== null && this.situationId !== undefined) {
    output.writeFieldBegin('situationId', Thrift.Type.STRUCT, 3);
    this.situationId.write(output);
    output.writeFieldEnd();
  }
  if (this.propertyList !== null && this.propertyList !== undefined) {
    output.writeFieldBegin('propertyList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.propertyList.length);
    for (var iter7 in this.propertyList)
    {
      if (this.propertyList.hasOwnProperty(iter7))
      {
        iter7 = this.propertyList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Justification = function(args) {
  this.justificationType = null;
  this.mentionId = null;
  this.tokenRefSeqList = null;
  if (args) {
    if (args.justificationType !== undefined && args.justificationType !== null) {
      this.justificationType = args.justificationType;
    }
    if (args.mentionId !== undefined && args.mentionId !== null) {
      this.mentionId = new UUID(args.mentionId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionId is unset!');
    }
    if (args.tokenRefSeqList !== undefined && args.tokenRefSeqList !== null) {
      this.tokenRefSeqList = Thrift.copyList(args.tokenRefSeqList, [TokenRefSequence]);
    }
  }
};
Justification.prototype = {};
Justification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.justificationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.mentionId = new UUID();
        this.mentionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.tokenRefSeqList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new TokenRefSequence();
          elem14.read(input);
          this.tokenRefSeqList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Justification.prototype.write = function(output) {
  output.writeStructBegin('Justification');
  if (this.justificationType !== null && this.justificationType !== undefined) {
    output.writeFieldBegin('justificationType', Thrift.Type.STRING, 1);
    output.writeString(this.justificationType);
    output.writeFieldEnd();
  }
  if (this.mentionId !== null && this.mentionId !== undefined) {
    output.writeFieldBegin('mentionId', Thrift.Type.STRUCT, 2);
    this.mentionId.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenRefSeqList !== null && this.tokenRefSeqList !== undefined) {
    output.writeFieldBegin('tokenRefSeqList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenRefSeqList.length);
    for (var iter15 in this.tokenRefSeqList)
    {
      if (this.tokenRefSeqList.hasOwnProperty(iter15))
      {
        iter15 = this.tokenRefSeqList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TimeML = function(args) {
  this.timeMLClass = null;
  this.timeMLTense = null;
  this.timeMLAspect = null;
  if (args) {
    if (args.timeMLClass !== undefined && args.timeMLClass !== null) {
      this.timeMLClass = args.timeMLClass;
    }
    if (args.timeMLTense !== undefined && args.timeMLTense !== null) {
      this.timeMLTense = args.timeMLTense;
    }
    if (args.timeMLAspect !== undefined && args.timeMLAspect !== null) {
      this.timeMLAspect = args.timeMLAspect;
    }
  }
};
TimeML.prototype = {};
TimeML.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timeMLClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.timeMLTense = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timeMLAspect = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimeML.prototype.write = function(output) {
  output.writeStructBegin('TimeML');
  if (this.timeMLClass !== null && this.timeMLClass !== undefined) {
    output.writeFieldBegin('timeMLClass', Thrift.Type.STRING, 1);
    output.writeString(this.timeMLClass);
    output.writeFieldEnd();
  }
  if (this.timeMLTense !== null && this.timeMLTense !== undefined) {
    output.writeFieldBegin('timeMLTense', Thrift.Type.STRING, 2);
    output.writeString(this.timeMLTense);
    output.writeFieldEnd();
  }
  if (this.timeMLAspect !== null && this.timeMLAspect !== undefined) {
    output.writeFieldBegin('timeMLAspect', Thrift.Type.STRING, 3);
    output.writeString(this.timeMLAspect);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Situation = function(args) {
  this.uuid = null;
  this.situationType = null;
  this.situationKind = null;
  this.argumentList = null;
  this.mentionIdList = null;
  this.justificationList = null;
  this.timeML = null;
  this.intensity = null;
  this.polarity = null;
  this.confidence = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.situationType !== undefined && args.situationType !== null) {
      this.situationType = args.situationType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field situationType is unset!');
    }
    if (args.situationKind !== undefined && args.situationKind !== null) {
      this.situationKind = args.situationKind;
    }
    if (args.argumentList !== undefined && args.argumentList !== null) {
      this.argumentList = Thrift.copyList(args.argumentList, [Argument]);
    }
    if (args.mentionIdList !== undefined && args.mentionIdList !== null) {
      this.mentionIdList = Thrift.copyList(args.mentionIdList, [UUID]);
    }
    if (args.justificationList !== undefined && args.justificationList !== null) {
      this.justificationList = Thrift.copyList(args.justificationList, [Justification]);
    }
    if (args.timeML !== undefined && args.timeML !== null) {
      this.timeML = new TimeML(args.timeML);
    }
    if (args.intensity !== undefined && args.intensity !== null) {
      this.intensity = args.intensity;
    }
    if (args.polarity !== undefined && args.polarity !== null) {
      this.polarity = args.polarity;
    }
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
  }
};
Situation.prototype = {};
Situation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.situationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.situationKind = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.argumentList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new Argument();
          elem22.read(input);
          this.argumentList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.mentionIdList = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new UUID();
          elem29.read(input);
          this.mentionIdList.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.justificationList = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = new Justification();
          elem36.read(input);
          this.justificationList.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRUCT) {
        this.timeML = new TimeML();
        this.timeML.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.DOUBLE) {
        this.intensity = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.STRING) {
        this.polarity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Situation.prototype.write = function(output) {
  output.writeStructBegin('Situation');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.situationType !== null && this.situationType !== undefined) {
    output.writeFieldBegin('situationType', Thrift.Type.STRING, 2);
    output.writeString(this.situationType);
    output.writeFieldEnd();
  }
  if (this.situationKind !== null && this.situationKind !== undefined) {
    output.writeFieldBegin('situationKind', Thrift.Type.STRING, 50);
    output.writeString(this.situationKind);
    output.writeFieldEnd();
  }
  if (this.argumentList !== null && this.argumentList !== undefined) {
    output.writeFieldBegin('argumentList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.argumentList.length);
    for (var iter37 in this.argumentList)
    {
      if (this.argumentList.hasOwnProperty(iter37))
      {
        iter37 = this.argumentList[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mentionIdList !== null && this.mentionIdList !== undefined) {
    output.writeFieldBegin('mentionIdList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.mentionIdList.length);
    for (var iter38 in this.mentionIdList)
    {
      if (this.mentionIdList.hasOwnProperty(iter38))
      {
        iter38 = this.mentionIdList[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.justificationList !== null && this.justificationList !== undefined) {
    output.writeFieldBegin('justificationList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.justificationList.length);
    for (var iter39 in this.justificationList)
    {
      if (this.justificationList.hasOwnProperty(iter39))
      {
        iter39 = this.justificationList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeML !== null && this.timeML !== undefined) {
    output.writeFieldBegin('timeML', Thrift.Type.STRUCT, 54);
    this.timeML.write(output);
    output.writeFieldEnd();
  }
  if (this.intensity !== null && this.intensity !== undefined) {
    output.writeFieldBegin('intensity', Thrift.Type.DOUBLE, 100);
    output.writeDouble(this.intensity);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.STRING, 101);
    output.writeString(this.polarity);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 200);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SituationSet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.situationList = null;
  this.linkingList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.situationList !== undefined && args.situationList !== null) {
      this.situationList = Thrift.copyList(args.situationList, [Situation]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field situationList is unset!');
    }
    if (args.linkingList !== undefined && args.linkingList !== null) {
      this.linkingList = Thrift.copyList(args.linkingList, [Linking]);
    }
  }
};
SituationSet.prototype = {};
SituationSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.situationList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new Situation();
          elem46.read(input);
          this.situationList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size47 = 0;
        var _rtmp351;
        this.linkingList = [];
        var _etype50 = 0;
        _rtmp351 = input.readListBegin();
        _etype50 = _rtmp351.etype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var elem53 = null;
          elem53 = new Linking();
          elem53.read(input);
          this.linkingList.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SituationSet.prototype.write = function(output) {
  output.writeStructBegin('SituationSet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.situationList !== null && this.situationList !== undefined) {
    output.writeFieldBegin('situationList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationList.length);
    for (var iter54 in this.situationList)
    {
      if (this.situationList.hasOwnProperty(iter54))
      {
        iter54 = this.situationList[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkingList !== null && this.linkingList !== undefined) {
    output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
    for (var iter55 in this.linkingList)
    {
      if (this.linkingList.hasOwnProperty(iter55))
      {
        iter55 = this.linkingList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MentionArgument = function(args) {
  this.role = null;
  this.entityMentionId = null;
  this.situationMentionId = null;
  this.tokens = null;
  this.constituent = null;
  this.confidence = null;
  this.propertyList = null;
  if (args) {
    if (args.role !== undefined && args.role !== null) {
      this.role = args.role;
    }
    if (args.entityMentionId !== undefined && args.entityMentionId !== null) {
      this.entityMentionId = new UUID(args.entityMentionId);
    }
    if (args.situationMentionId !== undefined && args.situationMentionId !== null) {
      this.situationMentionId = new UUID(args.situationMentionId);
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    }
    if (args.constituent !== undefined && args.constituent !== null) {
      this.constituent = new ConstituentRef(args.constituent);
    }
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
    if (args.propertyList !== undefined && args.propertyList !== null) {
      this.propertyList = Thrift.copyList(args.propertyList, [Property]);
    }
  }
};
MentionArgument.prototype = {};
MentionArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityMentionId = new UUID();
        this.entityMentionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.situationMentionId = new UUID();
        this.situationMentionId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.constituent = new ConstituentRef();
        this.constituent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.propertyList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new Property();
          elem62.read(input);
          this.propertyList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MentionArgument.prototype.write = function(output) {
  output.writeStructBegin('MentionArgument');
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 1);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.entityMentionId !== null && this.entityMentionId !== undefined) {
    output.writeFieldBegin('entityMentionId', Thrift.Type.STRUCT, 2);
    this.entityMentionId.write(output);
    output.writeFieldEnd();
  }
  if (this.situationMentionId !== null && this.situationMentionId !== undefined) {
    output.writeFieldBegin('situationMentionId', Thrift.Type.STRUCT, 3);
    this.situationMentionId.write(output);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 4);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.constituent !== null && this.constituent !== undefined) {
    output.writeFieldBegin('constituent', Thrift.Type.STRUCT, 7);
    this.constituent.write(output);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.propertyList !== null && this.propertyList !== undefined) {
    output.writeFieldBegin('propertyList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.propertyList.length);
    for (var iter63 in this.propertyList)
    {
      if (this.propertyList.hasOwnProperty(iter63))
      {
        iter63 = this.propertyList[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SituationMention = function(args) {
  this.uuid = null;
  this.text = null;
  this.situationType = null;
  this.situationKind = null;
  this.argumentList = null;
  this.intensity = null;
  this.polarity = null;
  this.tokens = null;
  this.constituent = null;
  this.confidence = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.situationType !== undefined && args.situationType !== null) {
      this.situationType = args.situationType;
    }
    if (args.situationKind !== undefined && args.situationKind !== null) {
      this.situationKind = args.situationKind;
    }
    if (args.argumentList !== undefined && args.argumentList !== null) {
      this.argumentList = Thrift.copyList(args.argumentList, [MentionArgument]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field argumentList is unset!');
    }
    if (args.intensity !== undefined && args.intensity !== null) {
      this.intensity = args.intensity;
    }
    if (args.polarity !== undefined && args.polarity !== null) {
      this.polarity = args.polarity;
    }
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    }
    if (args.constituent !== undefined && args.constituent !== null) {
      this.constituent = new ConstituentRef(args.constituent);
    }
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
  }
};
SituationMention.prototype = {};
SituationMention.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.situationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.situationKind = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.argumentList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new MentionArgument();
          elem70.read(input);
          this.argumentList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.DOUBLE) {
        this.intensity = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.STRING) {
        this.polarity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 150:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 151:
      if (ftype == Thrift.Type.STRUCT) {
        this.constituent = new ConstituentRef();
        this.constituent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SituationMention.prototype.write = function(output) {
  output.writeStructBegin('SituationMention');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.situationType !== null && this.situationType !== undefined) {
    output.writeFieldBegin('situationType', Thrift.Type.STRING, 3);
    output.writeString(this.situationType);
    output.writeFieldEnd();
  }
  if (this.situationKind !== null && this.situationKind !== undefined) {
    output.writeFieldBegin('situationKind', Thrift.Type.STRING, 50);
    output.writeString(this.situationKind);
    output.writeFieldEnd();
  }
  if (this.argumentList !== null && this.argumentList !== undefined) {
    output.writeFieldBegin('argumentList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.argumentList.length);
    for (var iter71 in this.argumentList)
    {
      if (this.argumentList.hasOwnProperty(iter71))
      {
        iter71 = this.argumentList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.intensity !== null && this.intensity !== undefined) {
    output.writeFieldBegin('intensity', Thrift.Type.DOUBLE, 100);
    output.writeDouble(this.intensity);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.STRING, 101);
    output.writeString(this.polarity);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 150);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.constituent !== null && this.constituent !== undefined) {
    output.writeFieldBegin('constituent', Thrift.Type.STRUCT, 151);
    this.constituent.write(output);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 200);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SituationMentionSet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.mentionList = null;
  this.linkingList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.mentionList !== undefined && args.mentionList !== null) {
      this.mentionList = Thrift.copyList(args.mentionList, [SituationMention]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field mentionList is unset!');
    }
    if (args.linkingList !== undefined && args.linkingList !== null) {
      this.linkingList = Thrift.copyList(args.linkingList, [Linking]);
    }
  }
};
SituationMentionSet.prototype = {};
SituationMentionSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.mentionList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new SituationMention();
          elem78.read(input);
          this.mentionList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.linkingList = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = new Linking();
          elem85.read(input);
          this.linkingList.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SituationMentionSet.prototype.write = function(output) {
  output.writeStructBegin('SituationMentionSet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.mentionList !== null && this.mentionList !== undefined) {
    output.writeFieldBegin('mentionList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mentionList.length);
    for (var iter86 in this.mentionList)
    {
      if (this.mentionList.hasOwnProperty(iter86))
      {
        iter86 = this.mentionList[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.linkingList !== null && this.linkingList !== undefined) {
    output.writeFieldBegin('linkingList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.linkingList.length);
    for (var iter87 in this.linkingList)
    {
      if (this.linkingList.hasOwnProperty(iter87))
      {
        iter87 = this.linkingList[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TextSpan = function(args) {
  this.start = null;
  this.ending = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start is unset!');
    }
    if (args.ending !== undefined && args.ending !== null) {
      this.ending = args.ending;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ending is unset!');
    }
  }
};
TextSpan.prototype = {};
TextSpan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ending = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TextSpan.prototype.write = function(output) {
  output.writeStructBegin('TextSpan');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 1);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.ending !== null && this.ending !== undefined) {
    output.writeFieldBegin('ending', Thrift.Type.I32, 2);
    output.writeI32(this.ending);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AudioSpan = function(args) {
  this.start = null;
  this.ending = null;
  if (args) {
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field start is unset!');
    }
    if (args.ending !== undefined && args.ending !== null) {
      this.ending = args.ending;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field ending is unset!');
    }
  }
};
AudioSpan.prototype = {};
AudioSpan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ending = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AudioSpan.prototype.write = function(output) {
  output.writeStructBegin('AudioSpan');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 1);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.ending !== null && this.ending !== undefined) {
    output.writeFieldBegin('ending', Thrift.Type.I64, 2);
    output.writeI64(this.ending);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

StoreCommunicationService_store_args = function(args) {
  this.communication = null;
  if (args) {
    if (args.communication !== undefined && args.communication !== null) {
      this.communication = new Communication(args.communication);
    }
  }
};
StoreCommunicationService_store_args.prototype = {};
StoreCommunicationService_store_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.communication = new Communication();
        this.communication.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StoreCommunicationService_store_args.prototype.write = function(output) {
  output.writeStructBegin('StoreCommunicationService_store_args');
  if (this.communication !== null && this.communication !== undefined) {
    output.writeFieldBegin('communication', Thrift.Type.STRUCT, 1);
    this.communication.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StoreCommunicationService_store_result = function(args) {
  this.ex = null;
  if (args instanceof ServicesException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.ex !== undefined && args.ex !== null) {
      this.ex = args.ex;
    }
  }
};
StoreCommunicationService_store_result.prototype = {};
StoreCommunicationService_store_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ServicesException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StoreCommunicationService_store_result.prototype.write = function(output) {
  output.writeStructBegin('StoreCommunicationService_store_result');
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StoreCommunicationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
Thrift.inherits(StoreCommunicationServiceClient, ServiceClient);
StoreCommunicationServiceClient.prototype.store = function(communication, callback) {
  if (callback === undefined) {
    this.send_store(communication);
    this.recv_store();
  } else {
    var postData = this.send_store(communication, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_store);
  }
};

StoreCommunicationServiceClient.prototype.send_store = function(communication, callback) {
  this.output.writeMessageBegin('store', Thrift.MessageType.CALL, this.seqid);
  var args = new StoreCommunicationService_store_args();
  args.communication = communication;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

StoreCommunicationServiceClient.prototype.recv_store = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new StoreCommunicationService_store_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  return;
};
;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TokenizationKind = {
  'TOKEN_LIST' : 1,
  'TOKEN_LATTICE' : 2
};
Token = function(args) {
  this.tokenIndex = null;
  this.text = null;
  this.textSpan = null;
  this.rawTextSpan = null;
  this.audioSpan = null;
  if (args) {
    if (args.tokenIndex !== undefined && args.tokenIndex !== null) {
      this.tokenIndex = args.tokenIndex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenIndex is unset!');
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.textSpan !== undefined && args.textSpan !== null) {
      this.textSpan = new TextSpan(args.textSpan);
    }
    if (args.rawTextSpan !== undefined && args.rawTextSpan !== null) {
      this.rawTextSpan = new TextSpan(args.rawTextSpan);
    }
    if (args.audioSpan !== undefined && args.audioSpan !== null) {
      this.audioSpan = new AudioSpan(args.audioSpan);
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tokenIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.rawTextSpan = new TextSpan();
        this.rawTextSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.tokenIndex !== null && this.tokenIndex !== undefined) {
    output.writeFieldBegin('tokenIndex', Thrift.Type.I32, 1);
    output.writeI32(this.tokenIndex);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 3);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.rawTextSpan !== null && this.rawTextSpan !== undefined) {
    output.writeFieldBegin('rawTextSpan', Thrift.Type.STRUCT, 4);
    this.rawTextSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 5);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConstituentRef = function(args) {
  this.parseId = null;
  this.constituentIndex = null;
  if (args) {
    if (args.parseId !== undefined && args.parseId !== null) {
      this.parseId = new UUID(args.parseId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field parseId is unset!');
    }
    if (args.constituentIndex !== undefined && args.constituentIndex !== null) {
      this.constituentIndex = args.constituentIndex;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field constituentIndex is unset!');
    }
  }
};
ConstituentRef.prototype = {};
ConstituentRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parseId = new UUID();
        this.parseId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.constituentIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConstituentRef.prototype.write = function(output) {
  output.writeStructBegin('ConstituentRef');
  if (this.parseId !== null && this.parseId !== undefined) {
    output.writeFieldBegin('parseId', Thrift.Type.STRUCT, 1);
    this.parseId.write(output);
    output.writeFieldEnd();
  }
  if (this.constituentIndex !== null && this.constituentIndex !== undefined) {
    output.writeFieldBegin('constituentIndex', Thrift.Type.I32, 2);
    output.writeI32(this.constituentIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenRefSequence = function(args) {
  this.tokenIndexList = null;
  this.anchorTokenIndex = -1;
  this.tokenizationId = null;
  this.textSpan = null;
  this.rawTextSpan = null;
  this.audioSpan = null;
  if (args) {
    if (args.tokenIndexList !== undefined && args.tokenIndexList !== null) {
      this.tokenIndexList = Thrift.copyList(args.tokenIndexList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenIndexList is unset!');
    }
    if (args.anchorTokenIndex !== undefined && args.anchorTokenIndex !== null) {
      this.anchorTokenIndex = args.anchorTokenIndex;
    }
    if (args.tokenizationId !== undefined && args.tokenizationId !== null) {
      this.tokenizationId = new UUID(args.tokenizationId);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenizationId is unset!');
    }
    if (args.textSpan !== undefined && args.textSpan !== null) {
      this.textSpan = new TextSpan(args.textSpan);
    }
    if (args.rawTextSpan !== undefined && args.rawTextSpan !== null) {
      this.rawTextSpan = new TextSpan(args.rawTextSpan);
    }
    if (args.audioSpan !== undefined && args.audioSpan !== null) {
      this.audioSpan = new AudioSpan(args.audioSpan);
    }
  }
};
TokenRefSequence.prototype = {};
TokenRefSequence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tokenIndexList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.tokenIndexList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.anchorTokenIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenizationId = new UUID();
        this.tokenizationId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.rawTextSpan = new TextSpan();
        this.rawTextSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenRefSequence.prototype.write = function(output) {
  output.writeStructBegin('TokenRefSequence');
  if (this.tokenIndexList !== null && this.tokenIndexList !== undefined) {
    output.writeFieldBegin('tokenIndexList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.tokenIndexList.length);
    for (var iter7 in this.tokenIndexList)
    {
      if (this.tokenIndexList.hasOwnProperty(iter7))
      {
        iter7 = this.tokenIndexList[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.anchorTokenIndex !== null && this.anchorTokenIndex !== undefined) {
    output.writeFieldBegin('anchorTokenIndex', Thrift.Type.I32, 2);
    output.writeI32(this.anchorTokenIndex);
    output.writeFieldEnd();
  }
  if (this.tokenizationId !== null && this.tokenizationId !== undefined) {
    output.writeFieldBegin('tokenizationId', Thrift.Type.STRUCT, 3);
    this.tokenizationId.write(output);
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 4);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.rawTextSpan !== null && this.rawTextSpan !== undefined) {
    output.writeFieldBegin('rawTextSpan', Thrift.Type.STRUCT, 5);
    this.rawTextSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 6);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TaggedToken = function(args) {
  this.tokenIndex = null;
  this.tag = null;
  this.confidence = null;
  this.tagList = null;
  this.confidenceList = null;
  if (args) {
    if (args.tokenIndex !== undefined && args.tokenIndex !== null) {
      this.tokenIndex = args.tokenIndex;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.confidence !== undefined && args.confidence !== null) {
      this.confidence = args.confidence;
    }
    if (args.tagList !== undefined && args.tagList !== null) {
      this.tagList = Thrift.copyList(args.tagList, [null]);
    }
    if (args.confidenceList !== undefined && args.confidenceList !== null) {
      this.confidenceList = Thrift.copyList(args.confidenceList, [null]);
    }
  }
};
TaggedToken.prototype = {};
TaggedToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tokenIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.tagList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.tagList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.confidenceList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readDouble().value;
          this.confidenceList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaggedToken.prototype.write = function(output) {
  output.writeStructBegin('TaggedToken');
  if (this.tokenIndex !== null && this.tokenIndex !== undefined) {
    output.writeFieldBegin('tokenIndex', Thrift.Type.I32, 1);
    output.writeI32(this.tokenIndex);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.tagList !== null && this.tagList !== undefined) {
    output.writeFieldBegin('tagList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.tagList.length);
    for (var iter22 in this.tagList)
    {
      if (this.tagList.hasOwnProperty(iter22))
      {
        iter22 = this.tagList[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.confidenceList !== null && this.confidenceList !== undefined) {
    output.writeFieldBegin('confidenceList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.DOUBLE, this.confidenceList.length);
    for (var iter23 in this.confidenceList)
    {
      if (this.confidenceList.hasOwnProperty(iter23))
      {
        iter23 = this.confidenceList[iter23];
        output.writeDouble(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenTagging = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.taggedTokenList = null;
  this.taggingType = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.taggedTokenList !== undefined && args.taggedTokenList !== null) {
      this.taggedTokenList = Thrift.copyList(args.taggedTokenList, [TaggedToken]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field taggedTokenList is unset!');
    }
    if (args.taggingType !== undefined && args.taggingType !== null) {
      this.taggingType = args.taggingType;
    }
  }
};
TokenTagging.prototype = {};
TokenTagging.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.taggedTokenList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new TaggedToken();
          elem30.read(input);
          this.taggedTokenList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.taggingType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTagging.prototype.write = function(output) {
  output.writeStructBegin('TokenTagging');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.taggedTokenList !== null && this.taggedTokenList !== undefined) {
    output.writeFieldBegin('taggedTokenList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.taggedTokenList.length);
    for (var iter31 in this.taggedTokenList)
    {
      if (this.taggedTokenList.hasOwnProperty(iter31))
      {
        iter31 = this.taggedTokenList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.taggingType !== null && this.taggingType !== undefined) {
    output.writeFieldBegin('taggingType', Thrift.Type.STRING, 4);
    output.writeString(this.taggingType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Dependency = function(args) {
  this.gov = -1;
  this.dep = null;
  this.edgeType = null;
  if (args) {
    if (args.gov !== undefined && args.gov !== null) {
      this.gov = args.gov;
    }
    if (args.dep !== undefined && args.dep !== null) {
      this.dep = args.dep;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dep is unset!');
    }
    if (args.edgeType !== undefined && args.edgeType !== null) {
      this.edgeType = args.edgeType;
    }
  }
};
Dependency.prototype = {};
Dependency.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.gov = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dep = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.edgeType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Dependency.prototype.write = function(output) {
  output.writeStructBegin('Dependency');
  if (this.gov !== null && this.gov !== undefined) {
    output.writeFieldBegin('gov', Thrift.Type.I32, 1);
    output.writeI32(this.gov);
    output.writeFieldEnd();
  }
  if (this.dep !== null && this.dep !== undefined) {
    output.writeFieldBegin('dep', Thrift.Type.I32, 2);
    output.writeI32(this.dep);
    output.writeFieldEnd();
  }
  if (this.edgeType !== null && this.edgeType !== undefined) {
    output.writeFieldBegin('edgeType', Thrift.Type.STRING, 3);
    output.writeString(this.edgeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DependencyParseStructure = function(args) {
  this.isAcyclic = null;
  this.isConnected = null;
  this.isSingleHeaded = null;
  this.isProjective = null;
  if (args) {
    if (args.isAcyclic !== undefined && args.isAcyclic !== null) {
      this.isAcyclic = args.isAcyclic;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isAcyclic is unset!');
    }
    if (args.isConnected !== undefined && args.isConnected !== null) {
      this.isConnected = args.isConnected;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isConnected is unset!');
    }
    if (args.isSingleHeaded !== undefined && args.isSingleHeaded !== null) {
      this.isSingleHeaded = args.isSingleHeaded;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isSingleHeaded is unset!');
    }
    if (args.isProjective !== undefined && args.isProjective !== null) {
      this.isProjective = args.isProjective;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field isProjective is unset!');
    }
  }
};
DependencyParseStructure.prototype = {};
DependencyParseStructure.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isAcyclic = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isConnected = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isSingleHeaded = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isProjective = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DependencyParseStructure.prototype.write = function(output) {
  output.writeStructBegin('DependencyParseStructure');
  if (this.isAcyclic !== null && this.isAcyclic !== undefined) {
    output.writeFieldBegin('isAcyclic', Thrift.Type.BOOL, 1);
    output.writeBool(this.isAcyclic);
    output.writeFieldEnd();
  }
  if (this.isConnected !== null && this.isConnected !== undefined) {
    output.writeFieldBegin('isConnected', Thrift.Type.BOOL, 2);
    output.writeBool(this.isConnected);
    output.writeFieldEnd();
  }
  if (this.isSingleHeaded !== null && this.isSingleHeaded !== undefined) {
    output.writeFieldBegin('isSingleHeaded', Thrift.Type.BOOL, 3);
    output.writeBool(this.isSingleHeaded);
    output.writeFieldEnd();
  }
  if (this.isProjective !== null && this.isProjective !== undefined) {
    output.writeFieldBegin('isProjective', Thrift.Type.BOOL, 4);
    output.writeBool(this.isProjective);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DependencyParse = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.dependencyList = null;
  this.structureInformation = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.dependencyList !== undefined && args.dependencyList !== null) {
      this.dependencyList = Thrift.copyList(args.dependencyList, [Dependency]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field dependencyList is unset!');
    }
    if (args.structureInformation !== undefined && args.structureInformation !== null) {
      this.structureInformation = new DependencyParseStructure(args.structureInformation);
    }
  }
};
DependencyParse.prototype = {};
DependencyParse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.dependencyList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Dependency();
          elem38.read(input);
          this.dependencyList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.structureInformation = new DependencyParseStructure();
        this.structureInformation.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DependencyParse.prototype.write = function(output) {
  output.writeStructBegin('DependencyParse');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.dependencyList !== null && this.dependencyList !== undefined) {
    output.writeFieldBegin('dependencyList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.dependencyList.length);
    for (var iter39 in this.dependencyList)
    {
      if (this.dependencyList.hasOwnProperty(iter39))
      {
        iter39 = this.dependencyList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.structureInformation !== null && this.structureInformation !== undefined) {
    output.writeFieldBegin('structureInformation', Thrift.Type.STRUCT, 4);
    this.structureInformation.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Constituent = function(args) {
  this.id = null;
  this.tag = null;
  this.childList = null;
  this.headChildIndex = -1;
  this.start = null;
  this.ending = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.childList !== undefined && args.childList !== null) {
      this.childList = Thrift.copyList(args.childList, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field childList is unset!');
    }
    if (args.headChildIndex !== undefined && args.headChildIndex !== null) {
      this.headChildIndex = args.headChildIndex;
    }
    if (args.start !== undefined && args.start !== null) {
      this.start = args.start;
    }
    if (args.ending !== undefined && args.ending !== null) {
      this.ending = args.ending;
    }
  }
};
Constituent.prototype = {};
Constituent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.childList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32().value;
          this.childList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.headChildIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.ending = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Constituent.prototype.write = function(output) {
  output.writeStructBegin('Constituent');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.childList !== null && this.childList !== undefined) {
    output.writeFieldBegin('childList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.childList.length);
    for (var iter47 in this.childList)
    {
      if (this.childList.hasOwnProperty(iter47))
      {
        iter47 = this.childList[iter47];
        output.writeI32(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.headChildIndex !== null && this.headChildIndex !== undefined) {
    output.writeFieldBegin('headChildIndex', Thrift.Type.I32, 4);
    output.writeI32(this.headChildIndex);
    output.writeFieldEnd();
  }
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 5);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.ending !== null && this.ending !== undefined) {
    output.writeFieldBegin('ending', Thrift.Type.I32, 6);
    output.writeI32(this.ending);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Parse = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.constituentList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.constituentList !== undefined && args.constituentList !== null) {
      this.constituentList = Thrift.copyList(args.constituentList, [Constituent]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field constituentList is unset!');
    }
  }
};
Parse.prototype = {};
Parse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.constituentList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new Constituent();
          elem54.read(input);
          this.constituentList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Parse.prototype.write = function(output) {
  output.writeStructBegin('Parse');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.constituentList !== null && this.constituentList !== undefined) {
    output.writeFieldBegin('constituentList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.constituentList.length);
    for (var iter55 in this.constituentList)
    {
      if (this.constituentList.hasOwnProperty(iter55))
      {
        iter55 = this.constituentList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LatticePath = function(args) {
  this.weight = null;
  this.tokenList = null;
  if (args) {
    if (args.weight !== undefined && args.weight !== null) {
      this.weight = args.weight;
    }
    if (args.tokenList !== undefined && args.tokenList !== null) {
      this.tokenList = Thrift.copyList(args.tokenList, [Token]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenList is unset!');
    }
  }
};
LatticePath.prototype = {};
LatticePath.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.weight = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.tokenList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new Token();
          elem62.read(input);
          this.tokenList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LatticePath.prototype.write = function(output) {
  output.writeStructBegin('LatticePath');
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.weight);
    output.writeFieldEnd();
  }
  if (this.tokenList !== null && this.tokenList !== undefined) {
    output.writeFieldBegin('tokenList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenList.length);
    for (var iter63 in this.tokenList)
    {
      if (this.tokenList.hasOwnProperty(iter63))
      {
        iter63 = this.tokenList[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Arc = function(args) {
  this.src = null;
  this.dst = null;
  this.token = null;
  this.weight = null;
  if (args) {
    if (args.src !== undefined && args.src !== null) {
      this.src = args.src;
    }
    if (args.dst !== undefined && args.dst !== null) {
      this.dst = args.dst;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = new Token(args.token);
    }
    if (args.weight !== undefined && args.weight !== null) {
      this.weight = args.weight;
    }
  }
};
Arc.prototype = {};
Arc.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.src = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dst = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.weight = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Arc.prototype.write = function(output) {
  output.writeStructBegin('Arc');
  if (this.src !== null && this.src !== undefined) {
    output.writeFieldBegin('src', Thrift.Type.I32, 1);
    output.writeI32(this.src);
    output.writeFieldEnd();
  }
  if (this.dst !== null && this.dst !== undefined) {
    output.writeFieldBegin('dst', Thrift.Type.I32, 2);
    output.writeI32(this.dst);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.weight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenLattice = function(args) {
  this.startState = 0;
  this.endState = 0;
  this.arcList = null;
  this.cachedBestPath = null;
  if (args) {
    if (args.startState !== undefined && args.startState !== null) {
      this.startState = args.startState;
    }
    if (args.endState !== undefined && args.endState !== null) {
      this.endState = args.endState;
    }
    if (args.arcList !== undefined && args.arcList !== null) {
      this.arcList = Thrift.copyList(args.arcList, [Arc]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field arcList is unset!');
    }
    if (args.cachedBestPath !== undefined && args.cachedBestPath !== null) {
      this.cachedBestPath = new LatticePath(args.cachedBestPath);
    }
  }
};
TokenLattice.prototype = {};
TokenLattice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.arcList = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new Arc();
          elem70.read(input);
          this.arcList.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cachedBestPath = new LatticePath();
        this.cachedBestPath.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenLattice.prototype.write = function(output) {
  output.writeStructBegin('TokenLattice');
  if (this.startState !== null && this.startState !== undefined) {
    output.writeFieldBegin('startState', Thrift.Type.I32, 1);
    output.writeI32(this.startState);
    output.writeFieldEnd();
  }
  if (this.endState !== null && this.endState !== undefined) {
    output.writeFieldBegin('endState', Thrift.Type.I32, 2);
    output.writeI32(this.endState);
    output.writeFieldEnd();
  }
  if (this.arcList !== null && this.arcList !== undefined) {
    output.writeFieldBegin('arcList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.arcList.length);
    for (var iter71 in this.arcList)
    {
      if (this.arcList.hasOwnProperty(iter71))
      {
        iter71 = this.arcList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cachedBestPath !== null && this.cachedBestPath !== undefined) {
    output.writeFieldBegin('cachedBestPath', Thrift.Type.STRUCT, 4);
    this.cachedBestPath.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenList = function(args) {
  this.tokenList = null;
  if (args) {
    if (args.tokenList !== undefined && args.tokenList !== null) {
      this.tokenList = Thrift.copyList(args.tokenList, [Token]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokenList is unset!');
    }
  }
};
TokenList.prototype = {};
TokenList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.tokenList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new Token();
          elem78.read(input);
          this.tokenList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenList.prototype.write = function(output) {
  output.writeStructBegin('TokenList');
  if (this.tokenList !== null && this.tokenList !== undefined) {
    output.writeFieldBegin('tokenList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenList.length);
    for (var iter79 in this.tokenList)
    {
      if (this.tokenList.hasOwnProperty(iter79))
      {
        iter79 = this.tokenList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SpanLink = function(args) {
  this.tokens = null;
  this.concreteTarget = null;
  this.externalTarget = null;
  this.linkType = null;
  if (args) {
    if (args.tokens !== undefined && args.tokens !== null) {
      this.tokens = new TokenRefSequence(args.tokens);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field tokens is unset!');
    }
    if (args.concreteTarget !== undefined && args.concreteTarget !== null) {
      this.concreteTarget = new UUID(args.concreteTarget);
    }
    if (args.externalTarget !== undefined && args.externalTarget !== null) {
      this.externalTarget = args.externalTarget;
    }
    if (args.linkType !== undefined && args.linkType !== null) {
      this.linkType = args.linkType;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field linkType is unset!');
    }
  }
};
SpanLink.prototype = {};
SpanLink.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.concreteTarget = new UUID();
        this.concreteTarget.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.externalTarget = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.linkType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SpanLink.prototype.write = function(output) {
  output.writeStructBegin('SpanLink');
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 1);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.concreteTarget !== null && this.concreteTarget !== undefined) {
    output.writeFieldBegin('concreteTarget', Thrift.Type.STRUCT, 2);
    this.concreteTarget.write(output);
    output.writeFieldEnd();
  }
  if (this.externalTarget !== null && this.externalTarget !== undefined) {
    output.writeFieldBegin('externalTarget', Thrift.Type.STRING, 3);
    output.writeString(this.externalTarget);
    output.writeFieldEnd();
  }
  if (this.linkType !== null && this.linkType !== undefined) {
    output.writeFieldBegin('linkType', Thrift.Type.STRING, 4);
    output.writeString(this.linkType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tokenization = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.tokenList = null;
  this.lattice = null;
  this.kind = null;
  this.tokenTaggingList = null;
  this.parseList = null;
  this.dependencyParseList = null;
  this.spanLinkList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = new AnnotationMetadata(args.metadata);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field metadata is unset!');
    }
    if (args.tokenList !== undefined && args.tokenList !== null) {
      this.tokenList = new TokenList(args.tokenList);
    }
    if (args.lattice !== undefined && args.lattice !== null) {
      this.lattice = new TokenLattice(args.lattice);
    }
    if (args.kind !== undefined && args.kind !== null) {
      this.kind = args.kind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field kind is unset!');
    }
    if (args.tokenTaggingList !== undefined && args.tokenTaggingList !== null) {
      this.tokenTaggingList = Thrift.copyList(args.tokenTaggingList, [TokenTagging]);
    }
    if (args.parseList !== undefined && args.parseList !== null) {
      this.parseList = Thrift.copyList(args.parseList, [Parse]);
    }
    if (args.dependencyParseList !== undefined && args.dependencyParseList !== null) {
      this.dependencyParseList = Thrift.copyList(args.dependencyParseList, [DependencyParse]);
    }
    if (args.spanLinkList !== undefined && args.spanLinkList !== null) {
      this.spanLinkList = Thrift.copyList(args.spanLinkList, [SpanLink]);
    }
  }
};
Tokenization.prototype = {};
Tokenization.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenList = new TokenList();
        this.tokenList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.lattice = new TokenLattice();
        this.lattice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.kind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.tokenTaggingList = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new TokenTagging();
          elem86.read(input);
          this.tokenTaggingList.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size87 = 0;
        var _rtmp391;
        this.parseList = [];
        var _etype90 = 0;
        _rtmp391 = input.readListBegin();
        _etype90 = _rtmp391.etype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var elem93 = null;
          elem93 = new Parse();
          elem93.read(input);
          this.parseList.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.dependencyParseList = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = new DependencyParse();
          elem100.read(input);
          this.dependencyParseList.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size101 = 0;
        var _rtmp3105;
        this.spanLinkList = [];
        var _etype104 = 0;
        _rtmp3105 = input.readListBegin();
        _etype104 = _rtmp3105.etype;
        _size101 = _rtmp3105.size;
        for (var _i106 = 0; _i106 < _size101; ++_i106)
        {
          var elem107 = null;
          elem107 = new SpanLink();
          elem107.read(input);
          this.spanLinkList.push(elem107);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tokenization.prototype.write = function(output) {
  output.writeStructBegin('Tokenization');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenList !== null && this.tokenList !== undefined) {
    output.writeFieldBegin('tokenList', Thrift.Type.STRUCT, 3);
    this.tokenList.write(output);
    output.writeFieldEnd();
  }
  if (this.lattice !== null && this.lattice !== undefined) {
    output.writeFieldBegin('lattice', Thrift.Type.STRUCT, 4);
    this.lattice.write(output);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I32, 5);
    output.writeI32(this.kind);
    output.writeFieldEnd();
  }
  if (this.tokenTaggingList !== null && this.tokenTaggingList !== undefined) {
    output.writeFieldBegin('tokenTaggingList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenTaggingList.length);
    for (var iter108 in this.tokenTaggingList)
    {
      if (this.tokenTaggingList.hasOwnProperty(iter108))
      {
        iter108 = this.tokenTaggingList[iter108];
        iter108.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parseList !== null && this.parseList !== undefined) {
    output.writeFieldBegin('parseList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.parseList.length);
    for (var iter109 in this.parseList)
    {
      if (this.parseList.hasOwnProperty(iter109))
      {
        iter109 = this.parseList[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dependencyParseList !== null && this.dependencyParseList !== undefined) {
    output.writeFieldBegin('dependencyParseList', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.dependencyParseList.length);
    for (var iter110 in this.dependencyParseList)
    {
      if (this.dependencyParseList.hasOwnProperty(iter110))
      {
        iter110 = this.dependencyParseList[iter110];
        iter110.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.spanLinkList !== null && this.spanLinkList !== undefined) {
    output.writeFieldBegin('spanLinkList', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.spanLinkList.length);
    for (var iter111 in this.spanLinkList)
    {
      if (this.spanLinkList.hasOwnProperty(iter111))
      {
        iter111 = this.spanLinkList[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentence = function(args) {
  this.uuid = null;
  this.tokenization = null;
  this.textSpan = null;
  this.rawTextSpan = null;
  this.audioSpan = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.tokenization !== undefined && args.tokenization !== null) {
      this.tokenization = new Tokenization(args.tokenization);
    }
    if (args.textSpan !== undefined && args.textSpan !== null) {
      this.textSpan = new TextSpan(args.textSpan);
    }
    if (args.rawTextSpan !== undefined && args.rawTextSpan !== null) {
      this.rawTextSpan = new TextSpan(args.rawTextSpan);
    }
    if (args.audioSpan !== undefined && args.audioSpan !== null) {
      this.audioSpan = new AudioSpan(args.audioSpan);
    }
  }
};
Sentence.prototype = {};
Sentence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenization = new Tokenization();
        this.tokenization.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.rawTextSpan = new TextSpan();
        this.rawTextSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentence.prototype.write = function(output) {
  output.writeStructBegin('Sentence');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenization !== null && this.tokenization !== undefined) {
    output.writeFieldBegin('tokenization', Thrift.Type.STRUCT, 2);
    this.tokenization.write(output);
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 3);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.rawTextSpan !== null && this.rawTextSpan !== undefined) {
    output.writeFieldBegin('rawTextSpan', Thrift.Type.STRUCT, 4);
    this.rawTextSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 5);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Section = function(args) {
  this.uuid = null;
  this.sentenceList = null;
  this.textSpan = null;
  this.rawTextSpan = null;
  this.audioSpan = null;
  this.kind = null;
  this.label = null;
  this.numberList = null;
  this.lidList = null;
  if (args) {
    if (args.uuid !== undefined && args.uuid !== null) {
      this.uuid = new UUID(args.uuid);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuid is unset!');
    }
    if (args.sentenceList !== undefined && args.sentenceList !== null) {
      this.sentenceList = Thrift.copyList(args.sentenceList, [Sentence]);
    }
    if (args.textSpan !== undefined && args.textSpan !== null) {
      this.textSpan = new TextSpan(args.textSpan);
    }
    if (args.rawTextSpan !== undefined && args.rawTextSpan !== null) {
      this.rawTextSpan = new TextSpan(args.rawTextSpan);
    }
    if (args.audioSpan !== undefined && args.audioSpan !== null) {
      this.audioSpan = new AudioSpan(args.audioSpan);
    }
    if (args.kind !== undefined && args.kind !== null) {
      this.kind = args.kind;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field kind is unset!');
    }
    if (args.label !== undefined && args.label !== null) {
      this.label = args.label;
    }
    if (args.numberList !== undefined && args.numberList !== null) {
      this.numberList = Thrift.copyList(args.numberList, [null]);
    }
    if (args.lidList !== undefined && args.lidList !== null) {
      this.lidList = Thrift.copyList(args.lidList, [LanguageIdentification]);
    }
  }
};
Section.prototype = {};
Section.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.uuid = new UUID();
        this.uuid.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.sentenceList = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new Sentence();
          elem118.read(input);
          this.sentenceList.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.rawTextSpan = new TextSpan();
        this.rawTextSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.kind = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size119 = 0;
        var _rtmp3123;
        this.numberList = [];
        var _etype122 = 0;
        _rtmp3123 = input.readListBegin();
        _etype122 = _rtmp3123.etype;
        _size119 = _rtmp3123.size;
        for (var _i124 = 0; _i124 < _size119; ++_i124)
        {
          var elem125 = null;
          elem125 = input.readI32().value;
          this.numberList.push(elem125);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size126 = 0;
        var _rtmp3130;
        this.lidList = [];
        var _etype129 = 0;
        _rtmp3130 = input.readListBegin();
        _etype129 = _rtmp3130.etype;
        _size126 = _rtmp3130.size;
        for (var _i131 = 0; _i131 < _size126; ++_i131)
        {
          var elem132 = null;
          elem132 = new LanguageIdentification();
          elem132.read(input);
          this.lidList.push(elem132);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Section.prototype.write = function(output) {
  output.writeStructBegin('Section');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRUCT, 1);
    this.uuid.write(output);
    output.writeFieldEnd();
  }
  if (this.sentenceList !== null && this.sentenceList !== undefined) {
    output.writeFieldBegin('sentenceList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sentenceList.length);
    for (var iter133 in this.sentenceList)
    {
      if (this.sentenceList.hasOwnProperty(iter133))
      {
        iter133 = this.sentenceList[iter133];
        iter133.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 3);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.rawTextSpan !== null && this.rawTextSpan !== undefined) {
    output.writeFieldBegin('rawTextSpan', Thrift.Type.STRUCT, 4);
    this.rawTextSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 9);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.STRING, 5);
    output.writeString(this.kind);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 6);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.numberList !== null && this.numberList !== undefined) {
    output.writeFieldBegin('numberList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.I32, this.numberList.length);
    for (var iter134 in this.numberList)
    {
      if (this.numberList.hasOwnProperty(iter134))
      {
        iter134 = this.numberList[iter134];
        output.writeI32(iter134);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lidList !== null && this.lidList !== undefined) {
    output.writeFieldBegin('lidList', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.lidList.length);
    for (var iter135 in this.lidList)
    {
      if (this.lidList.hasOwnProperty(iter135))
      {
        iter135 = this.lidList[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TwitterUser = function(args) {
  this.id = null;
  this.name = null;
  this.screenName = null;
  this.lang = null;
  this.geoEnabled = null;
  this.createdAt = null;
  this.friendsCount = null;
  this.statusesCount = null;
  this.verified = null;
  this.listedCount = null;
  this.favouritesCount = null;
  this.followersCount = null;
  this.location = null;
  this.timeZone = null;
  this.description = null;
  this.utcOffset = null;
  this.url = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.screenName !== undefined && args.screenName !== null) {
      this.screenName = args.screenName;
    }
    if (args.lang !== undefined && args.lang !== null) {
      this.lang = args.lang;
    }
    if (args.geoEnabled !== undefined && args.geoEnabled !== null) {
      this.geoEnabled = args.geoEnabled;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.friendsCount !== undefined && args.friendsCount !== null) {
      this.friendsCount = args.friendsCount;
    }
    if (args.statusesCount !== undefined && args.statusesCount !== null) {
      this.statusesCount = args.statusesCount;
    }
    if (args.verified !== undefined && args.verified !== null) {
      this.verified = args.verified;
    }
    if (args.listedCount !== undefined && args.listedCount !== null) {
      this.listedCount = args.listedCount;
    }
    if (args.favouritesCount !== undefined && args.favouritesCount !== null) {
      this.favouritesCount = args.favouritesCount;
    }
    if (args.followersCount !== undefined && args.followersCount !== null) {
      this.followersCount = args.followersCount;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.timeZone !== undefined && args.timeZone !== null) {
      this.timeZone = args.timeZone;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.utcOffset !== undefined && args.utcOffset !== null) {
      this.utcOffset = args.utcOffset;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
TwitterUser.prototype = {};
TwitterUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.screenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.geoEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.friendsCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.statusesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.verified = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.listedCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.favouritesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.followersCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.utcOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterUser.prototype.write = function(output) {
  output.writeStructBegin('TwitterUser');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.screenName !== null && this.screenName !== undefined) {
    output.writeFieldBegin('screenName', Thrift.Type.STRING, 4);
    output.writeString(this.screenName);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 5);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  if (this.geoEnabled !== null && this.geoEnabled !== undefined) {
    output.writeFieldBegin('geoEnabled', Thrift.Type.BOOL, 6);
    output.writeBool(this.geoEnabled);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 7);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.friendsCount !== null && this.friendsCount !== undefined) {
    output.writeFieldBegin('friendsCount', Thrift.Type.I32, 8);
    output.writeI32(this.friendsCount);
    output.writeFieldEnd();
  }
  if (this.statusesCount !== null && this.statusesCount !== undefined) {
    output.writeFieldBegin('statusesCount', Thrift.Type.I32, 9);
    output.writeI32(this.statusesCount);
    output.writeFieldEnd();
  }
  if (this.verified !== null && this.verified !== undefined) {
    output.writeFieldBegin('verified', Thrift.Type.BOOL, 10);
    output.writeBool(this.verified);
    output.writeFieldEnd();
  }
  if (this.listedCount !== null && this.listedCount !== undefined) {
    output.writeFieldBegin('listedCount', Thrift.Type.I32, 11);
    output.writeI32(this.listedCount);
    output.writeFieldEnd();
  }
  if (this.favouritesCount !== null && this.favouritesCount !== undefined) {
    output.writeFieldBegin('favouritesCount', Thrift.Type.I32, 12);
    output.writeI32(this.favouritesCount);
    output.writeFieldEnd();
  }
  if (this.followersCount !== null && this.followersCount !== undefined) {
    output.writeFieldBegin('followersCount', Thrift.Type.I32, 13);
    output.writeI32(this.followersCount);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 14);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 15);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 16);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.utcOffset !== null && this.utcOffset !== undefined) {
    output.writeFieldBegin('utcOffset', Thrift.Type.I32, 18);
    output.writeI32(this.utcOffset);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 19);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterLatLong = function(args) {
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
  }
};
TwitterLatLong.prototype = {};
TwitterLatLong.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterLatLong.prototype.write = function(output) {
  output.writeStructBegin('TwitterLatLong');
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoundingBox = function(args) {
  this.type = null;
  this.coordinateList = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.coordinateList !== undefined && args.coordinateList !== null) {
      this.coordinateList = Thrift.copyList(args.coordinateList, [TwitterLatLong]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field coordinateList is unset!');
    }
  }
};
BoundingBox.prototype = {};
BoundingBox.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.coordinateList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TwitterLatLong();
          elem6.read(input);
          this.coordinateList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoundingBox.prototype.write = function(output) {
  output.writeStructBegin('BoundingBox');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.coordinateList !== null && this.coordinateList !== undefined) {
    output.writeFieldBegin('coordinateList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.coordinateList.length);
    for (var iter7 in this.coordinateList)
    {
      if (this.coordinateList.hasOwnProperty(iter7))
      {
        iter7 = this.coordinateList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlaceAttributes = function(args) {
  this.streetAddress = null;
  this.region = null;
  this.locality = null;
  if (args) {
    if (args.streetAddress !== undefined && args.streetAddress !== null) {
      this.streetAddress = args.streetAddress;
    }
    if (args.region !== undefined && args.region !== null) {
      this.region = args.region;
    }
    if (args.locality !== undefined && args.locality !== null) {
      this.locality = args.locality;
    }
  }
};
PlaceAttributes.prototype = {};
PlaceAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.streetAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locality = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlaceAttributes.prototype.write = function(output) {
  output.writeStructBegin('PlaceAttributes');
  if (this.streetAddress !== null && this.streetAddress !== undefined) {
    output.writeFieldBegin('streetAddress', Thrift.Type.STRING, 1);
    output.writeString(this.streetAddress);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.locality !== null && this.locality !== undefined) {
    output.writeFieldBegin('locality', Thrift.Type.STRING, 3);
    output.writeString(this.locality);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserMention = function(args) {
  this.startOffset = null;
  this.endOffset = null;
  this.screenName = null;
  this.name = null;
  this.id = null;
  if (args) {
    if (args.startOffset !== undefined && args.startOffset !== null) {
      this.startOffset = args.startOffset;
    }
    if (args.endOffset !== undefined && args.endOffset !== null) {
      this.endOffset = args.endOffset;
    }
    if (args.screenName !== undefined && args.screenName !== null) {
      this.screenName = args.screenName;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
UserMention.prototype = {};
UserMention.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.screenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserMention.prototype.write = function(output) {
  output.writeStructBegin('UserMention');
  if (this.startOffset !== null && this.startOffset !== undefined) {
    output.writeFieldBegin('startOffset', Thrift.Type.I32, 1);
    output.writeI32(this.startOffset);
    output.writeFieldEnd();
  }
  if (this.endOffset !== null && this.endOffset !== undefined) {
    output.writeFieldBegin('endOffset', Thrift.Type.I32, 2);
    output.writeI32(this.endOffset);
    output.writeFieldEnd();
  }
  if (this.screenName !== null && this.screenName !== undefined) {
    output.writeFieldBegin('screenName', Thrift.Type.STRING, 4);
    output.writeString(this.screenName);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 6);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

URL = function(args) {
  this.startOffset = null;
  this.endOffset = null;
  this.expandedUrl = null;
  this.url = null;
  this.displayUrl = null;
  if (args) {
    if (args.startOffset !== undefined && args.startOffset !== null) {
      this.startOffset = args.startOffset;
    }
    if (args.endOffset !== undefined && args.endOffset !== null) {
      this.endOffset = args.endOffset;
    }
    if (args.expandedUrl !== undefined && args.expandedUrl !== null) {
      this.expandedUrl = args.expandedUrl;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.displayUrl !== undefined && args.displayUrl !== null) {
      this.displayUrl = args.displayUrl;
    }
  }
};
URL.prototype = {};
URL.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.expandedUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.displayUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

URL.prototype.write = function(output) {
  output.writeStructBegin('URL');
  if (this.startOffset !== null && this.startOffset !== undefined) {
    output.writeFieldBegin('startOffset', Thrift.Type.I32, 1);
    output.writeI32(this.startOffset);
    output.writeFieldEnd();
  }
  if (this.endOffset !== null && this.endOffset !== undefined) {
    output.writeFieldBegin('endOffset', Thrift.Type.I32, 2);
    output.writeI32(this.endOffset);
    output.writeFieldEnd();
  }
  if (this.expandedUrl !== null && this.expandedUrl !== undefined) {
    output.writeFieldBegin('expandedUrl', Thrift.Type.STRING, 3);
    output.writeString(this.expandedUrl);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 4);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.displayUrl !== null && this.displayUrl !== undefined) {
    output.writeFieldBegin('displayUrl', Thrift.Type.STRING, 5);
    output.writeString(this.displayUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HashTag = function(args) {
  this.text = null;
  this.startOffset = null;
  this.endOffset = null;
  if (args) {
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.startOffset !== undefined && args.startOffset !== null) {
      this.startOffset = args.startOffset;
    }
    if (args.endOffset !== undefined && args.endOffset !== null) {
      this.endOffset = args.endOffset;
    }
  }
};
HashTag.prototype = {};
HashTag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.endOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HashTag.prototype.write = function(output) {
  output.writeStructBegin('HashTag');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.startOffset !== null && this.startOffset !== undefined) {
    output.writeFieldBegin('startOffset', Thrift.Type.I32, 2);
    output.writeI32(this.startOffset);
    output.writeFieldEnd();
  }
  if (this.endOffset !== null && this.endOffset !== undefined) {
    output.writeFieldBegin('endOffset', Thrift.Type.I32, 3);
    output.writeI32(this.endOffset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterEntities = function(args) {
  this.hashtagList = null;
  this.urlList = null;
  this.userMentionList = null;
  if (args) {
    if (args.hashtagList !== undefined && args.hashtagList !== null) {
      this.hashtagList = Thrift.copyList(args.hashtagList, [HashTag]);
    }
    if (args.urlList !== undefined && args.urlList !== null) {
      this.urlList = Thrift.copyList(args.urlList, [URL]);
    }
    if (args.userMentionList !== undefined && args.userMentionList !== null) {
      this.userMentionList = Thrift.copyList(args.userMentionList, [UserMention]);
    }
  }
};
TwitterEntities.prototype = {};
TwitterEntities.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.hashtagList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new HashTag();
          elem14.read(input);
          this.hashtagList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.urlList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new URL();
          elem21.read(input);
          this.urlList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.userMentionList = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new UserMention();
          elem28.read(input);
          this.userMentionList.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterEntities.prototype.write = function(output) {
  output.writeStructBegin('TwitterEntities');
  if (this.hashtagList !== null && this.hashtagList !== undefined) {
    output.writeFieldBegin('hashtagList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.hashtagList.length);
    for (var iter29 in this.hashtagList)
    {
      if (this.hashtagList.hasOwnProperty(iter29))
      {
        iter29 = this.hashtagList[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.urlList !== null && this.urlList !== undefined) {
    output.writeFieldBegin('urlList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.urlList.length);
    for (var iter30 in this.urlList)
    {
      if (this.urlList.hasOwnProperty(iter30))
      {
        iter30 = this.urlList[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userMentionList !== null && this.userMentionList !== undefined) {
    output.writeFieldBegin('userMentionList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userMentionList.length);
    for (var iter31 in this.userMentionList)
    {
      if (this.userMentionList.hasOwnProperty(iter31))
      {
        iter31 = this.userMentionList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterPlace = function(args) {
  this.placeType = null;
  this.countryCode = null;
  this.country = null;
  this.fullName = null;
  this.name = null;
  this.id = null;
  this.url = null;
  this.boundingBox = null;
  this.attributes = null;
  if (args) {
    if (args.placeType !== undefined && args.placeType !== null) {
      this.placeType = args.placeType;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.country !== undefined && args.country !== null) {
      this.country = args.country;
    }
    if (args.fullName !== undefined && args.fullName !== null) {
      this.fullName = args.fullName;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.boundingBox !== undefined && args.boundingBox !== null) {
      this.boundingBox = new BoundingBox(args.boundingBox);
    }
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = new PlaceAttributes(args.attributes);
    }
  }
};
TwitterPlace.prototype = {};
TwitterPlace.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.placeType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fullName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.boundingBox = new BoundingBox();
        this.boundingBox.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new PlaceAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterPlace.prototype.write = function(output) {
  output.writeStructBegin('TwitterPlace');
  if (this.placeType !== null && this.placeType !== undefined) {
    output.writeFieldBegin('placeType', Thrift.Type.STRING, 1);
    output.writeString(this.placeType);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.fullName !== null && this.fullName !== undefined) {
    output.writeFieldBegin('fullName', Thrift.Type.STRING, 4);
    output.writeString(this.fullName);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 6);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 7);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.boundingBox !== null && this.boundingBox !== undefined) {
    output.writeFieldBegin('boundingBox', Thrift.Type.STRUCT, 8);
    this.boundingBox.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 9);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterCoordinates = function(args) {
  this.type = null;
  this.coordinates = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.coordinates !== undefined && args.coordinates !== null) {
      this.coordinates = new TwitterLatLong(args.coordinates);
    }
  }
};
TwitterCoordinates.prototype = {};
TwitterCoordinates.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.coordinates = new TwitterLatLong();
        this.coordinates.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterCoordinates.prototype.write = function(output) {
  output.writeStructBegin('TwitterCoordinates');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.STRUCT, 2);
    this.coordinates.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TweetInfo = function(args) {
  this.id = null;
  this.text = null;
  this.createdAt = null;
  this.user = null;
  this.truncated = null;
  this.entities = null;
  this.source = null;
  this.coordinates = null;
  this.place = null;
  this.favorited = null;
  this.retweeted = null;
  this.retweetCount = null;
  this.inReplyToScreenName = null;
  this.inReplyToStatusId = null;
  this.inReplyToUserId = null;
  this.retweetedScreenName = null;
  this.retweetedStatusId = null;
  this.retweetedUserId = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = new TwitterUser(args.user);
    }
    if (args.truncated !== undefined && args.truncated !== null) {
      this.truncated = args.truncated;
    }
    if (args.entities !== undefined && args.entities !== null) {
      this.entities = new TwitterEntities(args.entities);
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.coordinates !== undefined && args.coordinates !== null) {
      this.coordinates = new TwitterCoordinates(args.coordinates);
    }
    if (args.place !== undefined && args.place !== null) {
      this.place = new TwitterPlace(args.place);
    }
    if (args.favorited !== undefined && args.favorited !== null) {
      this.favorited = args.favorited;
    }
    if (args.retweeted !== undefined && args.retweeted !== null) {
      this.retweeted = args.retweeted;
    }
    if (args.retweetCount !== undefined && args.retweetCount !== null) {
      this.retweetCount = args.retweetCount;
    }
    if (args.inReplyToScreenName !== undefined && args.inReplyToScreenName !== null) {
      this.inReplyToScreenName = args.inReplyToScreenName;
    }
    if (args.inReplyToStatusId !== undefined && args.inReplyToStatusId !== null) {
      this.inReplyToStatusId = args.inReplyToStatusId;
    }
    if (args.inReplyToUserId !== undefined && args.inReplyToUserId !== null) {
      this.inReplyToUserId = args.inReplyToUserId;
    }
    if (args.retweetedScreenName !== undefined && args.retweetedScreenName !== null) {
      this.retweetedScreenName = args.retweetedScreenName;
    }
    if (args.retweetedStatusId !== undefined && args.retweetedStatusId !== null) {
      this.retweetedStatusId = args.retweetedStatusId;
    }
    if (args.retweetedUserId !== undefined && args.retweetedUserId !== null) {
      this.retweetedUserId = args.retweetedUserId;
    }
  }
};
TweetInfo.prototype = {};
TweetInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TwitterUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.entities = new TwitterEntities();
        this.entities.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.coordinates = new TwitterCoordinates();
        this.coordinates.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.place = new TwitterPlace();
        this.place.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.favorited = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.retweeted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.retweetCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.inReplyToScreenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.inReplyToStatusId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.inReplyToUserId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.retweetedScreenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.retweetedStatusId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I64) {
        this.retweetedUserId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TweetInfo.prototype.write = function(output) {
  output.writeStructBegin('TweetInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 5);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 6);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.entities !== null && this.entities !== undefined) {
    output.writeFieldBegin('entities', Thrift.Type.STRUCT, 7);
    this.entities.write(output);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 8);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.STRUCT, 9);
    this.coordinates.write(output);
    output.writeFieldEnd();
  }
  if (this.place !== null && this.place !== undefined) {
    output.writeFieldBegin('place', Thrift.Type.STRUCT, 11);
    this.place.write(output);
    output.writeFieldEnd();
  }
  if (this.favorited !== null && this.favorited !== undefined) {
    output.writeFieldBegin('favorited', Thrift.Type.BOOL, 12);
    output.writeBool(this.favorited);
    output.writeFieldEnd();
  }
  if (this.retweeted !== null && this.retweeted !== undefined) {
    output.writeFieldBegin('retweeted', Thrift.Type.BOOL, 13);
    output.writeBool(this.retweeted);
    output.writeFieldEnd();
  }
  if (this.retweetCount !== null && this.retweetCount !== undefined) {
    output.writeFieldBegin('retweetCount', Thrift.Type.I32, 14);
    output.writeI32(this.retweetCount);
    output.writeFieldEnd();
  }
  if (this.inReplyToScreenName !== null && this.inReplyToScreenName !== undefined) {
    output.writeFieldBegin('inReplyToScreenName', Thrift.Type.STRING, 15);
    output.writeString(this.inReplyToScreenName);
    output.writeFieldEnd();
  }
  if (this.inReplyToStatusId !== null && this.inReplyToStatusId !== undefined) {
    output.writeFieldBegin('inReplyToStatusId', Thrift.Type.I64, 16);
    output.writeI64(this.inReplyToStatusId);
    output.writeFieldEnd();
  }
  if (this.inReplyToUserId !== null && this.inReplyToUserId !== undefined) {
    output.writeFieldBegin('inReplyToUserId', Thrift.Type.I64, 18);
    output.writeI64(this.inReplyToUserId);
    output.writeFieldEnd();
  }
  if (this.retweetedScreenName !== null && this.retweetedScreenName !== undefined) {
    output.writeFieldBegin('retweetedScreenName', Thrift.Type.STRING, 19);
    output.writeString(this.retweetedScreenName);
    output.writeFieldEnd();
  }
  if (this.retweetedStatusId !== null && this.retweetedStatusId !== undefined) {
    output.writeFieldBegin('retweetedStatusId', Thrift.Type.I64, 20);
    output.writeI64(this.retweetedStatusId);
    output.writeFieldEnd();
  }
  if (this.retweetedUserId !== null && this.retweetedUserId !== undefined) {
    output.writeFieldBegin('retweetedUserId', Thrift.Type.I64, 21);
    output.writeI64(this.retweetedUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


UUID = function(args) {
  this.uuidString = null;
  if (args) {
    if (args.uuidString !== undefined && args.uuidString !== null) {
      this.uuidString = args.uuidString;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uuidString is unset!');
    }
  }
};
UUID.prototype = {};
UUID.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuidString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UUID.prototype.write = function(output) {
  output.writeStructBegin('UUID');
  if (this.uuidString !== null && this.uuidString !== undefined) {
    output.writeFieldBegin('uuidString', Thrift.Type.STRING, 1);
    output.writeString(this.uuidString);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

;/**
 * @class Communication
 * @classdesc concrete.js extensions to the Communication class
 */


/**
 * Adds internal references between data structures contained in Communication
 *
 * Specifically, adds:
 *   - to each concrete.Section, a section.communication reference to the enclosing Communication
 *   - to each concrete.Sentence, a sentence.section reference to the enclosing Section
 *   - to each concrete.Tokenization, a tokenization.sentence reference to the enclosing Sentence
 */
Communication.prototype.addInternalReferences = function() {
  if (this.sectionList) {
    for (var sectionIndex in this.sectionList) {
      var section = this.sectionList[sectionIndex];
      // We add both a 'comm' and 'communication' field to each section.  We
      // originally only added 'comm', but 'communication' is arguably more
      // consistent.  We keep both variable names to avoid breaking existing code.
      section.comm = this;
      section.communication = this;

      if (section.sentenceList) {
        for (var sentenceIndex in section.sentenceList) {
          var sentence = section.sentenceList[sentenceIndex];
          sentence.section = section;
          if (sentence.tokenization) {
            sentence.tokenization.sentence = sentence;
          }
        }
      }
    }
  }
};


/**
 * Return the Entity (or null) that has an EntityMention with the specified UUID
 * @param {UUID} uuid
 * @returns {Entity|null}
 */
Communication.prototype.getEntityForEntityMentionUUID = function(uuid) {
  if (!uuid || !uuid.uuidString) {
    console.error("ERROR: getEntityForEntityMentionUUID() was not passed a valid UUID");
    return null;
  }

  if (this.entitySetList) {
    for (var entitySetIndex in this.entitySetList) {
      var entityList = this.entitySetList[entitySetIndex].entityList;
      for (var entityIndex in entityList) {
        var entity = entityList[entityIndex];
        for (var entityMentionIndex in entity.mentionIdList) {
          if (entity.mentionIdList[entityMentionIndex].uuidString === uuid.uuidString) {
            return entity;
          }
        }
      }
    }
  }
  // TODO: Error handling if no matching UUID could be found
  console.error("ERROR: No Entity found for EntityMention with UUID " + uuid.uuidString);
  return null;
};


/**
 * Return the EntityMentionSet in the Communication with the specified toolname
 * @param {String} toolname
 * @returns {EntityMentionSet|null}
 */
Communication.prototype.getEntityMentionSetWithToolname = function(toolname) {
  if (this.entityMentionSetList && this.entityMentionSetList.length > 0) {
    for (var i = 0; i < this.entityMentionSetList.length; i++) {
      if (this.entityMentionSetList[i].metadata.tool === toolname) {
        return this.entityMentionSetList[i];
      }
    }
  }
  return null;
};


/**
 * Return the EntityMention (or null) with the specified UUID
 * @param {UUID} uuid
 * @returns {EntityMention|null}
 */
Communication.prototype.getEntityMentionWithUUID = function(uuid) {
  if (!uuid || !uuid.uuidString) {
    console.error("ERROR: getEntityMentionWithUUID() was not passed a valid UUID");
    return null;
  }

  if (this.entityMentionSetList) {
    for (var entityMentionSetIndex in this.entityMentionSetList) {
      if (this.entityMentionSetList[entityMentionSetIndex].mentionList) {
        for (var mentionListIndex in this.entityMentionSetList[entityMentionSetIndex].mentionList) {
          var entityMention = this.entityMentionSetList[entityMentionSetIndex].mentionList[mentionListIndex];
          if (entityMention.uuid.uuidString == uuid.uuidString) {
            return entityMention;
          }
        }
      }
    }
  }
  // TODO: Error handling if no matching UUID could be found
  console.error("ERROR: No EntityMention found with UUID " + uuid.uuidString);
  return null;
};


/**
 * Return the first Sentence in a Communication if it exists, or null
 * @returns {Sentence|null}
 */
Communication.prototype.getFirstSentence = function() {
  // The first few Sections may be empty, so we need to iterate over Sections
  if (this.sectionList && this.sectionList.length) {
    for (var i = 0; i < this.sectionList.length; i++) {
      if (this.sectionList[i].sentenceList && this.sectionList[i].sentenceList.length) {
        return this.sectionList[i].sentenceList[0];
      }
    }
  }
  return null;
};


/**
 * Return the first Tokenization in a Communication if it exists, or null
 * @returns {Tokenization|null}
 */
Communication.prototype.getFirstTokenization = function() {
  var firstSentence = this.getFirstSentence();
  if (firstSentence) {
    return firstSentence.tokenization;
  }
  else {
    return null;
  }
};


/**
 * Return the Sentence (or null) with the specified UUID
 * @param {UUID} uuid
 * @returns {Sentence|null}
 */
Communication.prototype.getSentenceWithUUID = function(uuid) {
  if (!uuid || !uuid.uuidString) {
    console.error("ERROR: getSentenceWithUUID() was not passed a valid UUID");
    return null;
  }

  if (this.sectionList) {
    for (var sectionListIndex in this.sectionList) {
      var section = this.sectionList[sectionListIndex];
      if (section.sentenceList) {
        for (var sentenceIndex in section.sentenceList) {
          var sentence = section.sentenceList[sentenceIndex];
          if (sentence.uuid.uuidString == uuid.uuidString) {
            return sentence;
          }
        }
      }
    }
  }
  // TODO: Error handling if no matching UUID could be found
  console.error("ERROR: No Sentence found with UUID " + uuid.uuidString);
  return null;
};


/**
 * Return the SituationMention (or null) with the specified UUID
 * @param {UUID} uuid
 * @returns {SituationMention|null}
 */
Communication.prototype.getSituationMentionWithUUID = function(uuid) {
  if (!uuid || !uuid.uuidString) {
    console.error("ERROR: getSituationMentionWithUUID() was not passed a valid UUID");
    return null;
  }

  if (this.situationMentionSetList) {
    for (var situationMentionSetIndex in this.situationMentionSetList) {
      var situationMentionSet = this.situationMentionSetList[situationMentionSetIndex];
      for (var mentionListIndex in situationMentionSet.mentionList) {
        var mention = situationMentionSet.mentionList[mentionListIndex];
        if (mention.uuid.uuidString === uuid.uuidString) {
          return mention;
        }
      }
    }
  }
  // TODO: Error handling if no matching UUID could be found
  console.error("ERROR: No SituationMention found with UUID " + uuid.uuidString);
  return null;
};


/**
 * Return all Tokenizations in a Communication as a (flat) list
 * @returns {List}
 */
Communication.prototype.getTokenizationsAsList = function() {
  var tokenizations = [];

  if (this.sectionList && this.sectionList.length) {
    for (var i = 0; i < this.sectionList.length; i++) {
      if (this.sectionList[i].sentenceList && this.sectionList[i].sentenceList.length) {
        for (var j = 0; j < this.sectionList[i].sentenceList.length; j++) {
          if (this.sectionList[i].sentenceList[j].tokenization) {
            tokenizations.push(this.sectionList[i].sentenceList[j].tokenization);
          }
        }
      }
    }
  }

  return tokenizations;
};

/**
 * Return the Tokenization (or null) with the specified UUID
 * @param {UUID} uuid
 * @returns {Tokenization|null}
 */
Communication.prototype.getTokenizationWithUUID = function(uuid) {
  if (!uuid || !uuid.uuidString) {
    console.error("ERROR: getTokenizationWithUUID() was not passed a valid UUID");
    return null;
  }

  if (this.sectionList) {
    for (var sectionListIndex in this.sectionList) {
      var section = this.sectionList[sectionListIndex];
      if (section.sentenceList) {
        for (var sentenceIndex in section.sentenceList) {
          var sentence = section.sentenceList[sentenceIndex];
          if (sentence.tokenization && sentence.tokenization.uuid.uuidString == uuid.uuidString) {
            return sentence.tokenization;
          }
        }
      }
    }
  }
  // TODO: Error handling if no matching UUID could be found
  console.error("ERROR: No Tokenization found with UUID " + uuid.uuidString);
  return null;
};


/**
 * Get list of token text strings for the EntityMention specified by the UUID
 * @param {UUID} mentionId
 * @returns {Array} An array of token text strings
 */
Communication.prototype.getTokensForEntityMentionID = function(mentionId) {
  var entityMention = this.getEntityMentionWithUUID(mentionId);
  var tokenization = this.getTokenizationWithUUID(entityMention.tokens.tokenizationId);

  var tokens = [];

  for (var tokenIndex in entityMention.tokens.tokenIndexList) {
    tokens.push(tokenization.tokenList.tokenList[entityMention.tokens.tokenIndexList[tokenIndex]].text);
  }
  return tokens;
};


/**
 * Initialize Communication from a TJSONProtocol object created from a Communication.
 *
 * Thrift's TJSONProtocol is used to serialize objects to JSON.  The objects look
 * something like this:
 *    {
 *     "1":{"str":"tests/testdata/serif_dog-bites-man.xml"},
 *     "2":{"rec":{"1":{"str":"a90d397a-560f-44a0-baae-c82a34e4be09"}}},
 *     "3":{"str":"CommunicationType.OTHER"},
 *     ...
 *    }
 *
 * @param {Object} commJSONObject - An object created from a Communication using TJSONProtocol
 * @returns {Communication} - This Communication
 */
Communication.prototype.initFromTJSONProtocolObject = function(commJSONObject) {
  // We convert the JSON object to a JSON string, and then
  // initFromTJSONProtocol converts the JSON string back to a JSON
  // object.  This is done deliberately.  We create a copy of the
  // original JSON object, and this copy is then destructively
  // modified by Communication.read().
  return this.initFromTJSONProtocolString(JSON.stringify(commJSONObject));
};


/**
 * Initialize Communication from a TJSONProtocol string created from a Communication
 * @param {String} commJSONString - A JSON string created from a Communication using TJSONProtocol
 * @returns {Communication} - This Communication
 */
Communication.prototype.initFromTJSONProtocolString = function(commJSONString) {
  var commJSONObject = JSON.parse(commJSONString);
  var transport = new Thrift.Transport();
  var protocol = new Thrift.TJSONProtocol(transport);

  // The values for these protocol object fields was determined by
  // mucking around with the JavaScript debugger to figure out how
  // Thrift RPC calls used TJSONProtocol objects.
  protocol.rpos = [];

  // The object stored in protocol.rstack[] is destructively modified
  // by Communication.read()
  protocol.rstack = [commJSONObject];

  this.read(protocol);

  return this;
};


/**
 * Returns JSON object for Communication serialized using TJSONProtocol
 * @returns {Object}
 */
Communication.prototype.toTJSONProtocolObject = function() {
  return JSON.parse(this.toTJSONProtocolString());
};


/**
 * Returns JSON string for Communication serialized using TJSONProtocol
 * @returns {String}
 */
Communication.prototype.toTJSONProtocolString = function() {
  var transport = new Thrift.Transport();
  var protocol = new Thrift.TJSONProtocol(transport);
  protocol.tpos = [];
  protocol.tstack = [];
  this.write(protocol);

  return protocol.tstack[0];
};
;/**
 * @namespace concrete.widget
 */

var concrete = concrete || {};

concrete.widget = (function() {
    var widget = {};

    /**
     * Returns a jQuery object containing the DOM structure:
     * <pre>
     *     &lt;div class="communication communication_[COMMUNICATION_UUID]"&gt;
     *         &lt;div class="section section_[SECTION_UUID]"&gt;
     *             [...]
     *         &lt;div class="section section_[SECTION_UUID]"&gt;
     *             [...]
     * </pre>
     * createCommunicationDiv() calls createSectionDiv() to create the
     * DOM structure for the Sections.
     *
     * @memberof concrete.widget
     * @param {Communication} communication
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    widget.createCommunicationDiv = function(communication, options) {
        if (!communication) {
            throw 'ERROR: CreateWidgets.createCommunicationDiv() must be passed a communication';
        }

        var communicationDiv = $('<div>')
            .addClass('communication communication_' + communication.uuid.uuidString);

        if (communication.sectionList && communication.sectionList.length) {
            for (var i = 0; i < communication.sectionList.length; i++) {
                communicationDiv.append(
                    widget.createSectionDiv(communication.sectionList[i], options));
            }
        }
        else {
            console.log('WARNING: CreateWidgets.createCommunicationsDiv() was passed a Communication ' +
                        'without any Sections');
        }

        return communicationDiv;
    };

    /**
     * Returns a jQuery object containing the DOM structure:
     * <pre>
     *     &lt;div class="section section_[SECTION_UUID]"&gt;
     *         &lt;div class="sentence sentence_[SENTENCE_UUID]"&gt;
     *             [...]
     *         &lt;span class="sentence_padding"&gt; &lt;/span&gt;
     *         &lt;div class="sentence sentence_[SENTENCE_UUID]"&gt;
     *             [...]
     * </pre>
     * createSectionDiv() calls createSentenceDiv() to create the
     * DOM structure for the Sentence.
     *
     * @memberof concrete.widget
     * @param {Section} section
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    widget.createSectionDiv = function(section, options) {
        if (!section) {
            throw 'CreateWidgets.createSectionDiv() must be passed a section';
        }

        var opts = $.extend({}, widget.createSectionDiv.defaultOptions, options);

        var textSpansUsed = false;
        if (section.sentenceList.length > 0) {
            textSpansUsed = concreteObjectUsesTextSpans(section.sentenceList[0]);
        }

        var sectionDiv = $('<div>')
            .addClass('section section_' + section.uuid.uuidString);

        for (var i = 0; i < section.sentenceList.length; i++) {
            sectionDiv.append(
                widget.createSentenceDiv(section.sentenceList[i], options));

            if (i+1 < section.sentenceList.length) {
                if (textSpansUsed && !opts.whitespaceTokenization) {
                    // Add whitespace IFF there is a character-offset gap between sentences
                    if ((section.sentenceList[i+1].textSpan.start - section.sentenceList[i].textSpan.ending) > 0) {
                        sectionDiv.append(
                            $('<span>')
                                .addClass('sentence_padding')
                                .text(' '));
                    }
                }
            }
        }

        return sectionDiv;
    };

    widget.createSectionDiv.defaultOptions = {
        'whitespaceTokenization': false,
    };

    /**
     * Returns a jQuery object containing the DOM structure:
     * <pre>
     *     &lt;div class="sentence sentence_[SENTENCE_UUID]"&gt;
     *         &lt;div class="tokenization tokenization_[TOKENIZATION_UUID]"&gt;
     *             [...]
     * </pre>
     * createSentenceDiv() calls createTokenizationDiv() to create the
     * DOM structure for the Sentence's Tokenization.
     *
     * @memberof concrete.widget
     * @param {Sentence} sentence
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    widget.createSentenceDiv = function(sentence, options) {
        if (!sentence) {
            throw 'CreateWidgets.createSentenceDiv() must be passed a sentence';
        }

        var sentenceDiv = $('<div>')
            .addClass('sentence sentence_' + sentence.uuid.uuidString)
            .append(widget.createTokenizationDiv(sentence.tokenization, options));
        return sentenceDiv;
    };

    /**
     * Returns a jQuery object containing the DOM structure:
     * <pre>
     *     &lt;div class="tokenization tokenization_[TOKENIZATION_UUID]"&gt;
     *         &lt;span class="token tokenization_[TOKENIZATION_UUID]_[TOKEN_INDEX_0]"&gt;
     *         &lt;span class="token_padding"&gt;
     *         &lt;span class="token tokenization_[TOKENIZATION_UUID]_[TOKEN_INDEX_1]"&gt;
     *         &lt;span class="token_padding"&gt;
     *         [...]
     * </pre>
     *
     * @memberof concrete.widget
     * @param {Tokenization} tokenization
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    widget.createTokenizationDiv = function(tokenization, options) {
        if (!tokenization) {
            throw 'CreateWidgets.createTokenizationDiv() must be passed a tokenization';
        }

        var opts = $.extend({}, widget.createTokenizationDiv.defaultOptions, options);
        var textSpansUsed = tokenizationUsesTextSpans(tokenization);
        var tokenList = tokenization.tokenList.tokenList;

        var tokenizationDiv = $('<div>')
            .addClass('tokenization tokenization_' + tokenization.uuid.uuidString)
            .data('tokenization', tokenization);

        for (var i = 0; i < tokenList.length; i++) {
            var tokenText;
            if (opts.convertTreebankBrackets) {
                tokenText = convertTreebankBrackets(tokenList[i].text);
            }
            else {
                tokenText = tokenList[i].text;
            }

            var tokenSpan = $('<span>')
                .addClass('token tokenization_' + tokenization.uuid.uuidString + '_' + i)
                .data('tokenization', tokenization)
                .data('tokenIndex', i)
                .text(tokenText);
            tokenizationDiv.append(tokenSpan);

            if (i+1 < tokenList.length) {
                var tokenPaddingSpan = $('<span>')
                    .addClass('token_padding');

                if (textSpansUsed && !opts.whitespaceTokenization) {
                    // Add whitespace IFF there is a character-offset gap between tokens
                    if ((tokenList[i+1].textSpan.start - tokenList[i].textSpan.ending) > 0) {
                        tokenPaddingSpan.text(' ');
                    }
                }
                else {
                    // Without TextSpans, we can't determine character offsets between
                    // tokens, so we default to using whitespace tokenization
                    tokenPaddingSpan.text(' ');
                }
                tokenizationDiv.append(tokenPaddingSpan);
            }
        }
        return tokenizationDiv;
    };

    widget.createTokenizationDiv.defaultOptions = {
        'convertTreebankBrackets': true,
        'whitespaceTokenization': false,
    };

    /**
     * Returns a boolean indicating if a Concrete Object (e.g. Section, Sentence, Token)
     * uses an (optional) TextSpan field.
     *
     * @param {Concrete_Object} concreteObject
     * @returns {Boolean}
     */
    function concreteObjectUsesTextSpans(concreteObject) {
        if (concreteObject &&
            concreteObject.textSpan &&
            concreteObject.textSpan.start &&
            concreteObject.textSpan.ending) {
            return true;
        }
        else {
            return false;
        }
    }

    /**
     * Function takes a token string, returns a "cleaned" version of that string
     *  with Penn Treebank-style bracket symbols replaced with actual bracket symbols.
     *
     * @param {String} tokenText
     * @returns {String}
     */
    function convertTreebankBrackets(tokenText) {
        // Convert Penn Treebank-style symbols for brackets to bracket characters
        //   http://www.cis.upenn.edu/~treebank/tokenization.html
        switch(tokenText) {
        case '-LRB-':
            return '(';
        case '-RRB-':
            return ')';
        case '-LSB-':
            return '[';
        case '-RSB-':
            return ']';
        case '-LCB-':
            return '{';
        case '-RCB-':
            return '}';
        default:
            return tokenText;
        }
    }

    /**
     * Returns a boolean indicating if a Tokenization's Tokens use (optional) TextSpans
     * @param {Tokenization} tokenization
     * @returns {Boolean}
     */
    function tokenizationUsesTextSpans(tokenization) {
        // We currently assume that if the first Token has a TextSpan, all Tokens have TextSpans
        return concreteObjectUsesTextSpans(tokenization.tokenList.tokenList[0]);
    }

    return widget;
})();


/**
 * See (http://jquery.com/).
 * @name jQuery
 * @class
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 */

/**
 * See (http://jquery.com/)
 * @name fn
 * @class
 * See the jQuery Library  (http://jquery.com/) for full details.  This just
 * documents the function and classes that are added to jQuery by this plug-in.
 * @memberOf jQuery
 */

(function($) {
    /**
     * @memberOf jQuery.fn
     * @param {Communication} communication
     * @returns {jQuery_Object}
     */
    $.fn.addAllEntityMentionsInCommunication = function(communication) {
        if (communication && communication.entityMentionSetList && communication.entityMentionSetList.length > 0) {
            for (var i = 0; i < communication.entityMentionSetList.length; i++) {
                $.fn.addEntityMentionSet(communication.entityMentionSetList[i]);
            }
        }
        return this;
    };

    /**
     * @memberOf jQuery.fn
     * @param {EntityMention} entityMention
     * @returns {jQuery_Object}
     */
    $.fn.addEntityMention = function(entityMention) {
        $.fn.getEntityMentionElements(entityMention)
            .addClass('entity_mention entity_mention_' + entityMention.uuid.uuidString);
        return this;
    };

    /**
     * @memberOf jQuery.fn
     * @param {EntityMentionSet} entityMentionSet
     * @returns {jQuery_Object}
     */
    $.fn.addEntityMentionSet = function(entityMentionSet) {
        if (entityMentionSet && entityMentionSet.mentionList && entityMentionSet.mentionList.length > 0) {
            for (var i = 0; i < entityMentionSet.mentionList.length; i++) {
                $.fn.addEntityMention(entityMentionSet.mentionList[i]);
            }
        }
        return this;
    };

    /**
     * @memberOf jQuery.fn
     * @param {Communication} communication
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    $.fn.communicationWidget = function(communication, options) {
        this.append(concrete.widget.createCommunicationDiv(communication, options));
        return this;
    };

    /**
     * @memberOf jQuery.fn
     * @param {EntityMention} entityMention
     * @returns {jQuery_Object}
     */
    $.fn.getEntityMentionElements = function(entityMention) {
        return $.fn.getTokenRefSequenceElements(entityMention.tokens);
    };

    /**
     * @memberOf jQuery.fn
     * @param {Sentence} sentence
     * @returns {jQuery_Object}
     */
    $.fn.getSentenceElements = function(sentence) {
        return this.find('.sentence.sentence_' + sentence.uuid.uuidString);
    };

    /**
     * Returns a jQuery object for DOM element(s) specified by tokenization+tokenIndex
     *
     * @memberOf jQuery.fn
     * @param {Tokenization} tokenization
     * @param {int} tokenIndex
     * @returns {jQuery_Object} - jQuery Object for DOM element(s) for tokenization+tokenIndex
     */
    $.fn.getTokenElementsWithIndex = function(tokenization, tokenIndex) {
        if (!tokenization) {
            return $();
        }

        return this.find('.tokenization_' + tokenization.uuid.uuidString + '_' + tokenIndex);
    };

    /**
     * Returns a jQuery object for the DOM elements for the Tokens in a Tokenization,
     * selecting only those Tokens whose TokenTagging tags satisfy the specified
     * matchFunction.
     *
     * @memberOf jQuery.fn
     * @param {Tokenization} tokenization
     * @param {TokenTagging} tokenTagging - The TokenTagging must be for the Tokenization
     *                                      specified as the first parameter.
     * @param {Function} matchFunction - Function that takes as input a TaggedToken.tag string,
     *                                   and returns true or false based on whether or not the
     *                                   string "matches".
     * @returns {jQuery_Object} - jQuery Object for DOM elements for "matching" Tokens
     */
    $.fn.getTokenElementsWithMatchingTag = function(tokenization, tokenTagging, matchFunction) {
        if (!tokenization || !tokenTagging || !tokenTagging.taggedTokenList || !matchFunction) {
            return $();
        }

        var tokenSelectorStrings = [];
        for (var i = 0; i < tokenTagging.taggedTokenList.length; i++) {
            if (matchFunction(tokenTagging.taggedTokenList[i].tag)) {
                tokenSelectorStrings.push(
                    '.tokenization_' + tokenization.uuid.uuidString +
                        '_' + tokenTagging.taggedTokenList[i].tokenIndex);
            }
        }

        var tokenizationObject = this.find('.tokenization_' + tokenization.uuid.uuidString);
        var tokenObjects = tokenizationObject.find(tokenSelectorStrings.join(', '));

        return tokenObjects;
    };

    /**
     * @memberOf jQuery.fn
     * @param {Tokenization} tokenization
     * @returns {jQuery_Object}
     */
    $.fn.getTokenizationElements = function(tokenization) {
        return this.find('.tokenization.tokenization_' + tokenization.uuid.uuidString);
    };

    /**
     * @memberOf jQuery.fn
     * @param {Tokenization} tokenization
     * @returns {jQuery_Object}
     */
    $.fn.getTokenElements = function(tokenization) {
        return this.getTokenizationElements(tokenization).find('.token');
    };

    /**
     * @memberOf jQuery.fn
     * @param {TokenRefSequence} tokenRefSequence
     * @returns {jQuery_Object}
     */
    $.fn.getTokenRefSequenceElements = function(tokenRefSequence) {
        if (!tokenRefSequence && !tokenRefSequence.tokenizationId) {
            return $();
        }

        var tokenSelectorStrings = [];
        for (var i = 0; i < tokenRefSequence.tokenIndexList.length; i++) {
            tokenSelectorStrings.push(
                '.tokenization_' + tokenRefSequence.tokenizationId.uuidString +
                    '_' + tokenRefSequence.tokenIndexList[i]);
        }

        var tokenizationObject = this.find('.tokenization_' + tokenRefSequence.tokenizationId.uuidString);
        var tokenObjects = tokenizationObject.find(tokenSelectorStrings.join(', '));

        return tokenObjects;
    };

    /**
     * @memberOf jQuery.fn
     * @param {Section} section
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    $.fn.sectionWidget = function(section, options) {
        this.append(concrete.widget.createSectionDiv(section, options));
        return this;
    };

    /**
     * @memberOf jQuery.fn
     * @param {Sentence} sentence
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    $.fn.sentenceWidget = function(sentence, options) {
        this.append(concrete.widget.createSentenceDiv(sentence, options));
        return this;
    };

    /**
     * @memberOf jQuery.fn
     * @param {Tokenization} tokenization
     * @param {Object} options
     * @returns {jQuery_Object}
     */
    $.fn.tokenizationWidget = function(tokenization, options) {
        this.append(concrete.widget.createTokenizationDiv(tokenization, options));
        return this;
    };

})(jQuery);
;/**
 * Generate a Concrete UUID
 * @returns {UUID}
 */
var generateUUID = function() {
  var uuid = new UUID();
  uuid.uuidString = generateUUIDString();
  return uuid;
};

/**
 * Generate a UUID string
 *  Code based on the uuid.core.js script from MIT licensed project 'UUID.js':
 *    https://github.com/LiosK/UUID.js
 * @returns {String}
 */
var generateUUIDString = function() {
  /**
   * Returns an unsigned x-bit random integer.
   * @param {int} x A positive integer ranging from 0 to 53, inclusive.
   * @returns {int} An unsigned x-bit random integer (0 <= f(x) < 2^x).
   */
  function rand(x) {  // _getRandomInt
    if (x <   0) return NaN;
    if (x <= 30) return (0 | Math.random() * (1 <<      x));
    if (x <= 53) return (0 | Math.random() * (1 <<     30)) +
      (0 | Math.random() * (1 << x - 30)) * (1 << 30);
    return NaN;
  }

  /**
   * Converts an integer to a zero-filled hexadecimal string.
   * @param {int} num
   * @param {int} length
   * @returns {string}
   */
  function hex(num, length) { // _hexAligner
    var str = num.toString(16), i = length - str.length, z = "0";
    for (; i > 0; i >>>= 1, z += z) { if (i & 1) { str = z + str; } }
    return str;
  }

  return  hex(rand(32), 8) +    // time_low
    "-" +
    hex(rand(16), 4) +          // time_mid
    "-" +
    hex(0x4000 | rand(12), 4) + // time_hi_and_version
    "-" +
    hex(0x8000 | rand(14), 4) + // clock_seq_hi_and_reserved clock_seq_low
    "-" +
    hex(rand(48), 12);        // node
};
;/**
 * @class Tokenization
 * @classdesc concrete.js extensions to the Tokenization class
 */

/**
 * Get all TokenTaggings with the specified taggingType
 * @param {String} taggingType - A string specifying a TokenTagging.taggingType
 * @returns {Array} A (possibly empty) array of TokenTagging objects
 */
Tokenization.prototype.getTokenTaggingsOfType = function(taggingType) {
  var tokenTaggings = [];

  for (var tokenTaggingIndex in this.tokenTaggingList) {
    if (this.tokenTaggingList[tokenTaggingIndex].taggingType === taggingType) {
      tokenTaggings.push(this.tokenTaggingList[tokenTaggingIndex]);
    }
  }

  return tokenTaggings;
};
;/**
 * @class TokenTagging
 * @classdesc concrete.js extensions to the TokenTagging class
 */

/** Return the TaggedToken (or null) with the specified tokenIndex
 * @param {Number} tokenIndex
 * @returns {TaggedToken|null}
 */
TokenTagging.prototype.getTaggedTokenWithTokenIndex = function(tokenIndex) {
  for (var i = 0; i < this.taggedTokenList.length; i++) {
    if (this.taggedTokenList[i].tokenIndex === tokenIndex) {
      return this.taggedTokenList[i];
    }
  }
  return null;
};


/** Sets the tag of the TaggedToken with the specified tokenIndex.
 *  If a TaggedToken with the specified tokenIndex does not exist,
 *  than it will be created.
 * @param {String} tagText
 * @param {Number} tokenIndex
 */
TokenTagging.prototype.setTaggedTokenTag = function(tagText, tokenIndex) {
  var taggedToken = this.getTaggedTokenWithTokenIndex(tokenIndex);
  if (!taggedToken) {
    taggedToken = new TaggedToken();
    taggedToken.tokenIndex = tokenIndex;
    this.taggedTokenList.push(taggedToken);
  }
  taggedToken.tag = tagText;
};
