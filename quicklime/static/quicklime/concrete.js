//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

CommunicationService_readComm_args = function(args) {
};
CommunicationService_readComm_args.prototype = {};
CommunicationService_readComm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationService_readComm_args.prototype.write = function(output) {
  output.writeStructBegin('CommunicationService_readComm_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommunicationService_readComm_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CommunicationService_readComm_result.prototype = {};
CommunicationService_readComm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Communication();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationService_readComm_result.prototype.write = function(output) {
  output.writeStructBegin('CommunicationService_readComm_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommunicationService_writeComm_args = function(args) {
  this.comm = null;
  if (args) {
    if (args.comm !== undefined) {
      this.comm = args.comm;
    }
  }
};
CommunicationService_writeComm_args.prototype = {};
CommunicationService_writeComm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.comm = new Communication();
        this.comm.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationService_writeComm_args.prototype.write = function(output) {
  output.writeStructBegin('CommunicationService_writeComm_args');
  if (this.comm !== null && this.comm !== undefined) {
    output.writeFieldBegin('comm', Thrift.Type.STRUCT, 1);
    this.comm.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommunicationService_writeComm_result = function(args) {
};
CommunicationService_writeComm_result.prototype = {};
CommunicationService_writeComm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommunicationService_writeComm_result.prototype.write = function(output) {
  output.writeStructBegin('CommunicationService_writeComm_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommunicationServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
CommunicationServiceClient.prototype = {};
CommunicationServiceClient.prototype.readComm = function(callback) {
  if (callback === undefined) {
    this.send_readComm();
    return this.recv_readComm();
  } else {
    var postData = this.send_readComm(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_readComm);
  }
};

CommunicationServiceClient.prototype.send_readComm = function(callback) {
  this.output.writeMessageBegin('readComm', Thrift.MessageType.CALL, this.seqid);
  var args = new CommunicationService_readComm_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CommunicationServiceClient.prototype.recv_readComm = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CommunicationService_readComm_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'readComm failed: unknown result';
};
CommunicationServiceClient.prototype.writeComm = function(comm, callback) {
  if (callback === undefined) {
    this.send_writeComm(comm);
    this.recv_writeComm();
  } else {
    var postData = this.send_writeComm(comm, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_writeComm);
  }
};

CommunicationServiceClient.prototype.send_writeComm = function(comm, callback) {
  this.output.writeMessageBegin('writeComm', Thrift.MessageType.CALL, this.seqid);
  var args = new CommunicationService_writeComm_args();
  args.comm = comm;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

CommunicationServiceClient.prototype.recv_writeComm = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new CommunicationService_writeComm_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Sound = function(args) {
  this.wav = null;
  this.mp3 = null;
  this.sph = null;
  this.path = null;
  if (args) {
    if (args.wav !== undefined) {
      this.wav = args.wav;
    }
    if (args.mp3 !== undefined) {
      this.mp3 = args.mp3;
    }
    if (args.sph !== undefined) {
      this.sph = args.sph;
    }
    if (args.path !== undefined) {
      this.path = args.path;
    }
  }
};
Sound.prototype = {};
Sound.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.wav = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mp3 = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sph = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sound.prototype.write = function(output) {
  output.writeStructBegin('Sound');
  if (this.wav !== null && this.wav !== undefined) {
    output.writeFieldBegin('wav', Thrift.Type.STRING, 1);
    output.writeBinary(this.wav);
    output.writeFieldEnd();
  }
  if (this.mp3 !== null && this.mp3 !== undefined) {
    output.writeFieldBegin('mp3', Thrift.Type.STRING, 2);
    output.writeBinary(this.mp3);
    output.writeFieldEnd();
  }
  if (this.sph !== null && this.sph !== undefined) {
    output.writeFieldBegin('sph', Thrift.Type.STRING, 3);
    output.writeBinary(this.sph);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 4);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Communication = function(args) {
  this.id = null;
  this.uuid = null;
  this.type = null;
  this.text = null;
  this.startTime = null;
  this.endTime = null;
  this.lids = null;
  this.sectionSegmentations = null;
  this.entityMentionSets = null;
  this.entitySets = null;
  this.situationMentionSets = null;
  this.situationSets = null;
  this.sound = null;
  this.tweetInfo = null;
  this.emailInfo = null;
  this.keyValueMap = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.startTime !== undefined) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined) {
      this.endTime = args.endTime;
    }
    if (args.lids !== undefined) {
      this.lids = args.lids;
    }
    if (args.sectionSegmentations !== undefined) {
      this.sectionSegmentations = args.sectionSegmentations;
    }
    if (args.entityMentionSets !== undefined) {
      this.entityMentionSets = args.entityMentionSets;
    }
    if (args.entitySets !== undefined) {
      this.entitySets = args.entitySets;
    }
    if (args.situationMentionSets !== undefined) {
      this.situationMentionSets = args.situationMentionSets;
    }
    if (args.situationSets !== undefined) {
      this.situationSets = args.situationSets;
    }
    if (args.sound !== undefined) {
      this.sound = args.sound;
    }
    if (args.tweetInfo !== undefined) {
      this.tweetInfo = args.tweetInfo;
    }
    if (args.emailInfo !== undefined) {
      this.emailInfo = args.emailInfo;
    }
    if (args.keyValueMap !== undefined) {
      this.keyValueMap = args.keyValueMap;
    }
  }
};
Communication.prototype = {};
Communication.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.lids = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new LanguageIdentification();
          elem6.read(input);
          this.lids.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.sectionSegmentations = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new SectionSegmentation();
          elem13.read(input);
          this.sectionSegmentations.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.entityMentionSets = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new EntityMentionSet();
          elem20.read(input);
          this.entityMentionSets.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.entitySets = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new EntitySet();
          elem27.read(input);
          this.entitySets.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.situationMentionSets = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new SituationMentionSet();
          elem34.read(input);
          this.situationMentionSets.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.situationSets = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = new SituationSet();
          elem41.read(input);
          this.situationSets.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.sound = new Sound();
        this.sound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.tweetInfo = new TweetInfo();
        this.tweetInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.emailInfo = new EmailCommunicationInfo();
        this.emailInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.MAP) {
        var _size42 = 0;
        var _rtmp346;
        this.keyValueMap = {};
        var _ktype43 = 0;
        var _vtype44 = 0;
        _rtmp346 = input.readMapBegin();
        _ktype43 = _rtmp346.ktype;
        _vtype44 = _rtmp346.vtype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          if (_i47 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key48 = null;
          var val49 = null;
          key48 = input.readString().value;
          val49 = input.readString().value;
          this.keyValueMap[key48] = val49;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Communication.prototype.write = function(output) {
  output.writeStructBegin('Communication');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 2);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 4);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 5);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 6);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.lids !== null && this.lids !== undefined) {
    output.writeFieldBegin('lids', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.lids.length);
    for (var iter50 in this.lids)
    {
      if (this.lids.hasOwnProperty(iter50))
      {
        iter50 = this.lids[iter50];
        iter50.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sectionSegmentations !== null && this.sectionSegmentations !== undefined) {
    output.writeFieldBegin('sectionSegmentations', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.sectionSegmentations.length);
    for (var iter51 in this.sectionSegmentations)
    {
      if (this.sectionSegmentations.hasOwnProperty(iter51))
      {
        iter51 = this.sectionSegmentations[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entityMentionSets !== null && this.entityMentionSets !== undefined) {
    output.writeFieldBegin('entityMentionSets', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityMentionSets.length);
    for (var iter52 in this.entityMentionSets)
    {
      if (this.entityMentionSets.hasOwnProperty(iter52))
      {
        iter52 = this.entityMentionSets[iter52];
        iter52.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.entitySets !== null && this.entitySets !== undefined) {
    output.writeFieldBegin('entitySets', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.entitySets.length);
    for (var iter53 in this.entitySets)
    {
      if (this.entitySets.hasOwnProperty(iter53))
      {
        iter53 = this.entitySets[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationMentionSets !== null && this.situationMentionSets !== undefined) {
    output.writeFieldBegin('situationMentionSets', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationMentionSets.length);
    for (var iter54 in this.situationMentionSets)
    {
      if (this.situationMentionSets.hasOwnProperty(iter54))
      {
        iter54 = this.situationMentionSets[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.situationSets !== null && this.situationSets !== undefined) {
    output.writeFieldBegin('situationSets', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationSets.length);
    for (var iter55 in this.situationSets)
    {
      if (this.situationSets.hasOwnProperty(iter55))
      {
        iter55 = this.situationSets[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sound !== null && this.sound !== undefined) {
    output.writeFieldBegin('sound', Thrift.Type.STRUCT, 20);
    this.sound.write(output);
    output.writeFieldEnd();
  }
  if (this.tweetInfo !== null && this.tweetInfo !== undefined) {
    output.writeFieldBegin('tweetInfo', Thrift.Type.STRUCT, 21);
    this.tweetInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.emailInfo !== null && this.emailInfo !== undefined) {
    output.writeFieldBegin('emailInfo', Thrift.Type.STRUCT, 22);
    this.emailInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.keyValueMap !== null && this.keyValueMap !== undefined) {
    output.writeFieldBegin('keyValueMap', Thrift.Type.MAP, 30);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.keyValueMap));
    for (var kiter56 in this.keyValueMap)
    {
      if (this.keyValueMap.hasOwnProperty(kiter56))
      {
        var viter57 = this.keyValueMap[kiter56];
        output.writeString(kiter56);
        output.writeString(viter57);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


EntityRef = function(args) {
  this.entityId = null;
  this.communicationId = null;
  if (args) {
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
    if (args.communicationId !== undefined) {
      this.communicationId = args.communicationId;
    }
  }
};
EntityRef.prototype = {};
EntityRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.entityId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityRef.prototype.write = function(output) {
  output.writeStructBegin('EntityRef');
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.STRING, 1);
    output.writeString(this.entityId);
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SituationRef = function(args) {
  this.situationId = null;
  this.communicationId = null;
  if (args) {
    if (args.situationId !== undefined) {
      this.situationId = args.situationId;
    }
    if (args.communicationId !== undefined) {
      this.communicationId = args.communicationId;
    }
  }
};
SituationRef.prototype = {};
SituationRef.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.situationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.communicationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SituationRef.prototype.write = function(output) {
  output.writeStructBegin('SituationRef');
  if (this.situationId !== null && this.situationId !== undefined) {
    output.writeFieldBegin('situationId', Thrift.Type.STRING, 1);
    output.writeString(this.situationId);
    output.writeFieldEnd();
  }
  if (this.communicationId !== null && this.communicationId !== undefined) {
    output.writeFieldBegin('communicationId', Thrift.Type.STRING, 2);
    output.writeString(this.communicationId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DiscourseEntity = function(args) {
  this.uuid = null;
  this.entityRefList = null;
  this.confidence = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.entityRefList !== undefined) {
      this.entityRefList = args.entityRefList;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
  }
};
DiscourseEntity.prototype = {};
DiscourseEntity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.entityRefList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new EntityRef();
          elem6.read(input);
          this.entityRefList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiscourseEntity.prototype.write = function(output) {
  output.writeStructBegin('DiscourseEntity');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.entityRefList !== null && this.entityRefList !== undefined) {
    output.writeFieldBegin('entityRefList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityRefList.length);
    for (var iter7 in this.entityRefList)
    {
      if (this.entityRefList.hasOwnProperty(iter7))
      {
        iter7 = this.entityRefList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DiscourseSituation = function(args) {
  this.uuid = null;
  this.situationRefList = null;
  this.confidence = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.situationRefList !== undefined) {
      this.situationRefList = args.situationRefList;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
  }
};
DiscourseSituation.prototype = {};
DiscourseSituation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.situationRefList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new SituationRef();
          elem14.read(input);
          this.situationRefList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiscourseSituation.prototype.write = function(output) {
  output.writeStructBegin('DiscourseSituation');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.situationRefList !== null && this.situationRefList !== undefined) {
    output.writeFieldBegin('situationRefList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationRefList.length);
    for (var iter15 in this.situationRefList)
    {
      if (this.situationRefList.hasOwnProperty(iter15))
      {
        iter15 = this.situationRefList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DiscourseAnnotation = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.discourseEntityList = null;
  this.discourseSituationList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.discourseEntityList !== undefined) {
      this.discourseEntityList = args.discourseEntityList;
    }
    if (args.discourseSituationList !== undefined) {
      this.discourseSituationList = args.discourseSituationList;
    }
  }
};
DiscourseAnnotation.prototype = {};
DiscourseAnnotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.discourseEntityList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new DiscourseEntity();
          elem22.read(input);
          this.discourseEntityList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.discourseSituationList = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = new DiscourseSituation();
          elem29.read(input);
          this.discourseSituationList.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DiscourseAnnotation.prototype.write = function(output) {
  output.writeStructBegin('DiscourseAnnotation');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.discourseEntityList !== null && this.discourseEntityList !== undefined) {
    output.writeFieldBegin('discourseEntityList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.discourseEntityList.length);
    for (var iter30 in this.discourseEntityList)
    {
      if (this.discourseEntityList.hasOwnProperty(iter30))
      {
        iter30 = this.discourseEntityList[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.discourseSituationList !== null && this.discourseSituationList !== undefined) {
    output.writeFieldBegin('discourseSituationList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.discourseSituationList.length);
    for (var iter31 in this.discourseSituationList)
    {
      if (this.discourseSituationList.hasOwnProperty(iter31))
      {
        iter31 = this.discourseSituationList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Discourse = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.annotationList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.annotationList !== undefined) {
      this.annotationList = args.annotationList;
    }
  }
};
Discourse.prototype = {};
Discourse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.annotationList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new DiscourseAnnotation();
          elem38.read(input);
          this.annotationList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Discourse.prototype.write = function(output) {
  output.writeStructBegin('Discourse');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.annotationList !== null && this.annotationList !== undefined) {
    output.writeFieldBegin('annotationList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotationList.length);
    for (var iter39 in this.annotationList)
    {
      if (this.annotationList.hasOwnProperty(iter39))
      {
        iter39 = this.annotationList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


EmailAddress = function(args) {
  this.address = null;
  this.displayName = null;
  if (args) {
    if (args.address !== undefined) {
      this.address = args.address;
    }
    if (args.displayName !== undefined) {
      this.displayName = args.displayName;
    }
  }
};
EmailAddress.prototype = {};
EmailAddress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.displayName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailAddress.prototype.write = function(output) {
  output.writeStructBegin('EmailAddress');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.displayName !== null && this.displayName !== undefined) {
    output.writeFieldBegin('displayName', Thrift.Type.STRING, 2);
    output.writeString(this.displayName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EmailCommunicationInfo = function(args) {
  this.messageId = null;
  this.contentType = null;
  this.userAgent = null;
  this.inReplyTo = null;
  this.reference = null;
  this.senderAddress = null;
  this.returnPathAddress = null;
  this.toAddress = null;
  this.ccAddress = null;
  this.bccAddress = null;
  if (args) {
    if (args.messageId !== undefined) {
      this.messageId = args.messageId;
    }
    if (args.contentType !== undefined) {
      this.contentType = args.contentType;
    }
    if (args.userAgent !== undefined) {
      this.userAgent = args.userAgent;
    }
    if (args.inReplyTo !== undefined) {
      this.inReplyTo = args.inReplyTo;
    }
    if (args.reference !== undefined) {
      this.reference = args.reference;
    }
    if (args.senderAddress !== undefined) {
      this.senderAddress = args.senderAddress;
    }
    if (args.returnPathAddress !== undefined) {
      this.returnPathAddress = args.returnPathAddress;
    }
    if (args.toAddress !== undefined) {
      this.toAddress = args.toAddress;
    }
    if (args.ccAddress !== undefined) {
      this.ccAddress = args.ccAddress;
    }
    if (args.bccAddress !== undefined) {
      this.bccAddress = args.bccAddress;
    }
  }
};
EmailCommunicationInfo.prototype = {};
EmailCommunicationInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.messageId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contentType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userAgent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.inReplyTo = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.inReplyTo.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.reference = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString().value;
          this.reference.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.senderAddress = new EmailAddress();
        this.senderAddress.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.returnPathAddress = new EmailAddress();
        this.returnPathAddress.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.toAddress = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new EmailAddress();
          elem20.read(input);
          this.toAddress.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.ccAddress = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new EmailAddress();
          elem27.read(input);
          this.ccAddress.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.bccAddress = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new EmailAddress();
          elem34.read(input);
          this.bccAddress.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EmailCommunicationInfo.prototype.write = function(output) {
  output.writeStructBegin('EmailCommunicationInfo');
  if (this.messageId !== null && this.messageId !== undefined) {
    output.writeFieldBegin('messageId', Thrift.Type.STRING, 1);
    output.writeString(this.messageId);
    output.writeFieldEnd();
  }
  if (this.contentType !== null && this.contentType !== undefined) {
    output.writeFieldBegin('contentType', Thrift.Type.STRING, 2);
    output.writeString(this.contentType);
    output.writeFieldEnd();
  }
  if (this.userAgent !== null && this.userAgent !== undefined) {
    output.writeFieldBegin('userAgent', Thrift.Type.STRING, 3);
    output.writeString(this.userAgent);
    output.writeFieldEnd();
  }
  if (this.inReplyTo !== null && this.inReplyTo !== undefined) {
    output.writeFieldBegin('inReplyTo', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.inReplyTo.length);
    for (var iter35 in this.inReplyTo)
    {
      if (this.inReplyTo.hasOwnProperty(iter35))
      {
        iter35 = this.inReplyTo[iter35];
        output.writeString(iter35);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reference !== null && this.reference !== undefined) {
    output.writeFieldBegin('reference', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.reference.length);
    for (var iter36 in this.reference)
    {
      if (this.reference.hasOwnProperty(iter36))
      {
        iter36 = this.reference[iter36];
        output.writeString(iter36);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.senderAddress !== null && this.senderAddress !== undefined) {
    output.writeFieldBegin('senderAddress', Thrift.Type.STRUCT, 6);
    this.senderAddress.write(output);
    output.writeFieldEnd();
  }
  if (this.returnPathAddress !== null && this.returnPathAddress !== undefined) {
    output.writeFieldBegin('returnPathAddress', Thrift.Type.STRUCT, 7);
    this.returnPathAddress.write(output);
    output.writeFieldEnd();
  }
  if (this.toAddress !== null && this.toAddress !== undefined) {
    output.writeFieldBegin('toAddress', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.toAddress.length);
    for (var iter37 in this.toAddress)
    {
      if (this.toAddress.hasOwnProperty(iter37))
      {
        iter37 = this.toAddress[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ccAddress !== null && this.ccAddress !== undefined) {
    output.writeFieldBegin('ccAddress', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.ccAddress.length);
    for (var iter38 in this.ccAddress)
    {
      if (this.ccAddress.hasOwnProperty(iter38))
      {
        iter38 = this.ccAddress[iter38];
        iter38.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bccAddress !== null && this.bccAddress !== undefined) {
    output.writeFieldBegin('bccAddress', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.bccAddress.length);
    for (var iter39 in this.bccAddress)
    {
      if (this.bccAddress.hasOwnProperty(iter39))
      {
        iter39 = this.bccAddress[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Entity = function(args) {
  this.uuid = null;
  this.mentionIdList = null;
  this.type = null;
  this.confidence = null;
  this.canonicalName = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.mentionIdList !== undefined) {
      this.mentionIdList = args.mentionIdList;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
    if (args.canonicalName !== undefined) {
      this.canonicalName = args.canonicalName;
    }
  }
};
Entity.prototype = {};
Entity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.mentionIdList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.mentionIdList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.canonicalName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Entity.prototype.write = function(output) {
  output.writeStructBegin('Entity');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.mentionIdList !== null && this.mentionIdList !== undefined) {
    output.writeFieldBegin('mentionIdList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.mentionIdList.length);
    for (var iter7 in this.mentionIdList)
    {
      if (this.mentionIdList.hasOwnProperty(iter7))
      {
        iter7 = this.mentionIdList[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.canonicalName !== null && this.canonicalName !== undefined) {
    output.writeFieldBegin('canonicalName', Thrift.Type.STRING, 5);
    output.writeString(this.canonicalName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntitySet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.entityList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.entityList !== undefined) {
      this.entityList = args.entityList;
    }
  }
};
EntitySet.prototype = {};
EntitySet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.entityList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Entity();
          elem14.read(input);
          this.entityList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntitySet.prototype.write = function(output) {
  output.writeStructBegin('EntitySet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.entityList !== null && this.entityList !== undefined) {
    output.writeFieldBegin('entityList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.entityList.length);
    for (var iter15 in this.entityList)
    {
      if (this.entityList.hasOwnProperty(iter15))
      {
        iter15 = this.entityList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntityMention = function(args) {
  this.uuid = null;
  this.tokens = null;
  this.entityType = null;
  this.phraseType = null;
  this.confidence = null;
  this.text = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.tokens !== undefined) {
      this.tokens = args.tokens;
    }
    if (args.entityType !== undefined) {
      this.entityType = args.entityType;
    }
    if (args.phraseType !== undefined) {
      this.phraseType = args.phraseType;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
  }
};
EntityMention.prototype = {};
EntityMention.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.entityType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.phraseType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityMention.prototype.write = function(output) {
  output.writeStructBegin('EntityMention');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 2);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.entityType !== null && this.entityType !== undefined) {
    output.writeFieldBegin('entityType', Thrift.Type.STRING, 3);
    output.writeString(this.entityType);
    output.writeFieldEnd();
  }
  if (this.phraseType !== null && this.phraseType !== undefined) {
    output.writeFieldBegin('phraseType', Thrift.Type.STRING, 4);
    output.writeString(this.phraseType);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 6);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EntityMentionSet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.mentionSet = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.mentionSet !== undefined) {
      this.mentionSet = args.mentionSet;
    }
  }
};
EntityMentionSet.prototype = {};
EntityMentionSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.mentionSet = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new EntityMention();
          elem22.read(input);
          this.mentionSet.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityMentionSet.prototype.write = function(output) {
  output.writeStructBegin('EntityMentionSet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.mentionSet !== null && this.mentionSet !== undefined) {
    output.writeFieldBegin('mentionSet', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mentionSet.length);
    for (var iter23 in this.mentionSet)
    {
      if (this.mentionSet.hasOwnProperty(iter23))
      {
        iter23 = this.mentionSet[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


LanguageIdentification = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.languageToProbabilityMap = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.languageToProbabilityMap !== undefined) {
      this.languageToProbabilityMap = args.languageToProbabilityMap;
    }
  }
};
LanguageIdentification.prototype = {};
LanguageIdentification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.languageToProbabilityMap = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readDouble().value;
          this.languageToProbabilityMap[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LanguageIdentification.prototype.write = function(output) {
  output.writeStructBegin('LanguageIdentification');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.languageToProbabilityMap !== null && this.languageToProbabilityMap !== undefined) {
    output.writeFieldBegin('languageToProbabilityMap', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.languageToProbabilityMap));
    for (var kiter8 in this.languageToProbabilityMap)
    {
      if (this.languageToProbabilityMap.hasOwnProperty(kiter8))
      {
        var viter9 = this.languageToProbabilityMap[kiter8];
        output.writeString(kiter8);
        output.writeDouble(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Digest = function(args) {
  this.bytesValue = null;
  this.int64Value = null;
  this.doubleValue = null;
  this.stringValue = null;
  this.int64List = null;
  this.doubleList = null;
  this.stringList = null;
  if (args) {
    if (args.bytesValue !== undefined) {
      this.bytesValue = args.bytesValue;
    }
    if (args.int64Value !== undefined) {
      this.int64Value = args.int64Value;
    }
    if (args.doubleValue !== undefined) {
      this.doubleValue = args.doubleValue;
    }
    if (args.stringValue !== undefined) {
      this.stringValue = args.stringValue;
    }
    if (args.int64List !== undefined) {
      this.int64List = args.int64List;
    }
    if (args.doubleList !== undefined) {
      this.doubleList = args.doubleList;
    }
    if (args.stringList !== undefined) {
      this.stringList = args.stringList;
    }
  }
};
Digest.prototype = {};
Digest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bytesValue = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.int64Value = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.doubleValue = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stringValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.int64List = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI64().value;
          this.int64List.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.doubleList = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readDouble().value;
          this.doubleList.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.stringList = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readString().value;
          this.stringList.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Digest.prototype.write = function(output) {
  output.writeStructBegin('Digest');
  if (this.bytesValue !== null && this.bytesValue !== undefined) {
    output.writeFieldBegin('bytesValue', Thrift.Type.STRING, 1);
    output.writeBinary(this.bytesValue);
    output.writeFieldEnd();
  }
  if (this.int64Value !== null && this.int64Value !== undefined) {
    output.writeFieldBegin('int64Value', Thrift.Type.I64, 2);
    output.writeI64(this.int64Value);
    output.writeFieldEnd();
  }
  if (this.doubleValue !== null && this.doubleValue !== undefined) {
    output.writeFieldBegin('doubleValue', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.doubleValue);
    output.writeFieldEnd();
  }
  if (this.stringValue !== null && this.stringValue !== undefined) {
    output.writeFieldBegin('stringValue', Thrift.Type.STRING, 4);
    output.writeString(this.stringValue);
    output.writeFieldEnd();
  }
  if (this.int64List !== null && this.int64List !== undefined) {
    output.writeFieldBegin('int64List', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.int64List.length);
    for (var iter21 in this.int64List)
    {
      if (this.int64List.hasOwnProperty(iter21))
      {
        iter21 = this.int64List[iter21];
        output.writeI64(iter21);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.doubleList !== null && this.doubleList !== undefined) {
    output.writeFieldBegin('doubleList', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.DOUBLE, this.doubleList.length);
    for (var iter22 in this.doubleList)
    {
      if (this.doubleList.hasOwnProperty(iter22))
      {
        iter22 = this.doubleList[iter22];
        output.writeDouble(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stringList !== null && this.stringList !== undefined) {
    output.writeFieldBegin('stringList', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.stringList.length);
    for (var iter23 in this.stringList)
    {
      if (this.stringList.hasOwnProperty(iter23))
      {
        iter23 = this.stringList[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationMetadata = function(args) {
  this.tool = null;
  this.timestamp = null;
  this.confidence = null;
  this.digest = null;
  if (args) {
    if (args.tool !== undefined) {
      this.tool = args.tool;
    }
    if (args.timestamp !== undefined) {
      this.timestamp = args.timestamp;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
    if (args.digest !== undefined) {
      this.digest = args.digest;
    }
  }
};
AnnotationMetadata.prototype = {};
AnnotationMetadata.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tool = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.digest = new Digest();
        this.digest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationMetadata.prototype.write = function(output) {
  output.writeStructBegin('AnnotationMetadata');
  if (this.tool !== null && this.tool !== undefined) {
    output.writeFieldBegin('tool', Thrift.Type.STRING, 1);
    output.writeString(this.tool);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 2);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  if (this.digest !== null && this.digest !== undefined) {
    output.writeFieldBegin('digest', Thrift.Type.STRUCT, 4);
    this.digest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Argument = function(args) {
  this.role = null;
  this.entityId = null;
  this.situationId = null;
  this.roleLabel = null;
  if (args) {
    if (args.role !== undefined) {
      this.role = args.role;
    }
    if (args.entityId !== undefined) {
      this.entityId = args.entityId;
    }
    if (args.situationId !== undefined) {
      this.situationId = args.situationId;
    }
    if (args.roleLabel !== undefined) {
      this.roleLabel = args.roleLabel;
    }
  }
};
Argument.prototype = {};
Argument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entityId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.situationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.roleLabel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Argument.prototype.write = function(output) {
  output.writeStructBegin('Argument');
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 1);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.entityId !== null && this.entityId !== undefined) {
    output.writeFieldBegin('entityId', Thrift.Type.STRING, 2);
    output.writeString(this.entityId);
    output.writeFieldEnd();
  }
  if (this.situationId !== null && this.situationId !== undefined) {
    output.writeFieldBegin('situationId', Thrift.Type.STRING, 3);
    output.writeString(this.situationId);
    output.writeFieldEnd();
  }
  if (this.roleLabel !== null && this.roleLabel !== undefined) {
    output.writeFieldBegin('roleLabel', Thrift.Type.STRING, 4);
    output.writeString(this.roleLabel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Justification = function(args) {
  this.justificationType = null;
  this.mentionId = null;
  this.tokens = null;
  if (args) {
    if (args.justificationType !== undefined) {
      this.justificationType = args.justificationType;
    }
    if (args.mentionId !== undefined) {
      this.mentionId = args.mentionId;
    }
    if (args.tokens !== undefined) {
      this.tokens = args.tokens;
    }
  }
};
Justification.prototype = {};
Justification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.justificationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mentionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tokens = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TokenRefSequence();
          elem6.read(input);
          this.tokens.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Justification.prototype.write = function(output) {
  output.writeStructBegin('Justification');
  if (this.justificationType !== null && this.justificationType !== undefined) {
    output.writeFieldBegin('justificationType', Thrift.Type.STRING, 1);
    output.writeString(this.justificationType);
    output.writeFieldEnd();
  }
  if (this.mentionId !== null && this.mentionId !== undefined) {
    output.writeFieldBegin('mentionId', Thrift.Type.STRING, 2);
    output.writeString(this.mentionId);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokens.length);
    for (var iter7 in this.tokens)
    {
      if (this.tokens.hasOwnProperty(iter7))
      {
        iter7 = this.tokens[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Situation = function(args) {
  this.uuid = null;
  this.situationType = null;
  this.argumentList = null;
  this.mentionIdList = null;
  this.justificationList = null;
  this.eventType = null;
  this.stateType = null;
  this.temporalFactType = null;
  this.situationKindLemma = null;
  this.timemlClass = null;
  this.timemlTense = null;
  this.timemlAspect = null;
  this.intensity = null;
  this.polarity = null;
  this.confidence = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.situationType !== undefined) {
      this.situationType = args.situationType;
    }
    if (args.argumentList !== undefined) {
      this.argumentList = args.argumentList;
    }
    if (args.mentionIdList !== undefined) {
      this.mentionIdList = args.mentionIdList;
    }
    if (args.justificationList !== undefined) {
      this.justificationList = args.justificationList;
    }
    if (args.eventType !== undefined) {
      this.eventType = args.eventType;
    }
    if (args.stateType !== undefined) {
      this.stateType = args.stateType;
    }
    if (args.temporalFactType !== undefined) {
      this.temporalFactType = args.temporalFactType;
    }
    if (args.situationKindLemma !== undefined) {
      this.situationKindLemma = args.situationKindLemma;
    }
    if (args.timemlClass !== undefined) {
      this.timemlClass = args.timemlClass;
    }
    if (args.timemlTense !== undefined) {
      this.timemlTense = args.timemlTense;
    }
    if (args.timemlAspect !== undefined) {
      this.timemlAspect = args.timemlAspect;
    }
    if (args.intensity !== undefined) {
      this.intensity = args.intensity;
    }
    if (args.polarity !== undefined) {
      this.polarity = args.polarity;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
  }
};
Situation.prototype = {};
Situation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.situationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.argumentList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Argument();
          elem14.read(input);
          this.argumentList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.mentionIdList = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString().value;
          this.mentionIdList.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.justificationList = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new Justification();
          elem28.read(input);
          this.justificationList.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.eventType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRING) {
        this.stateType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 52:
      if (ftype == Thrift.Type.STRING) {
        this.temporalFactType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRING) {
        this.situationKindLemma = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRING) {
        this.timemlClass = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRING) {
        this.timemlTense = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRING) {
        this.timemlAspect = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.DOUBLE) {
        this.intensity = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.STRING) {
        this.polarity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Situation.prototype.write = function(output) {
  output.writeStructBegin('Situation');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.situationType !== null && this.situationType !== undefined) {
    output.writeFieldBegin('situationType', Thrift.Type.STRING, 2);
    output.writeString(this.situationType);
    output.writeFieldEnd();
  }
  if (this.argumentList !== null && this.argumentList !== undefined) {
    output.writeFieldBegin('argumentList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.argumentList.length);
    for (var iter29 in this.argumentList)
    {
      if (this.argumentList.hasOwnProperty(iter29))
      {
        iter29 = this.argumentList[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mentionIdList !== null && this.mentionIdList !== undefined) {
    output.writeFieldBegin('mentionIdList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.mentionIdList.length);
    for (var iter30 in this.mentionIdList)
    {
      if (this.mentionIdList.hasOwnProperty(iter30))
      {
        iter30 = this.mentionIdList[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.justificationList !== null && this.justificationList !== undefined) {
    output.writeFieldBegin('justificationList', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.justificationList.length);
    for (var iter31 in this.justificationList)
    {
      if (this.justificationList.hasOwnProperty(iter31))
      {
        iter31 = this.justificationList[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.STRING, 50);
    output.writeString(this.eventType);
    output.writeFieldEnd();
  }
  if (this.stateType !== null && this.stateType !== undefined) {
    output.writeFieldBegin('stateType', Thrift.Type.STRING, 51);
    output.writeString(this.stateType);
    output.writeFieldEnd();
  }
  if (this.temporalFactType !== null && this.temporalFactType !== undefined) {
    output.writeFieldBegin('temporalFactType', Thrift.Type.STRING, 52);
    output.writeString(this.temporalFactType);
    output.writeFieldEnd();
  }
  if (this.situationKindLemma !== null && this.situationKindLemma !== undefined) {
    output.writeFieldBegin('situationKindLemma', Thrift.Type.STRING, 53);
    output.writeString(this.situationKindLemma);
    output.writeFieldEnd();
  }
  if (this.timemlClass !== null && this.timemlClass !== undefined) {
    output.writeFieldBegin('timemlClass', Thrift.Type.STRING, 54);
    output.writeString(this.timemlClass);
    output.writeFieldEnd();
  }
  if (this.timemlTense !== null && this.timemlTense !== undefined) {
    output.writeFieldBegin('timemlTense', Thrift.Type.STRING, 55);
    output.writeString(this.timemlTense);
    output.writeFieldEnd();
  }
  if (this.timemlAspect !== null && this.timemlAspect !== undefined) {
    output.writeFieldBegin('timemlAspect', Thrift.Type.STRING, 56);
    output.writeString(this.timemlAspect);
    output.writeFieldEnd();
  }
  if (this.intensity !== null && this.intensity !== undefined) {
    output.writeFieldBegin('intensity', Thrift.Type.DOUBLE, 100);
    output.writeDouble(this.intensity);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.STRING, 101);
    output.writeString(this.polarity);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 200);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SituationSet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.situationList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.situationList !== undefined) {
      this.situationList = args.situationList;
    }
  }
};
SituationSet.prototype = {};
SituationSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.situationList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Situation();
          elem38.read(input);
          this.situationList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SituationSet.prototype.write = function(output) {
  output.writeStructBegin('SituationSet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.situationList !== null && this.situationList !== undefined) {
    output.writeFieldBegin('situationList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.situationList.length);
    for (var iter39 in this.situationList)
    {
      if (this.situationList.hasOwnProperty(iter39))
      {
        iter39 = this.situationList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MentionArgument = function(args) {
  this.role = null;
  this.entityMentionId = null;
  this.situationMentionId = null;
  this.roleLabel = null;
  if (args) {
    if (args.role !== undefined) {
      this.role = args.role;
    }
    if (args.entityMentionId !== undefined) {
      this.entityMentionId = args.entityMentionId;
    }
    if (args.situationMentionId !== undefined) {
      this.situationMentionId = args.situationMentionId;
    }
    if (args.roleLabel !== undefined) {
      this.roleLabel = args.roleLabel;
    }
  }
};
MentionArgument.prototype = {};
MentionArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.role = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.entityMentionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.situationMentionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.roleLabel = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MentionArgument.prototype.write = function(output) {
  output.writeStructBegin('MentionArgument');
  if (this.role !== null && this.role !== undefined) {
    output.writeFieldBegin('role', Thrift.Type.STRING, 1);
    output.writeString(this.role);
    output.writeFieldEnd();
  }
  if (this.entityMentionId !== null && this.entityMentionId !== undefined) {
    output.writeFieldBegin('entityMentionId', Thrift.Type.STRING, 2);
    output.writeString(this.entityMentionId);
    output.writeFieldEnd();
  }
  if (this.situationMentionId !== null && this.situationMentionId !== undefined) {
    output.writeFieldBegin('situationMentionId', Thrift.Type.STRING, 3);
    output.writeString(this.situationMentionId);
    output.writeFieldEnd();
  }
  if (this.roleLabel !== null && this.roleLabel !== undefined) {
    output.writeFieldBegin('roleLabel', Thrift.Type.STRING, 4);
    output.writeString(this.roleLabel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SituationMention = function(args) {
  this.uuid = null;
  this.text = null;
  this.situationType = null;
  this.argumentList = null;
  this.eventType = null;
  this.stateType = null;
  this.situationKindLemma = null;
  this.intensity = null;
  this.polarity = null;
  this.tokens = null;
  this.confidence = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.situationType !== undefined) {
      this.situationType = args.situationType;
    }
    if (args.argumentList !== undefined) {
      this.argumentList = args.argumentList;
    }
    if (args.eventType !== undefined) {
      this.eventType = args.eventType;
    }
    if (args.stateType !== undefined) {
      this.stateType = args.stateType;
    }
    if (args.situationKindLemma !== undefined) {
      this.situationKindLemma = args.situationKindLemma;
    }
    if (args.intensity !== undefined) {
      this.intensity = args.intensity;
    }
    if (args.polarity !== undefined) {
      this.polarity = args.polarity;
    }
    if (args.tokens !== undefined) {
      this.tokens = args.tokens;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
  }
};
SituationMention.prototype = {};
SituationMention.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.situationType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.argumentList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new MentionArgument();
          elem46.read(input);
          this.argumentList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.eventType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRING) {
        this.stateType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRING) {
        this.situationKindLemma = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.DOUBLE) {
        this.intensity = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.STRING) {
        this.polarity = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 150:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokens = new TokenRefSequence();
        this.tokens.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 200:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SituationMention.prototype.write = function(output) {
  output.writeStructBegin('SituationMention');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.situationType !== null && this.situationType !== undefined) {
    output.writeFieldBegin('situationType', Thrift.Type.STRING, 3);
    output.writeString(this.situationType);
    output.writeFieldEnd();
  }
  if (this.argumentList !== null && this.argumentList !== undefined) {
    output.writeFieldBegin('argumentList', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.argumentList.length);
    for (var iter47 in this.argumentList)
    {
      if (this.argumentList.hasOwnProperty(iter47))
      {
        iter47 = this.argumentList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.STRING, 50);
    output.writeString(this.eventType);
    output.writeFieldEnd();
  }
  if (this.stateType !== null && this.stateType !== undefined) {
    output.writeFieldBegin('stateType', Thrift.Type.STRING, 51);
    output.writeString(this.stateType);
    output.writeFieldEnd();
  }
  if (this.situationKindLemma !== null && this.situationKindLemma !== undefined) {
    output.writeFieldBegin('situationKindLemma', Thrift.Type.STRING, 53);
    output.writeString(this.situationKindLemma);
    output.writeFieldEnd();
  }
  if (this.intensity !== null && this.intensity !== undefined) {
    output.writeFieldBegin('intensity', Thrift.Type.DOUBLE, 100);
    output.writeDouble(this.intensity);
    output.writeFieldEnd();
  }
  if (this.polarity !== null && this.polarity !== undefined) {
    output.writeFieldBegin('polarity', Thrift.Type.STRING, 101);
    output.writeString(this.polarity);
    output.writeFieldEnd();
  }
  if (this.tokens !== null && this.tokens !== undefined) {
    output.writeFieldBegin('tokens', Thrift.Type.STRUCT, 150);
    this.tokens.write(output);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 200);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SituationMentionSet = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.mentionList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.mentionList !== undefined) {
      this.mentionList = args.mentionList;
    }
  }
};
SituationMentionSet.prototype = {};
SituationMentionSet.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.mentionList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new SituationMention();
          elem54.read(input);
          this.mentionList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SituationMentionSet.prototype.write = function(output) {
  output.writeStructBegin('SituationMentionSet');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.mentionList !== null && this.mentionList !== undefined) {
    output.writeFieldBegin('mentionList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.mentionList.length);
    for (var iter55 in this.mentionList)
    {
      if (this.mentionList.hasOwnProperty(iter55))
      {
        iter55 = this.mentionList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TextSpan = function(args) {
  this.start = null;
  this.ending = null;
  if (args) {
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.ending !== undefined) {
      this.ending = args.ending;
    }
  }
};
TextSpan.prototype = {};
TextSpan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.start = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ending = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TextSpan.prototype.write = function(output) {
  output.writeStructBegin('TextSpan');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I32, 1);
    output.writeI32(this.start);
    output.writeFieldEnd();
  }
  if (this.ending !== null && this.ending !== undefined) {
    output.writeFieldBegin('ending', Thrift.Type.I32, 2);
    output.writeI32(this.ending);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AudioSpan = function(args) {
  this.start = null;
  this.ending = null;
  if (args) {
    if (args.start !== undefined) {
      this.start = args.start;
    }
    if (args.ending !== undefined) {
      this.ending = args.ending;
    }
  }
};
AudioSpan.prototype = {};
AudioSpan.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.start = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ending = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AudioSpan.prototype.write = function(output) {
  output.writeStructBegin('AudioSpan');
  if (this.start !== null && this.start !== undefined) {
    output.writeFieldBegin('start', Thrift.Type.I64, 1);
    output.writeI64(this.start);
    output.writeFieldEnd();
  }
  if (this.ending !== null && this.ending !== undefined) {
    output.writeFieldBegin('ending', Thrift.Type.I64, 2);
    output.writeI64(this.ending);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TokenizationKind = {
  'TOKEN_LIST' : 1,
  'TOKEN_LATTICE' : 2
};
Token = function(args) {
  this.tokenIndex = null;
  this.text = null;
  this.textSpan = null;
  this.audioSpan = null;
  if (args) {
    if (args.tokenIndex !== undefined) {
      this.tokenIndex = args.tokenIndex;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.textSpan !== undefined) {
      this.textSpan = args.textSpan;
    }
    if (args.audioSpan !== undefined) {
      this.audioSpan = args.audioSpan;
    }
  }
};
Token.prototype = {};
Token.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tokenIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Token.prototype.write = function(output) {
  output.writeStructBegin('Token');
  if (this.tokenIndex !== null && this.tokenIndex !== undefined) {
    output.writeFieldBegin('tokenIndex', Thrift.Type.I32, 1);
    output.writeI32(this.tokenIndex);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 3);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 5);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenRefSequence = function(args) {
  this.tokenIndexList = null;
  this.anchorTokenIndex = -1;
  this.tokenizationId = null;
  this.textSpan = null;
  this.audioSpan = null;
  if (args) {
    if (args.tokenIndexList !== undefined) {
      this.tokenIndexList = args.tokenIndexList;
    }
    if (args.anchorTokenIndex !== undefined) {
      this.anchorTokenIndex = args.anchorTokenIndex;
    }
    if (args.tokenizationId !== undefined) {
      this.tokenizationId = args.tokenizationId;
    }
    if (args.textSpan !== undefined) {
      this.textSpan = args.textSpan;
    }
    if (args.audioSpan !== undefined) {
      this.audioSpan = args.audioSpan;
    }
  }
};
TokenRefSequence.prototype = {};
TokenRefSequence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tokenIndexList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.tokenIndexList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.anchorTokenIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tokenizationId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenRefSequence.prototype.write = function(output) {
  output.writeStructBegin('TokenRefSequence');
  if (this.tokenIndexList !== null && this.tokenIndexList !== undefined) {
    output.writeFieldBegin('tokenIndexList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.tokenIndexList.length);
    for (var iter7 in this.tokenIndexList)
    {
      if (this.tokenIndexList.hasOwnProperty(iter7))
      {
        iter7 = this.tokenIndexList[iter7];
        output.writeI32(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.anchorTokenIndex !== null && this.anchorTokenIndex !== undefined) {
    output.writeFieldBegin('anchorTokenIndex', Thrift.Type.I32, 2);
    output.writeI32(this.anchorTokenIndex);
    output.writeFieldEnd();
  }
  if (this.tokenizationId !== null && this.tokenizationId !== undefined) {
    output.writeFieldBegin('tokenizationId', Thrift.Type.STRING, 3);
    output.writeString(this.tokenizationId);
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 4);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 5);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TaggedToken = function(args) {
  this.tokenIndex = null;
  this.tag = null;
  this.confidence = null;
  if (args) {
    if (args.tokenIndex !== undefined) {
      this.tokenIndex = args.tokenIndex;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
    if (args.confidence !== undefined) {
      this.confidence = args.confidence;
    }
  }
};
TaggedToken.prototype = {};
TaggedToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.tokenIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.confidence = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaggedToken.prototype.write = function(output) {
  output.writeStructBegin('TaggedToken');
  if (this.tokenIndex !== null && this.tokenIndex !== undefined) {
    output.writeFieldBegin('tokenIndex', Thrift.Type.I32, 1);
    output.writeI32(this.tokenIndex);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.confidence !== null && this.confidence !== undefined) {
    output.writeFieldBegin('confidence', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.confidence);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenTagging = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.taggedTokenList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.taggedTokenList !== undefined) {
      this.taggedTokenList = args.taggedTokenList;
    }
  }
};
TokenTagging.prototype = {};
TokenTagging.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.taggedTokenList = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new TaggedToken();
          elem14.read(input);
          this.taggedTokenList.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenTagging.prototype.write = function(output) {
  output.writeStructBegin('TokenTagging');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.taggedTokenList !== null && this.taggedTokenList !== undefined) {
    output.writeFieldBegin('taggedTokenList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.taggedTokenList.length);
    for (var iter15 in this.taggedTokenList)
    {
      if (this.taggedTokenList.hasOwnProperty(iter15))
      {
        iter15 = this.taggedTokenList[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Dependency = function(args) {
  this.gov = null;
  this.dep = null;
  this.edgeType = null;
  if (args) {
    if (args.gov !== undefined) {
      this.gov = args.gov;
    }
    if (args.dep !== undefined) {
      this.dep = args.dep;
    }
    if (args.edgeType !== undefined) {
      this.edgeType = args.edgeType;
    }
  }
};
Dependency.prototype = {};
Dependency.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.gov = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dep = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.edgeType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Dependency.prototype.write = function(output) {
  output.writeStructBegin('Dependency');
  if (this.gov !== null && this.gov !== undefined) {
    output.writeFieldBegin('gov', Thrift.Type.I32, 1);
    output.writeI32(this.gov);
    output.writeFieldEnd();
  }
  if (this.dep !== null && this.dep !== undefined) {
    output.writeFieldBegin('dep', Thrift.Type.I32, 2);
    output.writeI32(this.dep);
    output.writeFieldEnd();
  }
  if (this.edgeType !== null && this.edgeType !== undefined) {
    output.writeFieldBegin('edgeType', Thrift.Type.STRING, 3);
    output.writeString(this.edgeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DependencyParse = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.dependencyList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.dependencyList !== undefined) {
      this.dependencyList = args.dependencyList;
    }
  }
};
DependencyParse.prototype = {};
DependencyParse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.dependencyList = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new Dependency();
          elem22.read(input);
          this.dependencyList.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DependencyParse.prototype.write = function(output) {
  output.writeStructBegin('DependencyParse');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.dependencyList !== null && this.dependencyList !== undefined) {
    output.writeFieldBegin('dependencyList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.dependencyList.length);
    for (var iter23 in this.dependencyList)
    {
      if (this.dependencyList.hasOwnProperty(iter23))
      {
        iter23 = this.dependencyList[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Constituent = function(args) {
  this.id = null;
  this.tag = null;
  this.childList = null;
  this.tokenSequence = null;
  this.headChildIndex = -1;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.tag !== undefined) {
      this.tag = args.tag;
    }
    if (args.childList !== undefined) {
      this.childList = args.childList;
    }
    if (args.tokenSequence !== undefined) {
      this.tokenSequence = args.tokenSequence;
    }
    if (args.headChildIndex !== undefined) {
      this.headChildIndex = args.headChildIndex;
    }
  }
};
Constituent.prototype = {};
Constituent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.childList = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32().value;
          this.childList.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.tokenSequence = new TokenRefSequence();
        this.tokenSequence.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.headChildIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Constituent.prototype.write = function(output) {
  output.writeStructBegin('Constituent');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.childList !== null && this.childList !== undefined) {
    output.writeFieldBegin('childList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.childList.length);
    for (var iter31 in this.childList)
    {
      if (this.childList.hasOwnProperty(iter31))
      {
        iter31 = this.childList[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tokenSequence !== null && this.tokenSequence !== undefined) {
    output.writeFieldBegin('tokenSequence', Thrift.Type.STRUCT, 4);
    this.tokenSequence.write(output);
    output.writeFieldEnd();
  }
  if (this.headChildIndex !== null && this.headChildIndex !== undefined) {
    output.writeFieldBegin('headChildIndex', Thrift.Type.I32, 5);
    output.writeI32(this.headChildIndex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Parse = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.constituentList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.constituentList !== undefined) {
      this.constituentList = args.constituentList;
    }
  }
};
Parse.prototype = {};
Parse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.constituentList = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Constituent();
          elem38.read(input);
          this.constituentList.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Parse.prototype.write = function(output) {
  output.writeStructBegin('Parse');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.constituentList !== null && this.constituentList !== undefined) {
    output.writeFieldBegin('constituentList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.constituentList.length);
    for (var iter39 in this.constituentList)
    {
      if (this.constituentList.hasOwnProperty(iter39))
      {
        iter39 = this.constituentList[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LatticePath = function(args) {
  this.weight = null;
  this.tokenList = null;
  if (args) {
    if (args.weight !== undefined) {
      this.weight = args.weight;
    }
    if (args.tokenList !== undefined) {
      this.tokenList = args.tokenList;
    }
  }
};
LatticePath.prototype = {};
LatticePath.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.weight = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.tokenList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new Token();
          elem46.read(input);
          this.tokenList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LatticePath.prototype.write = function(output) {
  output.writeStructBegin('LatticePath');
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.weight);
    output.writeFieldEnd();
  }
  if (this.tokenList !== null && this.tokenList !== undefined) {
    output.writeFieldBegin('tokenList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenList.length);
    for (var iter47 in this.tokenList)
    {
      if (this.tokenList.hasOwnProperty(iter47))
      {
        iter47 = this.tokenList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Arc = function(args) {
  this.src = null;
  this.dst = null;
  this.token = null;
  this.weight = null;
  if (args) {
    if (args.src !== undefined) {
      this.src = args.src;
    }
    if (args.dst !== undefined) {
      this.dst = args.dst;
    }
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.weight !== undefined) {
      this.weight = args.weight;
    }
  }
};
Arc.prototype = {};
Arc.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.src = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dst = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.token = new Token();
        this.token.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.weight = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Arc.prototype.write = function(output) {
  output.writeStructBegin('Arc');
  if (this.src !== null && this.src !== undefined) {
    output.writeFieldBegin('src', Thrift.Type.I32, 1);
    output.writeI32(this.src);
    output.writeFieldEnd();
  }
  if (this.dst !== null && this.dst !== undefined) {
    output.writeFieldBegin('dst', Thrift.Type.I32, 2);
    output.writeI32(this.dst);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRUCT, 3);
    this.token.write(output);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.weight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenLattice = function(args) {
  this.startState = 0;
  this.endState = 0;
  this.arcList = null;
  this.cachedBestPath = null;
  if (args) {
    if (args.startState !== undefined) {
      this.startState = args.startState;
    }
    if (args.endState !== undefined) {
      this.endState = args.endState;
    }
    if (args.arcList !== undefined) {
      this.arcList = args.arcList;
    }
    if (args.cachedBestPath !== undefined) {
      this.cachedBestPath = args.cachedBestPath;
    }
  }
};
TokenLattice.prototype = {};
TokenLattice.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.arcList = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new Arc();
          elem54.read(input);
          this.arcList.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cachedBestPath = new LatticePath();
        this.cachedBestPath.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenLattice.prototype.write = function(output) {
  output.writeStructBegin('TokenLattice');
  if (this.startState !== null && this.startState !== undefined) {
    output.writeFieldBegin('startState', Thrift.Type.I32, 1);
    output.writeI32(this.startState);
    output.writeFieldEnd();
  }
  if (this.endState !== null && this.endState !== undefined) {
    output.writeFieldBegin('endState', Thrift.Type.I32, 2);
    output.writeI32(this.endState);
    output.writeFieldEnd();
  }
  if (this.arcList !== null && this.arcList !== undefined) {
    output.writeFieldBegin('arcList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.arcList.length);
    for (var iter55 in this.arcList)
    {
      if (this.arcList.hasOwnProperty(iter55))
      {
        iter55 = this.arcList[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cachedBestPath !== null && this.cachedBestPath !== undefined) {
    output.writeFieldBegin('cachedBestPath', Thrift.Type.STRUCT, 4);
    this.cachedBestPath.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Tokenization = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.tokenList = null;
  this.lattice = null;
  this.kind = null;
  this.posTagList = null;
  this.nerTagList = null;
  this.lemmaList = null;
  this.langIdList = null;
  this.parse = null;
  this.dependencyParseList = null;
  this.sentenceId = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.tokenList !== undefined) {
      this.tokenList = args.tokenList;
    }
    if (args.lattice !== undefined) {
      this.lattice = args.lattice;
    }
    if (args.kind !== undefined) {
      this.kind = args.kind;
    }
    if (args.posTagList !== undefined) {
      this.posTagList = args.posTagList;
    }
    if (args.nerTagList !== undefined) {
      this.nerTagList = args.nerTagList;
    }
    if (args.lemmaList !== undefined) {
      this.lemmaList = args.lemmaList;
    }
    if (args.langIdList !== undefined) {
      this.langIdList = args.langIdList;
    }
    if (args.parse !== undefined) {
      this.parse = args.parse;
    }
    if (args.dependencyParseList !== undefined) {
      this.dependencyParseList = args.dependencyParseList;
    }
    if (args.sentenceId !== undefined) {
      this.sentenceId = args.sentenceId;
    }
  }
};
Tokenization.prototype = {};
Tokenization.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.tokenList = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new Token();
          elem62.read(input);
          this.tokenList.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.lattice = new TokenLattice();
        this.lattice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.kind = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.posTagList = new TokenTagging();
        this.posTagList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.nerTagList = new TokenTagging();
        this.nerTagList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.lemmaList = new TokenTagging();
        this.lemmaList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.langIdList = new TokenTagging();
        this.langIdList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.parse = new Parse();
        this.parse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.dependencyParseList = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new DependencyParse();
          elem69.read(input);
          this.dependencyParseList.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.sentenceId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Tokenization.prototype.write = function(output) {
  output.writeStructBegin('Tokenization');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenList !== null && this.tokenList !== undefined) {
    output.writeFieldBegin('tokenList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenList.length);
    for (var iter70 in this.tokenList)
    {
      if (this.tokenList.hasOwnProperty(iter70))
      {
        iter70 = this.tokenList[iter70];
        iter70.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.lattice !== null && this.lattice !== undefined) {
    output.writeFieldBegin('lattice', Thrift.Type.STRUCT, 4);
    this.lattice.write(output);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.I32, 5);
    output.writeI32(this.kind);
    output.writeFieldEnd();
  }
  if (this.posTagList !== null && this.posTagList !== undefined) {
    output.writeFieldBegin('posTagList', Thrift.Type.STRUCT, 6);
    this.posTagList.write(output);
    output.writeFieldEnd();
  }
  if (this.nerTagList !== null && this.nerTagList !== undefined) {
    output.writeFieldBegin('nerTagList', Thrift.Type.STRUCT, 7);
    this.nerTagList.write(output);
    output.writeFieldEnd();
  }
  if (this.lemmaList !== null && this.lemmaList !== undefined) {
    output.writeFieldBegin('lemmaList', Thrift.Type.STRUCT, 8);
    this.lemmaList.write(output);
    output.writeFieldEnd();
  }
  if (this.langIdList !== null && this.langIdList !== undefined) {
    output.writeFieldBegin('langIdList', Thrift.Type.STRUCT, 9);
    this.langIdList.write(output);
    output.writeFieldEnd();
  }
  if (this.parse !== null && this.parse !== undefined) {
    output.writeFieldBegin('parse', Thrift.Type.STRUCT, 10);
    this.parse.write(output);
    output.writeFieldEnd();
  }
  if (this.dependencyParseList !== null && this.dependencyParseList !== undefined) {
    output.writeFieldBegin('dependencyParseList', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRUCT, this.dependencyParseList.length);
    for (var iter71 in this.dependencyParseList)
    {
      if (this.dependencyParseList.hasOwnProperty(iter71))
      {
        iter71 = this.dependencyParseList[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sentenceId !== null && this.sentenceId !== undefined) {
    output.writeFieldBegin('sentenceId', Thrift.Type.STRING, 12);
    output.writeString(this.sentenceId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TokenizationCollection = function(args) {
  this.metadata = null;
  this.tokenizationList = null;
  if (args) {
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.tokenizationList !== undefined) {
      this.tokenizationList = args.tokenizationList;
    }
  }
};
TokenizationCollection.prototype = {};
TokenizationCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.tokenizationList = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new Tokenization();
          elem78.read(input);
          this.tokenizationList.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenizationCollection.prototype.write = function(output) {
  output.writeStructBegin('TokenizationCollection');
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 1);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.tokenizationList !== null && this.tokenizationList !== undefined) {
    output.writeFieldBegin('tokenizationList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenizationList.length);
    for (var iter79 in this.tokenizationList)
    {
      if (this.tokenizationList.hasOwnProperty(iter79))
      {
        iter79 = this.tokenizationList[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Sentence = function(args) {
  this.uuid = null;
  this.tokenizationList = null;
  this.textSpan = null;
  this.audioSpan = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.tokenizationList !== undefined) {
      this.tokenizationList = args.tokenizationList;
    }
    if (args.textSpan !== undefined) {
      this.textSpan = args.textSpan;
    }
    if (args.audioSpan !== undefined) {
      this.audioSpan = args.audioSpan;
    }
  }
};
Sentence.prototype = {};
Sentence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.tokenizationList = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new Tokenization();
          elem86.read(input);
          this.tokenizationList.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Sentence.prototype.write = function(output) {
  output.writeStructBegin('Sentence');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.tokenizationList !== null && this.tokenizationList !== undefined) {
    output.writeFieldBegin('tokenizationList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tokenizationList.length);
    for (var iter87 in this.tokenizationList)
    {
      if (this.tokenizationList.hasOwnProperty(iter87))
      {
        iter87 = this.tokenizationList[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 3);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 4);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SentenceSegmentation = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.sentenceList = null;
  this.sectionId = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.sentenceList !== undefined) {
      this.sentenceList = args.sentenceList;
    }
    if (args.sectionId !== undefined) {
      this.sectionId = args.sectionId;
    }
  }
};
SentenceSegmentation.prototype = {};
SentenceSegmentation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.sentenceList = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new Sentence();
          elem94.read(input);
          this.sentenceList.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sectionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SentenceSegmentation.prototype.write = function(output) {
  output.writeStructBegin('SentenceSegmentation');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.sentenceList !== null && this.sentenceList !== undefined) {
    output.writeFieldBegin('sentenceList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.sentenceList.length);
    for (var iter95 in this.sentenceList)
    {
      if (this.sentenceList.hasOwnProperty(iter95))
      {
        iter95 = this.sentenceList[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sectionId !== null && this.sectionId !== undefined) {
    output.writeFieldBegin('sectionId', Thrift.Type.STRING, 4);
    output.writeString(this.sectionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SentenceSegmentationCollection = function(args) {
  this.metadata = null;
  this.sentSegList = null;
  if (args) {
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.sentSegList !== undefined) {
      this.sentSegList = args.sentSegList;
    }
  }
};
SentenceSegmentationCollection.prototype = {};
SentenceSegmentationCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.sentSegList = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new SentenceSegmentation();
          elem102.read(input);
          this.sentSegList.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SentenceSegmentationCollection.prototype.write = function(output) {
  output.writeStructBegin('SentenceSegmentationCollection');
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 1);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.sentSegList !== null && this.sentSegList !== undefined) {
    output.writeFieldBegin('sentSegList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sentSegList.length);
    for (var iter103 in this.sentSegList)
    {
      if (this.sentSegList.hasOwnProperty(iter103))
      {
        iter103 = this.sentSegList[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Section = function(args) {
  this.uuid = null;
  this.sentenceSegmentation = null;
  this.textSpan = null;
  this.audioSpan = null;
  this.kind = null;
  this.label = null;
  this.number = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.sentenceSegmentation !== undefined) {
      this.sentenceSegmentation = args.sentenceSegmentation;
    }
    if (args.textSpan !== undefined) {
      this.textSpan = args.textSpan;
    }
    if (args.audioSpan !== undefined) {
      this.audioSpan = args.audioSpan;
    }
    if (args.kind !== undefined) {
      this.kind = args.kind;
    }
    if (args.label !== undefined) {
      this.label = args.label;
    }
    if (args.number !== undefined) {
      this.number = args.number;
    }
  }
};
Section.prototype = {};
Section.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.sentenceSegmentation = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new SentenceSegmentation();
          elem110.read(input);
          this.sentenceSegmentation.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.textSpan = new TextSpan();
        this.textSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.audioSpan = new AudioSpan();
        this.audioSpan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.kind = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.label = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size111 = 0;
        var _rtmp3115;
        this.number = [];
        var _etype114 = 0;
        _rtmp3115 = input.readListBegin();
        _etype114 = _rtmp3115.etype;
        _size111 = _rtmp3115.size;
        for (var _i116 = 0; _i116 < _size111; ++_i116)
        {
          var elem117 = null;
          elem117 = input.readI32().value;
          this.number.push(elem117);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Section.prototype.write = function(output) {
  output.writeStructBegin('Section');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.sentenceSegmentation !== null && this.sentenceSegmentation !== undefined) {
    output.writeFieldBegin('sentenceSegmentation', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sentenceSegmentation.length);
    for (var iter118 in this.sentenceSegmentation)
    {
      if (this.sentenceSegmentation.hasOwnProperty(iter118))
      {
        iter118 = this.sentenceSegmentation[iter118];
        iter118.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.textSpan !== null && this.textSpan !== undefined) {
    output.writeFieldBegin('textSpan', Thrift.Type.STRUCT, 3);
    this.textSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.audioSpan !== null && this.audioSpan !== undefined) {
    output.writeFieldBegin('audioSpan', Thrift.Type.STRUCT, 9);
    this.audioSpan.write(output);
    output.writeFieldEnd();
  }
  if (this.kind !== null && this.kind !== undefined) {
    output.writeFieldBegin('kind', Thrift.Type.STRING, 4);
    output.writeString(this.kind);
    output.writeFieldEnd();
  }
  if (this.label !== null && this.label !== undefined) {
    output.writeFieldBegin('label', Thrift.Type.STRING, 5);
    output.writeString(this.label);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.number.length);
    for (var iter119 in this.number)
    {
      if (this.number.hasOwnProperty(iter119))
      {
        iter119 = this.number[iter119];
        output.writeI32(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SectionSegmentation = function(args) {
  this.uuid = null;
  this.metadata = null;
  this.sectionList = null;
  if (args) {
    if (args.uuid !== undefined) {
      this.uuid = args.uuid;
    }
    if (args.metadata !== undefined) {
      this.metadata = args.metadata;
    }
    if (args.sectionList !== undefined) {
      this.sectionList = args.sectionList;
    }
  }
};
SectionSegmentation.prototype = {};
SectionSegmentation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uuid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.metadata = new AnnotationMetadata();
        this.metadata.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.sectionList = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new Section();
          elem126.read(input);
          this.sectionList.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SectionSegmentation.prototype.write = function(output) {
  output.writeStructBegin('SectionSegmentation');
  if (this.uuid !== null && this.uuid !== undefined) {
    output.writeFieldBegin('uuid', Thrift.Type.STRING, 1);
    output.writeString(this.uuid);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRUCT, 2);
    this.metadata.write(output);
    output.writeFieldEnd();
  }
  if (this.sectionList !== null && this.sectionList !== undefined) {
    output.writeFieldBegin('sectionList', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.sectionList.length);
    for (var iter127 in this.sectionList)
    {
      if (this.sectionList.hasOwnProperty(iter127))
      {
        iter127 = this.sectionList[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TwitterUser = function(args) {
  this.id = null;
  this.name = null;
  this.screenName = null;
  this.lang = null;
  this.geoEnabled = null;
  this.createdAt = null;
  this.friendsCount = null;
  this.statusesCount = null;
  this.verified = null;
  this.listedCount = null;
  this.favouritesCount = null;
  this.followersCount = null;
  this.location = null;
  this.timeZone = null;
  this.description = null;
  this.utcOffset = null;
  this.url = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.screenName !== undefined) {
      this.screenName = args.screenName;
    }
    if (args.lang !== undefined) {
      this.lang = args.lang;
    }
    if (args.geoEnabled !== undefined) {
      this.geoEnabled = args.geoEnabled;
    }
    if (args.createdAt !== undefined) {
      this.createdAt = args.createdAt;
    }
    if (args.friendsCount !== undefined) {
      this.friendsCount = args.friendsCount;
    }
    if (args.statusesCount !== undefined) {
      this.statusesCount = args.statusesCount;
    }
    if (args.verified !== undefined) {
      this.verified = args.verified;
    }
    if (args.listedCount !== undefined) {
      this.listedCount = args.listedCount;
    }
    if (args.favouritesCount !== undefined) {
      this.favouritesCount = args.favouritesCount;
    }
    if (args.followersCount !== undefined) {
      this.followersCount = args.followersCount;
    }
    if (args.location !== undefined) {
      this.location = args.location;
    }
    if (args.timeZone !== undefined) {
      this.timeZone = args.timeZone;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.utcOffset !== undefined) {
      this.utcOffset = args.utcOffset;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
  }
};
TwitterUser.prototype = {};
TwitterUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.screenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.lang = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.geoEnabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.friendsCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.statusesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.verified = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.listedCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.favouritesCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.followersCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.timeZone = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.utcOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterUser.prototype.write = function(output) {
  output.writeStructBegin('TwitterUser');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.screenName !== null && this.screenName !== undefined) {
    output.writeFieldBegin('screenName', Thrift.Type.STRING, 4);
    output.writeString(this.screenName);
    output.writeFieldEnd();
  }
  if (this.lang !== null && this.lang !== undefined) {
    output.writeFieldBegin('lang', Thrift.Type.STRING, 5);
    output.writeString(this.lang);
    output.writeFieldEnd();
  }
  if (this.geoEnabled !== null && this.geoEnabled !== undefined) {
    output.writeFieldBegin('geoEnabled', Thrift.Type.BOOL, 6);
    output.writeBool(this.geoEnabled);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 7);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.friendsCount !== null && this.friendsCount !== undefined) {
    output.writeFieldBegin('friendsCount', Thrift.Type.I32, 8);
    output.writeI32(this.friendsCount);
    output.writeFieldEnd();
  }
  if (this.statusesCount !== null && this.statusesCount !== undefined) {
    output.writeFieldBegin('statusesCount', Thrift.Type.I32, 9);
    output.writeI32(this.statusesCount);
    output.writeFieldEnd();
  }
  if (this.verified !== null && this.verified !== undefined) {
    output.writeFieldBegin('verified', Thrift.Type.BOOL, 10);
    output.writeBool(this.verified);
    output.writeFieldEnd();
  }
  if (this.listedCount !== null && this.listedCount !== undefined) {
    output.writeFieldBegin('listedCount', Thrift.Type.I32, 11);
    output.writeI32(this.listedCount);
    output.writeFieldEnd();
  }
  if (this.favouritesCount !== null && this.favouritesCount !== undefined) {
    output.writeFieldBegin('favouritesCount', Thrift.Type.I32, 12);
    output.writeI32(this.favouritesCount);
    output.writeFieldEnd();
  }
  if (this.followersCount !== null && this.followersCount !== undefined) {
    output.writeFieldBegin('followersCount', Thrift.Type.I32, 13);
    output.writeI32(this.followersCount);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 14);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.timeZone !== null && this.timeZone !== undefined) {
    output.writeFieldBegin('timeZone', Thrift.Type.STRING, 15);
    output.writeString(this.timeZone);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 16);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.utcOffset !== null && this.utcOffset !== undefined) {
    output.writeFieldBegin('utcOffset', Thrift.Type.I32, 18);
    output.writeI32(this.utcOffset);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 19);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterLatLong = function(args) {
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
  }
};
TwitterLatLong.prototype = {};
TwitterLatLong.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterLatLong.prototype.write = function(output) {
  output.writeStructBegin('TwitterLatLong');
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BoundingBox = function(args) {
  this.type = null;
  this.coordinates = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.coordinates !== undefined) {
      this.coordinates = args.coordinates;
    }
  }
};
BoundingBox.prototype = {};
BoundingBox.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.coordinates = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new TwitterLatLong();
          elem6.read(input);
          this.coordinates.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BoundingBox.prototype.write = function(output) {
  output.writeStructBegin('BoundingBox');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.coordinates.length);
    for (var iter7 in this.coordinates)
    {
      if (this.coordinates.hasOwnProperty(iter7))
      {
        iter7 = this.coordinates[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PlaceAttributes = function(args) {
  this.streetAddress = null;
  this.region = null;
  this.locality = null;
  if (args) {
    if (args.streetAddress !== undefined) {
      this.streetAddress = args.streetAddress;
    }
    if (args.region !== undefined) {
      this.region = args.region;
    }
    if (args.locality !== undefined) {
      this.locality = args.locality;
    }
  }
};
PlaceAttributes.prototype = {};
PlaceAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.streetAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.region = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.locality = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PlaceAttributes.prototype.write = function(output) {
  output.writeStructBegin('PlaceAttributes');
  if (this.streetAddress !== null && this.streetAddress !== undefined) {
    output.writeFieldBegin('streetAddress', Thrift.Type.STRING, 1);
    output.writeString(this.streetAddress);
    output.writeFieldEnd();
  }
  if (this.region !== null && this.region !== undefined) {
    output.writeFieldBegin('region', Thrift.Type.STRING, 2);
    output.writeString(this.region);
    output.writeFieldEnd();
  }
  if (this.locality !== null && this.locality !== undefined) {
    output.writeFieldBegin('locality', Thrift.Type.STRING, 3);
    output.writeString(this.locality);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserMention = function(args) {
  this.startOffset = null;
  this.endOffset = null;
  this.screenName = null;
  this.name = null;
  this.id = null;
  if (args) {
    if (args.startOffset !== undefined) {
      this.startOffset = args.startOffset;
    }
    if (args.endOffset !== undefined) {
      this.endOffset = args.endOffset;
    }
    if (args.screenName !== undefined) {
      this.screenName = args.screenName;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
UserMention.prototype = {};
UserMention.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.screenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserMention.prototype.write = function(output) {
  output.writeStructBegin('UserMention');
  if (this.startOffset !== null && this.startOffset !== undefined) {
    output.writeFieldBegin('startOffset', Thrift.Type.I32, 1);
    output.writeI32(this.startOffset);
    output.writeFieldEnd();
  }
  if (this.endOffset !== null && this.endOffset !== undefined) {
    output.writeFieldBegin('endOffset', Thrift.Type.I32, 2);
    output.writeI32(this.endOffset);
    output.writeFieldEnd();
  }
  if (this.screenName !== null && this.screenName !== undefined) {
    output.writeFieldBegin('screenName', Thrift.Type.STRING, 4);
    output.writeString(this.screenName);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 6);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

URL = function(args) {
  this.startOffset = null;
  this.endOffset = null;
  this.expandedUrl = null;
  this.url = null;
  this.displayUrl = null;
  if (args) {
    if (args.startOffset !== undefined) {
      this.startOffset = args.startOffset;
    }
    if (args.endOffset !== undefined) {
      this.endOffset = args.endOffset;
    }
    if (args.expandedUrl !== undefined) {
      this.expandedUrl = args.expandedUrl;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.displayUrl !== undefined) {
      this.displayUrl = args.displayUrl;
    }
  }
};
URL.prototype = {};
URL.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.startOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.endOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.expandedUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.displayUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

URL.prototype.write = function(output) {
  output.writeStructBegin('URL');
  if (this.startOffset !== null && this.startOffset !== undefined) {
    output.writeFieldBegin('startOffset', Thrift.Type.I32, 1);
    output.writeI32(this.startOffset);
    output.writeFieldEnd();
  }
  if (this.endOffset !== null && this.endOffset !== undefined) {
    output.writeFieldBegin('endOffset', Thrift.Type.I32, 2);
    output.writeI32(this.endOffset);
    output.writeFieldEnd();
  }
  if (this.expandedUrl !== null && this.expandedUrl !== undefined) {
    output.writeFieldBegin('expandedUrl', Thrift.Type.STRING, 3);
    output.writeString(this.expandedUrl);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 4);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.displayUrl !== null && this.displayUrl !== undefined) {
    output.writeFieldBegin('displayUrl', Thrift.Type.STRING, 5);
    output.writeString(this.displayUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HashTag = function(args) {
  this.text = null;
  this.startOffset = null;
  this.endOffset = null;
  if (args) {
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.startOffset !== undefined) {
      this.startOffset = args.startOffset;
    }
    if (args.endOffset !== undefined) {
      this.endOffset = args.endOffset;
    }
  }
};
HashTag.prototype = {};
HashTag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.startOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.endOffset = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HashTag.prototype.write = function(output) {
  output.writeStructBegin('HashTag');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.startOffset !== null && this.startOffset !== undefined) {
    output.writeFieldBegin('startOffset', Thrift.Type.I32, 2);
    output.writeI32(this.startOffset);
    output.writeFieldEnd();
  }
  if (this.endOffset !== null && this.endOffset !== undefined) {
    output.writeFieldBegin('endOffset', Thrift.Type.I32, 3);
    output.writeI32(this.endOffset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterEntities = function(args) {
  this.hashtags = null;
  this.urls = null;
  this.userMentions = null;
  if (args) {
    if (args.hashtags !== undefined) {
      this.hashtags = args.hashtags;
    }
    if (args.urls !== undefined) {
      this.urls = args.urls;
    }
    if (args.userMentions !== undefined) {
      this.userMentions = args.userMentions;
    }
  }
};
TwitterEntities.prototype = {};
TwitterEntities.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.hashtags = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new HashTag();
          elem14.read(input);
          this.hashtags.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.urls = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new URL();
          elem21.read(input);
          this.urls.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.userMentions = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new UserMention();
          elem28.read(input);
          this.userMentions.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterEntities.prototype.write = function(output) {
  output.writeStructBegin('TwitterEntities');
  if (this.hashtags !== null && this.hashtags !== undefined) {
    output.writeFieldBegin('hashtags', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.hashtags.length);
    for (var iter29 in this.hashtags)
    {
      if (this.hashtags.hasOwnProperty(iter29))
      {
        iter29 = this.hashtags[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.urls !== null && this.urls !== undefined) {
    output.writeFieldBegin('urls', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.urls.length);
    for (var iter30 in this.urls)
    {
      if (this.urls.hasOwnProperty(iter30))
      {
        iter30 = this.urls[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userMentions !== null && this.userMentions !== undefined) {
    output.writeFieldBegin('userMentions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.userMentions.length);
    for (var iter31 in this.userMentions)
    {
      if (this.userMentions.hasOwnProperty(iter31))
      {
        iter31 = this.userMentions[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterPlace = function(args) {
  this.placeType = null;
  this.countryCode = null;
  this.country = null;
  this.fullName = null;
  this.name = null;
  this.id = null;
  this.url = null;
  this.boundingBox = null;
  this.attributes = null;
  if (args) {
    if (args.placeType !== undefined) {
      this.placeType = args.placeType;
    }
    if (args.countryCode !== undefined) {
      this.countryCode = args.countryCode;
    }
    if (args.country !== undefined) {
      this.country = args.country;
    }
    if (args.fullName !== undefined) {
      this.fullName = args.fullName;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.url !== undefined) {
      this.url = args.url;
    }
    if (args.boundingBox !== undefined) {
      this.boundingBox = args.boundingBox;
    }
    if (args.attributes !== undefined) {
      this.attributes = args.attributes;
    }
  }
};
TwitterPlace.prototype = {};
TwitterPlace.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.placeType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.country = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.fullName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.boundingBox = new BoundingBox();
        this.boundingBox.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.attributes = new PlaceAttributes();
        this.attributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterPlace.prototype.write = function(output) {
  output.writeStructBegin('TwitterPlace');
  if (this.placeType !== null && this.placeType !== undefined) {
    output.writeFieldBegin('placeType', Thrift.Type.STRING, 1);
    output.writeString(this.placeType);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 2);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.country !== null && this.country !== undefined) {
    output.writeFieldBegin('country', Thrift.Type.STRING, 3);
    output.writeString(this.country);
    output.writeFieldEnd();
  }
  if (this.fullName !== null && this.fullName !== undefined) {
    output.writeFieldBegin('fullName', Thrift.Type.STRING, 4);
    output.writeString(this.fullName);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 5);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 6);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 7);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.boundingBox !== null && this.boundingBox !== undefined) {
    output.writeFieldBegin('boundingBox', Thrift.Type.STRUCT, 8);
    this.boundingBox.write(output);
    output.writeFieldEnd();
  }
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.STRUCT, 9);
    this.attributes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TwitterCoordinates = function(args) {
  this.type = null;
  this.coordinates = null;
  if (args) {
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.coordinates !== undefined) {
      this.coordinates = args.coordinates;
    }
  }
};
TwitterCoordinates.prototype = {};
TwitterCoordinates.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.coordinates = new TwitterLatLong();
        this.coordinates.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TwitterCoordinates.prototype.write = function(output) {
  output.writeStructBegin('TwitterCoordinates');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.STRUCT, 2);
    this.coordinates.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TweetInfo = function(args) {
  this.id = null;
  this.text = null;
  this.createdAt = null;
  this.user = null;
  this.truncated = null;
  this.entities = null;
  this.source = null;
  this.coordinates = null;
  this.place = null;
  this.favorited = null;
  this.retweeted = null;
  this.retweetCount = null;
  this.inReplyToScreenName = null;
  this.inReplyToStatusId = null;
  this.inReplyToUserId = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.createdAt !== undefined) {
      this.createdAt = args.createdAt;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.truncated !== undefined) {
      this.truncated = args.truncated;
    }
    if (args.entities !== undefined) {
      this.entities = args.entities;
    }
    if (args.source !== undefined) {
      this.source = args.source;
    }
    if (args.coordinates !== undefined) {
      this.coordinates = args.coordinates;
    }
    if (args.place !== undefined) {
      this.place = args.place;
    }
    if (args.favorited !== undefined) {
      this.favorited = args.favorited;
    }
    if (args.retweeted !== undefined) {
      this.retweeted = args.retweeted;
    }
    if (args.retweetCount !== undefined) {
      this.retweetCount = args.retweetCount;
    }
    if (args.inReplyToScreenName !== undefined) {
      this.inReplyToScreenName = args.inReplyToScreenName;
    }
    if (args.inReplyToStatusId !== undefined) {
      this.inReplyToStatusId = args.inReplyToStatusId;
    }
    if (args.inReplyToUserId !== undefined) {
      this.inReplyToUserId = args.inReplyToUserId;
    }
  }
};
TweetInfo.prototype = {};
TweetInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new TwitterUser();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.entities = new TwitterEntities();
        this.entities.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.coordinates = new TwitterCoordinates();
        this.coordinates.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.place = new TwitterPlace();
        this.place.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.favorited = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.retweeted = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.retweetCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.inReplyToScreenName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.inReplyToStatusId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.inReplyToUserId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TweetInfo.prototype.write = function(output) {
  output.writeStructBegin('TweetInfo');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 3);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 5);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 6);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.entities !== null && this.entities !== undefined) {
    output.writeFieldBegin('entities', Thrift.Type.STRUCT, 7);
    this.entities.write(output);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 8);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.STRUCT, 9);
    this.coordinates.write(output);
    output.writeFieldEnd();
  }
  if (this.place !== null && this.place !== undefined) {
    output.writeFieldBegin('place', Thrift.Type.STRUCT, 11);
    this.place.write(output);
    output.writeFieldEnd();
  }
  if (this.favorited !== null && this.favorited !== undefined) {
    output.writeFieldBegin('favorited', Thrift.Type.BOOL, 12);
    output.writeBool(this.favorited);
    output.writeFieldEnd();
  }
  if (this.retweeted !== null && this.retweeted !== undefined) {
    output.writeFieldBegin('retweeted', Thrift.Type.BOOL, 13);
    output.writeBool(this.retweeted);
    output.writeFieldEnd();
  }
  if (this.retweetCount !== null && this.retweetCount !== undefined) {
    output.writeFieldBegin('retweetCount', Thrift.Type.I32, 14);
    output.writeI32(this.retweetCount);
    output.writeFieldEnd();
  }
  if (this.inReplyToScreenName !== null && this.inReplyToScreenName !== undefined) {
    output.writeFieldBegin('inReplyToScreenName', Thrift.Type.STRING, 15);
    output.writeString(this.inReplyToScreenName);
    output.writeFieldEnd();
  }
  if (this.inReplyToStatusId !== null && this.inReplyToStatusId !== undefined) {
    output.writeFieldBegin('inReplyToStatusId', Thrift.Type.I64, 16);
    output.writeI64(this.inReplyToStatusId);
    output.writeFieldEnd();
  }
  if (this.inReplyToUserId !== null && this.inReplyToUserId !== undefined) {
    output.writeFieldBegin('inReplyToUserId', Thrift.Type.I64, 18);
    output.writeI64(this.inReplyToUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

